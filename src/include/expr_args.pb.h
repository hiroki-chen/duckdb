// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: expr_args.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_expr_5fargs_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_expr_5fargs_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_expr_5fargs_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_expr_5fargs_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_expr_5fargs_2eproto;
namespace PicachvMessages {
class AggExpr;
struct AggExprDefaultTypeInternal;
extern AggExprDefaultTypeInternal _AggExpr_default_instance_;
class AliasExpr;
struct AliasExprDefaultTypeInternal;
extern AliasExprDefaultTypeInternal _AliasExpr_default_instance_;
class ApplyExpr;
struct ApplyExprDefaultTypeInternal;
extern ApplyExprDefaultTypeInternal _ApplyExpr_default_instance_;
class BinaryExpr;
struct BinaryExprDefaultTypeInternal;
extern BinaryExprDefaultTypeInternal _BinaryExpr_default_instance_;
class ColumnExpr;
struct ColumnExprDefaultTypeInternal;
extern ColumnExprDefaultTypeInternal _ColumnExpr_default_instance_;
class ExprArgument;
struct ExprArgumentDefaultTypeInternal;
extern ExprArgumentDefaultTypeInternal _ExprArgument_default_instance_;
class FilterExpr;
struct FilterExprDefaultTypeInternal;
extern FilterExprDefaultTypeInternal _FilterExpr_default_instance_;
class LiteralExpr;
struct LiteralExprDefaultTypeInternal;
extern LiteralExprDefaultTypeInternal _LiteralExpr_default_instance_;
class UnaryExpr;
struct UnaryExprDefaultTypeInternal;
extern UnaryExprDefaultTypeInternal _UnaryExpr_default_instance_;
class WildcardExpr;
struct WildcardExprDefaultTypeInternal;
extern WildcardExprDefaultTypeInternal _WildcardExpr_default_instance_;
}  // namespace PicachvMessages
PROTOBUF_NAMESPACE_OPEN
template<> ::PicachvMessages::AggExpr* Arena::CreateMaybeMessage<::PicachvMessages::AggExpr>(Arena*);
template<> ::PicachvMessages::AliasExpr* Arena::CreateMaybeMessage<::PicachvMessages::AliasExpr>(Arena*);
template<> ::PicachvMessages::ApplyExpr* Arena::CreateMaybeMessage<::PicachvMessages::ApplyExpr>(Arena*);
template<> ::PicachvMessages::BinaryExpr* Arena::CreateMaybeMessage<::PicachvMessages::BinaryExpr>(Arena*);
template<> ::PicachvMessages::ColumnExpr* Arena::CreateMaybeMessage<::PicachvMessages::ColumnExpr>(Arena*);
template<> ::PicachvMessages::ExprArgument* Arena::CreateMaybeMessage<::PicachvMessages::ExprArgument>(Arena*);
template<> ::PicachvMessages::FilterExpr* Arena::CreateMaybeMessage<::PicachvMessages::FilterExpr>(Arena*);
template<> ::PicachvMessages::LiteralExpr* Arena::CreateMaybeMessage<::PicachvMessages::LiteralExpr>(Arena*);
template<> ::PicachvMessages::UnaryExpr* Arena::CreateMaybeMessage<::PicachvMessages::UnaryExpr>(Arena*);
template<> ::PicachvMessages::WildcardExpr* Arena::CreateMaybeMessage<::PicachvMessages::WildcardExpr>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PicachvMessages {

// ===================================================================

class AggExpr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.AggExpr) */ {
 public:
  inline AggExpr() : AggExpr(nullptr) {}
  ~AggExpr() override;
  explicit PROTOBUF_CONSTEXPR AggExpr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AggExpr(const AggExpr& from);
  AggExpr(AggExpr&& from) noexcept
    : AggExpr() {
    *this = ::std::move(from);
  }

  inline AggExpr& operator=(const AggExpr& from) {
    CopyFrom(from);
    return *this;
  }
  inline AggExpr& operator=(AggExpr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AggExpr& default_instance() {
    return *internal_default_instance();
  }
  static inline const AggExpr* internal_default_instance() {
    return reinterpret_cast<const AggExpr*>(
               &_AggExpr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AggExpr& a, AggExpr& b) {
    a.Swap(&b);
  }
  inline void Swap(AggExpr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AggExpr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AggExpr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AggExpr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AggExpr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AggExpr& from) {
    AggExpr::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AggExpr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.AggExpr";
  }
  protected:
  explicit AggExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputUuidFieldNumber = 1,
    kMethodFieldNumber = 2,
  };
  // bytes input_uuid = 1;
  void clear_input_uuid();
  const std::string& input_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_uuid();
  PROTOBUF_NODISCARD std::string* release_input_uuid();
  void set_allocated_input_uuid(std::string* input_uuid);
  private:
  const std::string& _internal_input_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_uuid(const std::string& value);
  std::string* _internal_mutable_input_uuid();
  public:

  // .PicachvMessages.GroupByMethod method = 2;
  void clear_method();
  ::PicachvMessages::GroupByMethod method() const;
  void set_method(::PicachvMessages::GroupByMethod value);
  private:
  ::PicachvMessages::GroupByMethod _internal_method() const;
  void _internal_set_method(::PicachvMessages::GroupByMethod value);
  public:

  // @@protoc_insertion_point(class_scope:PicachvMessages.AggExpr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_uuid_;
    int method_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_expr_5fargs_2eproto;
};
// -------------------------------------------------------------------

class ColumnExpr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.ColumnExpr) */ {
 public:
  inline ColumnExpr() : ColumnExpr(nullptr) {}
  ~ColumnExpr() override;
  explicit PROTOBUF_CONSTEXPR ColumnExpr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColumnExpr(const ColumnExpr& from);
  ColumnExpr(ColumnExpr&& from) noexcept
    : ColumnExpr() {
    *this = ::std::move(from);
  }

  inline ColumnExpr& operator=(const ColumnExpr& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnExpr& operator=(ColumnExpr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnExpr& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColumnExpr* internal_default_instance() {
    return reinterpret_cast<const ColumnExpr*>(
               &_ColumnExpr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ColumnExpr& a, ColumnExpr& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnExpr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnExpr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColumnExpr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColumnExpr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColumnExpr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColumnExpr& from) {
    ColumnExpr::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnExpr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.ColumnExpr";
  }
  protected:
  explicit ColumnExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnFieldNumber = 1,
  };
  // .PicachvMessages.ColumnSpecifier column = 1;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  const ::PicachvMessages::ColumnSpecifier& column() const;
  PROTOBUF_NODISCARD ::PicachvMessages::ColumnSpecifier* release_column();
  ::PicachvMessages::ColumnSpecifier* mutable_column();
  void set_allocated_column(::PicachvMessages::ColumnSpecifier* column);
  private:
  const ::PicachvMessages::ColumnSpecifier& _internal_column() const;
  ::PicachvMessages::ColumnSpecifier* _internal_mutable_column();
  public:
  void unsafe_arena_set_allocated_column(
      ::PicachvMessages::ColumnSpecifier* column);
  ::PicachvMessages::ColumnSpecifier* unsafe_arena_release_column();

  // @@protoc_insertion_point(class_scope:PicachvMessages.ColumnExpr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PicachvMessages::ColumnSpecifier* column_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_expr_5fargs_2eproto;
};
// -------------------------------------------------------------------

class AliasExpr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.AliasExpr) */ {
 public:
  inline AliasExpr() : AliasExpr(nullptr) {}
  ~AliasExpr() override;
  explicit PROTOBUF_CONSTEXPR AliasExpr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AliasExpr(const AliasExpr& from);
  AliasExpr(AliasExpr&& from) noexcept
    : AliasExpr() {
    *this = ::std::move(from);
  }

  inline AliasExpr& operator=(const AliasExpr& from) {
    CopyFrom(from);
    return *this;
  }
  inline AliasExpr& operator=(AliasExpr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AliasExpr& default_instance() {
    return *internal_default_instance();
  }
  static inline const AliasExpr* internal_default_instance() {
    return reinterpret_cast<const AliasExpr*>(
               &_AliasExpr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AliasExpr& a, AliasExpr& b) {
    a.Swap(&b);
  }
  inline void Swap(AliasExpr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AliasExpr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AliasExpr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AliasExpr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AliasExpr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const AliasExpr& from) {
    AliasExpr::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AliasExpr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.AliasExpr";
  }
  protected:
  explicit AliasExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputUuidFieldNumber = 1,
    kAliasFieldNumber = 2,
  };
  // bytes input_uuid = 1;
  void clear_input_uuid();
  const std::string& input_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_uuid();
  PROTOBUF_NODISCARD std::string* release_input_uuid();
  void set_allocated_input_uuid(std::string* input_uuid);
  private:
  const std::string& _internal_input_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_uuid(const std::string& value);
  std::string* _internal_mutable_input_uuid();
  public:

  // string alias = 2;
  void clear_alias();
  const std::string& alias() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_alias(ArgT0&& arg0, ArgT... args);
  std::string* mutable_alias();
  PROTOBUF_NODISCARD std::string* release_alias();
  void set_allocated_alias(std::string* alias);
  private:
  const std::string& _internal_alias() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_alias(const std::string& value);
  std::string* _internal_mutable_alias();
  public:

  // @@protoc_insertion_point(class_scope:PicachvMessages.AliasExpr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr alias_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_expr_5fargs_2eproto;
};
// -------------------------------------------------------------------

class WildcardExpr final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:PicachvMessages.WildcardExpr) */ {
 public:
  inline WildcardExpr() : WildcardExpr(nullptr) {}
  explicit PROTOBUF_CONSTEXPR WildcardExpr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WildcardExpr(const WildcardExpr& from);
  WildcardExpr(WildcardExpr&& from) noexcept
    : WildcardExpr() {
    *this = ::std::move(from);
  }

  inline WildcardExpr& operator=(const WildcardExpr& from) {
    CopyFrom(from);
    return *this;
  }
  inline WildcardExpr& operator=(WildcardExpr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WildcardExpr& default_instance() {
    return *internal_default_instance();
  }
  static inline const WildcardExpr* internal_default_instance() {
    return reinterpret_cast<const WildcardExpr*>(
               &_WildcardExpr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WildcardExpr& a, WildcardExpr& b) {
    a.Swap(&b);
  }
  inline void Swap(WildcardExpr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WildcardExpr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WildcardExpr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WildcardExpr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const WildcardExpr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const WildcardExpr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.WildcardExpr";
  }
  protected:
  explicit WildcardExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PicachvMessages.WildcardExpr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_expr_5fargs_2eproto;
};
// -------------------------------------------------------------------

class LiteralExpr final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:PicachvMessages.LiteralExpr) */ {
 public:
  inline LiteralExpr() : LiteralExpr(nullptr) {}
  explicit PROTOBUF_CONSTEXPR LiteralExpr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LiteralExpr(const LiteralExpr& from);
  LiteralExpr(LiteralExpr&& from) noexcept
    : LiteralExpr() {
    *this = ::std::move(from);
  }

  inline LiteralExpr& operator=(const LiteralExpr& from) {
    CopyFrom(from);
    return *this;
  }
  inline LiteralExpr& operator=(LiteralExpr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LiteralExpr& default_instance() {
    return *internal_default_instance();
  }
  static inline const LiteralExpr* internal_default_instance() {
    return reinterpret_cast<const LiteralExpr*>(
               &_LiteralExpr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LiteralExpr& a, LiteralExpr& b) {
    a.Swap(&b);
  }
  inline void Swap(LiteralExpr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LiteralExpr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LiteralExpr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LiteralExpr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const LiteralExpr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const LiteralExpr& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.LiteralExpr";
  }
  protected:
  explicit LiteralExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:PicachvMessages.LiteralExpr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_expr_5fargs_2eproto;
};
// -------------------------------------------------------------------

class FilterExpr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.FilterExpr) */ {
 public:
  inline FilterExpr() : FilterExpr(nullptr) {}
  ~FilterExpr() override;
  explicit PROTOBUF_CONSTEXPR FilterExpr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FilterExpr(const FilterExpr& from);
  FilterExpr(FilterExpr&& from) noexcept
    : FilterExpr() {
    *this = ::std::move(from);
  }

  inline FilterExpr& operator=(const FilterExpr& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterExpr& operator=(FilterExpr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FilterExpr& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilterExpr* internal_default_instance() {
    return reinterpret_cast<const FilterExpr*>(
               &_FilterExpr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FilterExpr& a, FilterExpr& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterExpr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterExpr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FilterExpr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FilterExpr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FilterExpr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FilterExpr& from) {
    FilterExpr::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterExpr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.FilterExpr";
  }
  protected:
  explicit FilterExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputUuidFieldNumber = 1,
    kFilterUuidFieldNumber = 2,
  };
  // bytes input_uuid = 1;
  void clear_input_uuid();
  const std::string& input_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_uuid();
  PROTOBUF_NODISCARD std::string* release_input_uuid();
  void set_allocated_input_uuid(std::string* input_uuid);
  private:
  const std::string& _internal_input_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_uuid(const std::string& value);
  std::string* _internal_mutable_input_uuid();
  public:

  // bytes filter_uuid = 2;
  void clear_filter_uuid();
  const std::string& filter_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_filter_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_filter_uuid();
  PROTOBUF_NODISCARD std::string* release_filter_uuid();
  void set_allocated_filter_uuid(std::string* filter_uuid);
  private:
  const std::string& _internal_filter_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_filter_uuid(const std::string& value);
  std::string* _internal_mutable_filter_uuid();
  public:

  // @@protoc_insertion_point(class_scope:PicachvMessages.FilterExpr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_uuid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_expr_5fargs_2eproto;
};
// -------------------------------------------------------------------

class BinaryExpr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.BinaryExpr) */ {
 public:
  inline BinaryExpr() : BinaryExpr(nullptr) {}
  ~BinaryExpr() override;
  explicit PROTOBUF_CONSTEXPR BinaryExpr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinaryExpr(const BinaryExpr& from);
  BinaryExpr(BinaryExpr&& from) noexcept
    : BinaryExpr() {
    *this = ::std::move(from);
  }

  inline BinaryExpr& operator=(const BinaryExpr& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryExpr& operator=(BinaryExpr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BinaryExpr& default_instance() {
    return *internal_default_instance();
  }
  static inline const BinaryExpr* internal_default_instance() {
    return reinterpret_cast<const BinaryExpr*>(
               &_BinaryExpr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BinaryExpr& a, BinaryExpr& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryExpr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinaryExpr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinaryExpr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinaryExpr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BinaryExpr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BinaryExpr& from) {
    BinaryExpr::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryExpr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.BinaryExpr";
  }
  protected:
  explicit BinaryExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftUuidFieldNumber = 1,
    kRightUuidFieldNumber = 2,
    kOpFieldNumber = 3,
  };
  // bytes left_uuid = 1;
  void clear_left_uuid();
  const std::string& left_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_left_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_left_uuid();
  PROTOBUF_NODISCARD std::string* release_left_uuid();
  void set_allocated_left_uuid(std::string* left_uuid);
  private:
  const std::string& _internal_left_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_left_uuid(const std::string& value);
  std::string* _internal_mutable_left_uuid();
  public:

  // bytes right_uuid = 2;
  void clear_right_uuid();
  const std::string& right_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_right_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_right_uuid();
  PROTOBUF_NODISCARD std::string* release_right_uuid();
  void set_allocated_right_uuid(std::string* right_uuid);
  private:
  const std::string& _internal_right_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_right_uuid(const std::string& value);
  std::string* _internal_mutable_right_uuid();
  public:

  // .PicachvMessages.BinaryOperator op = 3;
  bool has_op() const;
  private:
  bool _internal_has_op() const;
  public:
  void clear_op();
  const ::PicachvMessages::BinaryOperator& op() const;
  PROTOBUF_NODISCARD ::PicachvMessages::BinaryOperator* release_op();
  ::PicachvMessages::BinaryOperator* mutable_op();
  void set_allocated_op(::PicachvMessages::BinaryOperator* op);
  private:
  const ::PicachvMessages::BinaryOperator& _internal_op() const;
  ::PicachvMessages::BinaryOperator* _internal_mutable_op();
  public:
  void unsafe_arena_set_allocated_op(
      ::PicachvMessages::BinaryOperator* op);
  ::PicachvMessages::BinaryOperator* unsafe_arena_release_op();

  // @@protoc_insertion_point(class_scope:PicachvMessages.BinaryExpr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr left_uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr right_uuid_;
    ::PicachvMessages::BinaryOperator* op_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_expr_5fargs_2eproto;
};
// -------------------------------------------------------------------

class UnaryExpr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.UnaryExpr) */ {
 public:
  inline UnaryExpr() : UnaryExpr(nullptr) {}
  ~UnaryExpr() override;
  explicit PROTOBUF_CONSTEXPR UnaryExpr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnaryExpr(const UnaryExpr& from);
  UnaryExpr(UnaryExpr&& from) noexcept
    : UnaryExpr() {
    *this = ::std::move(from);
  }

  inline UnaryExpr& operator=(const UnaryExpr& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnaryExpr& operator=(UnaryExpr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnaryExpr& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnaryExpr* internal_default_instance() {
    return reinterpret_cast<const UnaryExpr*>(
               &_UnaryExpr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UnaryExpr& a, UnaryExpr& b) {
    a.Swap(&b);
  }
  inline void Swap(UnaryExpr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnaryExpr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnaryExpr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnaryExpr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnaryExpr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnaryExpr& from) {
    UnaryExpr::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnaryExpr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.UnaryExpr";
  }
  protected:
  explicit UnaryExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputUuidFieldNumber = 1,
    kOpFieldNumber = 2,
  };
  // bytes input_uuid = 1;
  void clear_input_uuid();
  const std::string& input_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input_uuid();
  PROTOBUF_NODISCARD std::string* release_input_uuid();
  void set_allocated_input_uuid(std::string* input_uuid);
  private:
  const std::string& _internal_input_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input_uuid(const std::string& value);
  std::string* _internal_mutable_input_uuid();
  public:

  // .PicachvMessages.UnaryOperator op = 2;
  void clear_op();
  ::PicachvMessages::UnaryOperator op() const;
  void set_op(::PicachvMessages::UnaryOperator value);
  private:
  ::PicachvMessages::UnaryOperator _internal_op() const;
  void _internal_set_op(::PicachvMessages::UnaryOperator value);
  public:

  // @@protoc_insertion_point(class_scope:PicachvMessages.UnaryExpr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_uuid_;
    int op_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_expr_5fargs_2eproto;
};
// -------------------------------------------------------------------

class ApplyExpr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.ApplyExpr) */ {
 public:
  inline ApplyExpr() : ApplyExpr(nullptr) {}
  ~ApplyExpr() override;
  explicit PROTOBUF_CONSTEXPR ApplyExpr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ApplyExpr(const ApplyExpr& from);
  ApplyExpr(ApplyExpr&& from) noexcept
    : ApplyExpr() {
    *this = ::std::move(from);
  }

  inline ApplyExpr& operator=(const ApplyExpr& from) {
    CopyFrom(from);
    return *this;
  }
  inline ApplyExpr& operator=(ApplyExpr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ApplyExpr& default_instance() {
    return *internal_default_instance();
  }
  static inline const ApplyExpr* internal_default_instance() {
    return reinterpret_cast<const ApplyExpr*>(
               &_ApplyExpr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ApplyExpr& a, ApplyExpr& b) {
    a.Swap(&b);
  }
  inline void Swap(ApplyExpr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ApplyExpr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ApplyExpr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ApplyExpr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ApplyExpr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ApplyExpr& from) {
    ApplyExpr::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ApplyExpr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.ApplyExpr";
  }
  protected:
  explicit ApplyExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputUuidsFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // repeated bytes input_uuids = 1;
  int input_uuids_size() const;
  private:
  int _internal_input_uuids_size() const;
  public:
  void clear_input_uuids();
  const std::string& input_uuids(int index) const;
  std::string* mutable_input_uuids(int index);
  void set_input_uuids(int index, const std::string& value);
  void set_input_uuids(int index, std::string&& value);
  void set_input_uuids(int index, const char* value);
  void set_input_uuids(int index, const void* value, size_t size);
  std::string* add_input_uuids();
  void add_input_uuids(const std::string& value);
  void add_input_uuids(std::string&& value);
  void add_input_uuids(const char* value);
  void add_input_uuids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& input_uuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_input_uuids();
  private:
  const std::string& _internal_input_uuids(int index) const;
  std::string* _internal_add_input_uuids();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:PicachvMessages.ApplyExpr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> input_uuids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_expr_5fargs_2eproto;
};
// -------------------------------------------------------------------

class ExprArgument final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.ExprArgument) */ {
 public:
  inline ExprArgument() : ExprArgument(nullptr) {}
  ~ExprArgument() override;
  explicit PROTOBUF_CONSTEXPR ExprArgument(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExprArgument(const ExprArgument& from);
  ExprArgument(ExprArgument&& from) noexcept
    : ExprArgument() {
    *this = ::std::move(from);
  }

  inline ExprArgument& operator=(const ExprArgument& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExprArgument& operator=(ExprArgument&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExprArgument& default_instance() {
    return *internal_default_instance();
  }
  enum ArgumentCase {
    kAgg = 1,
    kColumn = 2,
    kAlias = 3,
    kWildcard = 4,
    kFilter = 5,
    kBinary = 6,
    kUnary = 7,
    kLiteral = 8,
    kApply = 9,
    ARGUMENT_NOT_SET = 0,
  };

  static inline const ExprArgument* internal_default_instance() {
    return reinterpret_cast<const ExprArgument*>(
               &_ExprArgument_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ExprArgument& a, ExprArgument& b) {
    a.Swap(&b);
  }
  inline void Swap(ExprArgument* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExprArgument* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExprArgument* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExprArgument>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExprArgument& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExprArgument& from) {
    ExprArgument::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExprArgument* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.ExprArgument";
  }
  protected:
  explicit ExprArgument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAggFieldNumber = 1,
    kColumnFieldNumber = 2,
    kAliasFieldNumber = 3,
    kWildcardFieldNumber = 4,
    kFilterFieldNumber = 5,
    kBinaryFieldNumber = 6,
    kUnaryFieldNumber = 7,
    kLiteralFieldNumber = 8,
    kApplyFieldNumber = 9,
  };
  // .PicachvMessages.AggExpr agg = 1;
  bool has_agg() const;
  private:
  bool _internal_has_agg() const;
  public:
  void clear_agg();
  const ::PicachvMessages::AggExpr& agg() const;
  PROTOBUF_NODISCARD ::PicachvMessages::AggExpr* release_agg();
  ::PicachvMessages::AggExpr* mutable_agg();
  void set_allocated_agg(::PicachvMessages::AggExpr* agg);
  private:
  const ::PicachvMessages::AggExpr& _internal_agg() const;
  ::PicachvMessages::AggExpr* _internal_mutable_agg();
  public:
  void unsafe_arena_set_allocated_agg(
      ::PicachvMessages::AggExpr* agg);
  ::PicachvMessages::AggExpr* unsafe_arena_release_agg();

  // .PicachvMessages.ColumnExpr column = 2;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  const ::PicachvMessages::ColumnExpr& column() const;
  PROTOBUF_NODISCARD ::PicachvMessages::ColumnExpr* release_column();
  ::PicachvMessages::ColumnExpr* mutable_column();
  void set_allocated_column(::PicachvMessages::ColumnExpr* column);
  private:
  const ::PicachvMessages::ColumnExpr& _internal_column() const;
  ::PicachvMessages::ColumnExpr* _internal_mutable_column();
  public:
  void unsafe_arena_set_allocated_column(
      ::PicachvMessages::ColumnExpr* column);
  ::PicachvMessages::ColumnExpr* unsafe_arena_release_column();

  // .PicachvMessages.AliasExpr alias = 3;
  bool has_alias() const;
  private:
  bool _internal_has_alias() const;
  public:
  void clear_alias();
  const ::PicachvMessages::AliasExpr& alias() const;
  PROTOBUF_NODISCARD ::PicachvMessages::AliasExpr* release_alias();
  ::PicachvMessages::AliasExpr* mutable_alias();
  void set_allocated_alias(::PicachvMessages::AliasExpr* alias);
  private:
  const ::PicachvMessages::AliasExpr& _internal_alias() const;
  ::PicachvMessages::AliasExpr* _internal_mutable_alias();
  public:
  void unsafe_arena_set_allocated_alias(
      ::PicachvMessages::AliasExpr* alias);
  ::PicachvMessages::AliasExpr* unsafe_arena_release_alias();

  // .PicachvMessages.WildcardExpr wildcard = 4;
  bool has_wildcard() const;
  private:
  bool _internal_has_wildcard() const;
  public:
  void clear_wildcard();
  const ::PicachvMessages::WildcardExpr& wildcard() const;
  PROTOBUF_NODISCARD ::PicachvMessages::WildcardExpr* release_wildcard();
  ::PicachvMessages::WildcardExpr* mutable_wildcard();
  void set_allocated_wildcard(::PicachvMessages::WildcardExpr* wildcard);
  private:
  const ::PicachvMessages::WildcardExpr& _internal_wildcard() const;
  ::PicachvMessages::WildcardExpr* _internal_mutable_wildcard();
  public:
  void unsafe_arena_set_allocated_wildcard(
      ::PicachvMessages::WildcardExpr* wildcard);
  ::PicachvMessages::WildcardExpr* unsafe_arena_release_wildcard();

  // .PicachvMessages.FilterExpr filter = 5;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::PicachvMessages::FilterExpr& filter() const;
  PROTOBUF_NODISCARD ::PicachvMessages::FilterExpr* release_filter();
  ::PicachvMessages::FilterExpr* mutable_filter();
  void set_allocated_filter(::PicachvMessages::FilterExpr* filter);
  private:
  const ::PicachvMessages::FilterExpr& _internal_filter() const;
  ::PicachvMessages::FilterExpr* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::PicachvMessages::FilterExpr* filter);
  ::PicachvMessages::FilterExpr* unsafe_arena_release_filter();

  // .PicachvMessages.BinaryExpr binary = 6;
  bool has_binary() const;
  private:
  bool _internal_has_binary() const;
  public:
  void clear_binary();
  const ::PicachvMessages::BinaryExpr& binary() const;
  PROTOBUF_NODISCARD ::PicachvMessages::BinaryExpr* release_binary();
  ::PicachvMessages::BinaryExpr* mutable_binary();
  void set_allocated_binary(::PicachvMessages::BinaryExpr* binary);
  private:
  const ::PicachvMessages::BinaryExpr& _internal_binary() const;
  ::PicachvMessages::BinaryExpr* _internal_mutable_binary();
  public:
  void unsafe_arena_set_allocated_binary(
      ::PicachvMessages::BinaryExpr* binary);
  ::PicachvMessages::BinaryExpr* unsafe_arena_release_binary();

  // .PicachvMessages.UnaryExpr unary = 7;
  bool has_unary() const;
  private:
  bool _internal_has_unary() const;
  public:
  void clear_unary();
  const ::PicachvMessages::UnaryExpr& unary() const;
  PROTOBUF_NODISCARD ::PicachvMessages::UnaryExpr* release_unary();
  ::PicachvMessages::UnaryExpr* mutable_unary();
  void set_allocated_unary(::PicachvMessages::UnaryExpr* unary);
  private:
  const ::PicachvMessages::UnaryExpr& _internal_unary() const;
  ::PicachvMessages::UnaryExpr* _internal_mutable_unary();
  public:
  void unsafe_arena_set_allocated_unary(
      ::PicachvMessages::UnaryExpr* unary);
  ::PicachvMessages::UnaryExpr* unsafe_arena_release_unary();

  // .PicachvMessages.LiteralExpr literal = 8;
  bool has_literal() const;
  private:
  bool _internal_has_literal() const;
  public:
  void clear_literal();
  const ::PicachvMessages::LiteralExpr& literal() const;
  PROTOBUF_NODISCARD ::PicachvMessages::LiteralExpr* release_literal();
  ::PicachvMessages::LiteralExpr* mutable_literal();
  void set_allocated_literal(::PicachvMessages::LiteralExpr* literal);
  private:
  const ::PicachvMessages::LiteralExpr& _internal_literal() const;
  ::PicachvMessages::LiteralExpr* _internal_mutable_literal();
  public:
  void unsafe_arena_set_allocated_literal(
      ::PicachvMessages::LiteralExpr* literal);
  ::PicachvMessages::LiteralExpr* unsafe_arena_release_literal();

  // .PicachvMessages.ApplyExpr apply = 9;
  bool has_apply() const;
  private:
  bool _internal_has_apply() const;
  public:
  void clear_apply();
  const ::PicachvMessages::ApplyExpr& apply() const;
  PROTOBUF_NODISCARD ::PicachvMessages::ApplyExpr* release_apply();
  ::PicachvMessages::ApplyExpr* mutable_apply();
  void set_allocated_apply(::PicachvMessages::ApplyExpr* apply);
  private:
  const ::PicachvMessages::ApplyExpr& _internal_apply() const;
  ::PicachvMessages::ApplyExpr* _internal_mutable_apply();
  public:
  void unsafe_arena_set_allocated_apply(
      ::PicachvMessages::ApplyExpr* apply);
  ::PicachvMessages::ApplyExpr* unsafe_arena_release_apply();

  void clear_argument();
  ArgumentCase argument_case() const;
  // @@protoc_insertion_point(class_scope:PicachvMessages.ExprArgument)
 private:
  class _Internal;
  void set_has_agg();
  void set_has_column();
  void set_has_alias();
  void set_has_wildcard();
  void set_has_filter();
  void set_has_binary();
  void set_has_unary();
  void set_has_literal();
  void set_has_apply();

  inline bool has_argument() const;
  inline void clear_has_argument();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ArgumentUnion {
      constexpr ArgumentUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PicachvMessages::AggExpr* agg_;
      ::PicachvMessages::ColumnExpr* column_;
      ::PicachvMessages::AliasExpr* alias_;
      ::PicachvMessages::WildcardExpr* wildcard_;
      ::PicachvMessages::FilterExpr* filter_;
      ::PicachvMessages::BinaryExpr* binary_;
      ::PicachvMessages::UnaryExpr* unary_;
      ::PicachvMessages::LiteralExpr* literal_;
      ::PicachvMessages::ApplyExpr* apply_;
    } argument_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_expr_5fargs_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AggExpr

// bytes input_uuid = 1;
inline void AggExpr::clear_input_uuid() {
  _impl_.input_uuid_.ClearToEmpty();
}
inline const std::string& AggExpr::input_uuid() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.AggExpr.input_uuid)
  return _internal_input_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AggExpr::set_input_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.input_uuid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PicachvMessages.AggExpr.input_uuid)
}
inline std::string* AggExpr::mutable_input_uuid() {
  std::string* _s = _internal_mutable_input_uuid();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.AggExpr.input_uuid)
  return _s;
}
inline const std::string& AggExpr::_internal_input_uuid() const {
  return _impl_.input_uuid_.Get();
}
inline void AggExpr::_internal_set_input_uuid(const std::string& value) {
  
  _impl_.input_uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* AggExpr::_internal_mutable_input_uuid() {
  
  return _impl_.input_uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* AggExpr::release_input_uuid() {
  // @@protoc_insertion_point(field_release:PicachvMessages.AggExpr.input_uuid)
  return _impl_.input_uuid_.Release();
}
inline void AggExpr::set_allocated_input_uuid(std::string* input_uuid) {
  if (input_uuid != nullptr) {
    
  } else {
    
  }
  _impl_.input_uuid_.SetAllocated(input_uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.input_uuid_.IsDefault()) {
    _impl_.input_uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PicachvMessages.AggExpr.input_uuid)
}

// .PicachvMessages.GroupByMethod method = 2;
inline void AggExpr::clear_method() {
  _impl_.method_ = 0;
}
inline ::PicachvMessages::GroupByMethod AggExpr::_internal_method() const {
  return static_cast< ::PicachvMessages::GroupByMethod >(_impl_.method_);
}
inline ::PicachvMessages::GroupByMethod AggExpr::method() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.AggExpr.method)
  return _internal_method();
}
inline void AggExpr::_internal_set_method(::PicachvMessages::GroupByMethod value) {
  
  _impl_.method_ = value;
}
inline void AggExpr::set_method(::PicachvMessages::GroupByMethod value) {
  _internal_set_method(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.AggExpr.method)
}

// -------------------------------------------------------------------

// ColumnExpr

// .PicachvMessages.ColumnSpecifier column = 1;
inline bool ColumnExpr::_internal_has_column() const {
  return this != internal_default_instance() && _impl_.column_ != nullptr;
}
inline bool ColumnExpr::has_column() const {
  return _internal_has_column();
}
inline const ::PicachvMessages::ColumnSpecifier& ColumnExpr::_internal_column() const {
  const ::PicachvMessages::ColumnSpecifier* p = _impl_.column_;
  return p != nullptr ? *p : reinterpret_cast<const ::PicachvMessages::ColumnSpecifier&>(
      ::PicachvMessages::_ColumnSpecifier_default_instance_);
}
inline const ::PicachvMessages::ColumnSpecifier& ColumnExpr::column() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.ColumnExpr.column)
  return _internal_column();
}
inline void ColumnExpr::unsafe_arena_set_allocated_column(
    ::PicachvMessages::ColumnSpecifier* column) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.column_);
  }
  _impl_.column_ = column;
  if (column) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PicachvMessages.ColumnExpr.column)
}
inline ::PicachvMessages::ColumnSpecifier* ColumnExpr::release_column() {
  
  ::PicachvMessages::ColumnSpecifier* temp = _impl_.column_;
  _impl_.column_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PicachvMessages::ColumnSpecifier* ColumnExpr::unsafe_arena_release_column() {
  // @@protoc_insertion_point(field_release:PicachvMessages.ColumnExpr.column)
  
  ::PicachvMessages::ColumnSpecifier* temp = _impl_.column_;
  _impl_.column_ = nullptr;
  return temp;
}
inline ::PicachvMessages::ColumnSpecifier* ColumnExpr::_internal_mutable_column() {
  
  if (_impl_.column_ == nullptr) {
    auto* p = CreateMaybeMessage<::PicachvMessages::ColumnSpecifier>(GetArenaForAllocation());
    _impl_.column_ = p;
  }
  return _impl_.column_;
}
inline ::PicachvMessages::ColumnSpecifier* ColumnExpr::mutable_column() {
  ::PicachvMessages::ColumnSpecifier* _msg = _internal_mutable_column();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.ColumnExpr.column)
  return _msg;
}
inline void ColumnExpr::set_allocated_column(::PicachvMessages::ColumnSpecifier* column) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.column_);
  }
  if (column) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column));
    if (message_arena != submessage_arena) {
      column = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.column_ = column;
  // @@protoc_insertion_point(field_set_allocated:PicachvMessages.ColumnExpr.column)
}

// -------------------------------------------------------------------

// AliasExpr

// bytes input_uuid = 1;
inline void AliasExpr::clear_input_uuid() {
  _impl_.input_uuid_.ClearToEmpty();
}
inline const std::string& AliasExpr::input_uuid() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.AliasExpr.input_uuid)
  return _internal_input_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AliasExpr::set_input_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.input_uuid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PicachvMessages.AliasExpr.input_uuid)
}
inline std::string* AliasExpr::mutable_input_uuid() {
  std::string* _s = _internal_mutable_input_uuid();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.AliasExpr.input_uuid)
  return _s;
}
inline const std::string& AliasExpr::_internal_input_uuid() const {
  return _impl_.input_uuid_.Get();
}
inline void AliasExpr::_internal_set_input_uuid(const std::string& value) {
  
  _impl_.input_uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* AliasExpr::_internal_mutable_input_uuid() {
  
  return _impl_.input_uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* AliasExpr::release_input_uuid() {
  // @@protoc_insertion_point(field_release:PicachvMessages.AliasExpr.input_uuid)
  return _impl_.input_uuid_.Release();
}
inline void AliasExpr::set_allocated_input_uuid(std::string* input_uuid) {
  if (input_uuid != nullptr) {
    
  } else {
    
  }
  _impl_.input_uuid_.SetAllocated(input_uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.input_uuid_.IsDefault()) {
    _impl_.input_uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PicachvMessages.AliasExpr.input_uuid)
}

// string alias = 2;
inline void AliasExpr::clear_alias() {
  _impl_.alias_.ClearToEmpty();
}
inline const std::string& AliasExpr::alias() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.AliasExpr.alias)
  return _internal_alias();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AliasExpr::set_alias(ArgT0&& arg0, ArgT... args) {
 
 _impl_.alias_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PicachvMessages.AliasExpr.alias)
}
inline std::string* AliasExpr::mutable_alias() {
  std::string* _s = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.AliasExpr.alias)
  return _s;
}
inline const std::string& AliasExpr::_internal_alias() const {
  return _impl_.alias_.Get();
}
inline void AliasExpr::_internal_set_alias(const std::string& value) {
  
  _impl_.alias_.Set(value, GetArenaForAllocation());
}
inline std::string* AliasExpr::_internal_mutable_alias() {
  
  return _impl_.alias_.Mutable(GetArenaForAllocation());
}
inline std::string* AliasExpr::release_alias() {
  // @@protoc_insertion_point(field_release:PicachvMessages.AliasExpr.alias)
  return _impl_.alias_.Release();
}
inline void AliasExpr::set_allocated_alias(std::string* alias) {
  if (alias != nullptr) {
    
  } else {
    
  }
  _impl_.alias_.SetAllocated(alias, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.alias_.IsDefault()) {
    _impl_.alias_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PicachvMessages.AliasExpr.alias)
}

// -------------------------------------------------------------------

// WildcardExpr

// -------------------------------------------------------------------

// LiteralExpr

// -------------------------------------------------------------------

// FilterExpr

// bytes input_uuid = 1;
inline void FilterExpr::clear_input_uuid() {
  _impl_.input_uuid_.ClearToEmpty();
}
inline const std::string& FilterExpr::input_uuid() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.FilterExpr.input_uuid)
  return _internal_input_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FilterExpr::set_input_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.input_uuid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PicachvMessages.FilterExpr.input_uuid)
}
inline std::string* FilterExpr::mutable_input_uuid() {
  std::string* _s = _internal_mutable_input_uuid();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.FilterExpr.input_uuid)
  return _s;
}
inline const std::string& FilterExpr::_internal_input_uuid() const {
  return _impl_.input_uuid_.Get();
}
inline void FilterExpr::_internal_set_input_uuid(const std::string& value) {
  
  _impl_.input_uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* FilterExpr::_internal_mutable_input_uuid() {
  
  return _impl_.input_uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* FilterExpr::release_input_uuid() {
  // @@protoc_insertion_point(field_release:PicachvMessages.FilterExpr.input_uuid)
  return _impl_.input_uuid_.Release();
}
inline void FilterExpr::set_allocated_input_uuid(std::string* input_uuid) {
  if (input_uuid != nullptr) {
    
  } else {
    
  }
  _impl_.input_uuid_.SetAllocated(input_uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.input_uuid_.IsDefault()) {
    _impl_.input_uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PicachvMessages.FilterExpr.input_uuid)
}

// bytes filter_uuid = 2;
inline void FilterExpr::clear_filter_uuid() {
  _impl_.filter_uuid_.ClearToEmpty();
}
inline const std::string& FilterExpr::filter_uuid() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.FilterExpr.filter_uuid)
  return _internal_filter_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FilterExpr::set_filter_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.filter_uuid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PicachvMessages.FilterExpr.filter_uuid)
}
inline std::string* FilterExpr::mutable_filter_uuid() {
  std::string* _s = _internal_mutable_filter_uuid();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.FilterExpr.filter_uuid)
  return _s;
}
inline const std::string& FilterExpr::_internal_filter_uuid() const {
  return _impl_.filter_uuid_.Get();
}
inline void FilterExpr::_internal_set_filter_uuid(const std::string& value) {
  
  _impl_.filter_uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* FilterExpr::_internal_mutable_filter_uuid() {
  
  return _impl_.filter_uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* FilterExpr::release_filter_uuid() {
  // @@protoc_insertion_point(field_release:PicachvMessages.FilterExpr.filter_uuid)
  return _impl_.filter_uuid_.Release();
}
inline void FilterExpr::set_allocated_filter_uuid(std::string* filter_uuid) {
  if (filter_uuid != nullptr) {
    
  } else {
    
  }
  _impl_.filter_uuid_.SetAllocated(filter_uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.filter_uuid_.IsDefault()) {
    _impl_.filter_uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PicachvMessages.FilterExpr.filter_uuid)
}

// -------------------------------------------------------------------

// BinaryExpr

// bytes left_uuid = 1;
inline void BinaryExpr::clear_left_uuid() {
  _impl_.left_uuid_.ClearToEmpty();
}
inline const std::string& BinaryExpr::left_uuid() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.BinaryExpr.left_uuid)
  return _internal_left_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BinaryExpr::set_left_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.left_uuid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PicachvMessages.BinaryExpr.left_uuid)
}
inline std::string* BinaryExpr::mutable_left_uuid() {
  std::string* _s = _internal_mutable_left_uuid();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.BinaryExpr.left_uuid)
  return _s;
}
inline const std::string& BinaryExpr::_internal_left_uuid() const {
  return _impl_.left_uuid_.Get();
}
inline void BinaryExpr::_internal_set_left_uuid(const std::string& value) {
  
  _impl_.left_uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* BinaryExpr::_internal_mutable_left_uuid() {
  
  return _impl_.left_uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* BinaryExpr::release_left_uuid() {
  // @@protoc_insertion_point(field_release:PicachvMessages.BinaryExpr.left_uuid)
  return _impl_.left_uuid_.Release();
}
inline void BinaryExpr::set_allocated_left_uuid(std::string* left_uuid) {
  if (left_uuid != nullptr) {
    
  } else {
    
  }
  _impl_.left_uuid_.SetAllocated(left_uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.left_uuid_.IsDefault()) {
    _impl_.left_uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PicachvMessages.BinaryExpr.left_uuid)
}

// bytes right_uuid = 2;
inline void BinaryExpr::clear_right_uuid() {
  _impl_.right_uuid_.ClearToEmpty();
}
inline const std::string& BinaryExpr::right_uuid() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.BinaryExpr.right_uuid)
  return _internal_right_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BinaryExpr::set_right_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.right_uuid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PicachvMessages.BinaryExpr.right_uuid)
}
inline std::string* BinaryExpr::mutable_right_uuid() {
  std::string* _s = _internal_mutable_right_uuid();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.BinaryExpr.right_uuid)
  return _s;
}
inline const std::string& BinaryExpr::_internal_right_uuid() const {
  return _impl_.right_uuid_.Get();
}
inline void BinaryExpr::_internal_set_right_uuid(const std::string& value) {
  
  _impl_.right_uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* BinaryExpr::_internal_mutable_right_uuid() {
  
  return _impl_.right_uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* BinaryExpr::release_right_uuid() {
  // @@protoc_insertion_point(field_release:PicachvMessages.BinaryExpr.right_uuid)
  return _impl_.right_uuid_.Release();
}
inline void BinaryExpr::set_allocated_right_uuid(std::string* right_uuid) {
  if (right_uuid != nullptr) {
    
  } else {
    
  }
  _impl_.right_uuid_.SetAllocated(right_uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.right_uuid_.IsDefault()) {
    _impl_.right_uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PicachvMessages.BinaryExpr.right_uuid)
}

// .PicachvMessages.BinaryOperator op = 3;
inline bool BinaryExpr::_internal_has_op() const {
  return this != internal_default_instance() && _impl_.op_ != nullptr;
}
inline bool BinaryExpr::has_op() const {
  return _internal_has_op();
}
inline const ::PicachvMessages::BinaryOperator& BinaryExpr::_internal_op() const {
  const ::PicachvMessages::BinaryOperator* p = _impl_.op_;
  return p != nullptr ? *p : reinterpret_cast<const ::PicachvMessages::BinaryOperator&>(
      ::PicachvMessages::_BinaryOperator_default_instance_);
}
inline const ::PicachvMessages::BinaryOperator& BinaryExpr::op() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.BinaryExpr.op)
  return _internal_op();
}
inline void BinaryExpr::unsafe_arena_set_allocated_op(
    ::PicachvMessages::BinaryOperator* op) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.op_);
  }
  _impl_.op_ = op;
  if (op) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PicachvMessages.BinaryExpr.op)
}
inline ::PicachvMessages::BinaryOperator* BinaryExpr::release_op() {
  
  ::PicachvMessages::BinaryOperator* temp = _impl_.op_;
  _impl_.op_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PicachvMessages::BinaryOperator* BinaryExpr::unsafe_arena_release_op() {
  // @@protoc_insertion_point(field_release:PicachvMessages.BinaryExpr.op)
  
  ::PicachvMessages::BinaryOperator* temp = _impl_.op_;
  _impl_.op_ = nullptr;
  return temp;
}
inline ::PicachvMessages::BinaryOperator* BinaryExpr::_internal_mutable_op() {
  
  if (_impl_.op_ == nullptr) {
    auto* p = CreateMaybeMessage<::PicachvMessages::BinaryOperator>(GetArenaForAllocation());
    _impl_.op_ = p;
  }
  return _impl_.op_;
}
inline ::PicachvMessages::BinaryOperator* BinaryExpr::mutable_op() {
  ::PicachvMessages::BinaryOperator* _msg = _internal_mutable_op();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.BinaryExpr.op)
  return _msg;
}
inline void BinaryExpr::set_allocated_op(::PicachvMessages::BinaryOperator* op) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.op_);
  }
  if (op) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(op));
    if (message_arena != submessage_arena) {
      op = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.op_ = op;
  // @@protoc_insertion_point(field_set_allocated:PicachvMessages.BinaryExpr.op)
}

// -------------------------------------------------------------------

// UnaryExpr

// bytes input_uuid = 1;
inline void UnaryExpr::clear_input_uuid() {
  _impl_.input_uuid_.ClearToEmpty();
}
inline const std::string& UnaryExpr::input_uuid() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.UnaryExpr.input_uuid)
  return _internal_input_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UnaryExpr::set_input_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.input_uuid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PicachvMessages.UnaryExpr.input_uuid)
}
inline std::string* UnaryExpr::mutable_input_uuid() {
  std::string* _s = _internal_mutable_input_uuid();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.UnaryExpr.input_uuid)
  return _s;
}
inline const std::string& UnaryExpr::_internal_input_uuid() const {
  return _impl_.input_uuid_.Get();
}
inline void UnaryExpr::_internal_set_input_uuid(const std::string& value) {
  
  _impl_.input_uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* UnaryExpr::_internal_mutable_input_uuid() {
  
  return _impl_.input_uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* UnaryExpr::release_input_uuid() {
  // @@protoc_insertion_point(field_release:PicachvMessages.UnaryExpr.input_uuid)
  return _impl_.input_uuid_.Release();
}
inline void UnaryExpr::set_allocated_input_uuid(std::string* input_uuid) {
  if (input_uuid != nullptr) {
    
  } else {
    
  }
  _impl_.input_uuid_.SetAllocated(input_uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.input_uuid_.IsDefault()) {
    _impl_.input_uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PicachvMessages.UnaryExpr.input_uuid)
}

// .PicachvMessages.UnaryOperator op = 2;
inline void UnaryExpr::clear_op() {
  _impl_.op_ = 0;
}
inline ::PicachvMessages::UnaryOperator UnaryExpr::_internal_op() const {
  return static_cast< ::PicachvMessages::UnaryOperator >(_impl_.op_);
}
inline ::PicachvMessages::UnaryOperator UnaryExpr::op() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.UnaryExpr.op)
  return _internal_op();
}
inline void UnaryExpr::_internal_set_op(::PicachvMessages::UnaryOperator value) {
  
  _impl_.op_ = value;
}
inline void UnaryExpr::set_op(::PicachvMessages::UnaryOperator value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.UnaryExpr.op)
}

// -------------------------------------------------------------------

// ApplyExpr

// repeated bytes input_uuids = 1;
inline int ApplyExpr::_internal_input_uuids_size() const {
  return _impl_.input_uuids_.size();
}
inline int ApplyExpr::input_uuids_size() const {
  return _internal_input_uuids_size();
}
inline void ApplyExpr::clear_input_uuids() {
  _impl_.input_uuids_.Clear();
}
inline std::string* ApplyExpr::add_input_uuids() {
  std::string* _s = _internal_add_input_uuids();
  // @@protoc_insertion_point(field_add_mutable:PicachvMessages.ApplyExpr.input_uuids)
  return _s;
}
inline const std::string& ApplyExpr::_internal_input_uuids(int index) const {
  return _impl_.input_uuids_.Get(index);
}
inline const std::string& ApplyExpr::input_uuids(int index) const {
  // @@protoc_insertion_point(field_get:PicachvMessages.ApplyExpr.input_uuids)
  return _internal_input_uuids(index);
}
inline std::string* ApplyExpr::mutable_input_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:PicachvMessages.ApplyExpr.input_uuids)
  return _impl_.input_uuids_.Mutable(index);
}
inline void ApplyExpr::set_input_uuids(int index, const std::string& value) {
  _impl_.input_uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.ApplyExpr.input_uuids)
}
inline void ApplyExpr::set_input_uuids(int index, std::string&& value) {
  _impl_.input_uuids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:PicachvMessages.ApplyExpr.input_uuids)
}
inline void ApplyExpr::set_input_uuids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.input_uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PicachvMessages.ApplyExpr.input_uuids)
}
inline void ApplyExpr::set_input_uuids(int index, const void* value, size_t size) {
  _impl_.input_uuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PicachvMessages.ApplyExpr.input_uuids)
}
inline std::string* ApplyExpr::_internal_add_input_uuids() {
  return _impl_.input_uuids_.Add();
}
inline void ApplyExpr::add_input_uuids(const std::string& value) {
  _impl_.input_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PicachvMessages.ApplyExpr.input_uuids)
}
inline void ApplyExpr::add_input_uuids(std::string&& value) {
  _impl_.input_uuids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PicachvMessages.ApplyExpr.input_uuids)
}
inline void ApplyExpr::add_input_uuids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.input_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PicachvMessages.ApplyExpr.input_uuids)
}
inline void ApplyExpr::add_input_uuids(const void* value, size_t size) {
  _impl_.input_uuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PicachvMessages.ApplyExpr.input_uuids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ApplyExpr::input_uuids() const {
  // @@protoc_insertion_point(field_list:PicachvMessages.ApplyExpr.input_uuids)
  return _impl_.input_uuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ApplyExpr::mutable_input_uuids() {
  // @@protoc_insertion_point(field_mutable_list:PicachvMessages.ApplyExpr.input_uuids)
  return &_impl_.input_uuids_;
}

// string name = 2;
inline void ApplyExpr::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ApplyExpr::name() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.ApplyExpr.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ApplyExpr::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PicachvMessages.ApplyExpr.name)
}
inline std::string* ApplyExpr::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.ApplyExpr.name)
  return _s;
}
inline const std::string& ApplyExpr::_internal_name() const {
  return _impl_.name_.Get();
}
inline void ApplyExpr::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* ApplyExpr::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* ApplyExpr::release_name() {
  // @@protoc_insertion_point(field_release:PicachvMessages.ApplyExpr.name)
  return _impl_.name_.Release();
}
inline void ApplyExpr::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PicachvMessages.ApplyExpr.name)
}

// -------------------------------------------------------------------

// ExprArgument

// .PicachvMessages.AggExpr agg = 1;
inline bool ExprArgument::_internal_has_agg() const {
  return argument_case() == kAgg;
}
inline bool ExprArgument::has_agg() const {
  return _internal_has_agg();
}
inline void ExprArgument::set_has_agg() {
  _impl_._oneof_case_[0] = kAgg;
}
inline void ExprArgument::clear_agg() {
  if (_internal_has_agg()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.argument_.agg_;
    }
    clear_has_argument();
  }
}
inline ::PicachvMessages::AggExpr* ExprArgument::release_agg() {
  // @@protoc_insertion_point(field_release:PicachvMessages.ExprArgument.agg)
  if (_internal_has_agg()) {
    clear_has_argument();
    ::PicachvMessages::AggExpr* temp = _impl_.argument_.agg_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.argument_.agg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PicachvMessages::AggExpr& ExprArgument::_internal_agg() const {
  return _internal_has_agg()
      ? *_impl_.argument_.agg_
      : reinterpret_cast< ::PicachvMessages::AggExpr&>(::PicachvMessages::_AggExpr_default_instance_);
}
inline const ::PicachvMessages::AggExpr& ExprArgument::agg() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.ExprArgument.agg)
  return _internal_agg();
}
inline ::PicachvMessages::AggExpr* ExprArgument::unsafe_arena_release_agg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PicachvMessages.ExprArgument.agg)
  if (_internal_has_agg()) {
    clear_has_argument();
    ::PicachvMessages::AggExpr* temp = _impl_.argument_.agg_;
    _impl_.argument_.agg_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExprArgument::unsafe_arena_set_allocated_agg(::PicachvMessages::AggExpr* agg) {
  clear_argument();
  if (agg) {
    set_has_agg();
    _impl_.argument_.agg_ = agg;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PicachvMessages.ExprArgument.agg)
}
inline ::PicachvMessages::AggExpr* ExprArgument::_internal_mutable_agg() {
  if (!_internal_has_agg()) {
    clear_argument();
    set_has_agg();
    _impl_.argument_.agg_ = CreateMaybeMessage< ::PicachvMessages::AggExpr >(GetArenaForAllocation());
  }
  return _impl_.argument_.agg_;
}
inline ::PicachvMessages::AggExpr* ExprArgument::mutable_agg() {
  ::PicachvMessages::AggExpr* _msg = _internal_mutable_agg();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.ExprArgument.agg)
  return _msg;
}

// .PicachvMessages.ColumnExpr column = 2;
inline bool ExprArgument::_internal_has_column() const {
  return argument_case() == kColumn;
}
inline bool ExprArgument::has_column() const {
  return _internal_has_column();
}
inline void ExprArgument::set_has_column() {
  _impl_._oneof_case_[0] = kColumn;
}
inline void ExprArgument::clear_column() {
  if (_internal_has_column()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.argument_.column_;
    }
    clear_has_argument();
  }
}
inline ::PicachvMessages::ColumnExpr* ExprArgument::release_column() {
  // @@protoc_insertion_point(field_release:PicachvMessages.ExprArgument.column)
  if (_internal_has_column()) {
    clear_has_argument();
    ::PicachvMessages::ColumnExpr* temp = _impl_.argument_.column_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.argument_.column_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PicachvMessages::ColumnExpr& ExprArgument::_internal_column() const {
  return _internal_has_column()
      ? *_impl_.argument_.column_
      : reinterpret_cast< ::PicachvMessages::ColumnExpr&>(::PicachvMessages::_ColumnExpr_default_instance_);
}
inline const ::PicachvMessages::ColumnExpr& ExprArgument::column() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.ExprArgument.column)
  return _internal_column();
}
inline ::PicachvMessages::ColumnExpr* ExprArgument::unsafe_arena_release_column() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PicachvMessages.ExprArgument.column)
  if (_internal_has_column()) {
    clear_has_argument();
    ::PicachvMessages::ColumnExpr* temp = _impl_.argument_.column_;
    _impl_.argument_.column_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExprArgument::unsafe_arena_set_allocated_column(::PicachvMessages::ColumnExpr* column) {
  clear_argument();
  if (column) {
    set_has_column();
    _impl_.argument_.column_ = column;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PicachvMessages.ExprArgument.column)
}
inline ::PicachvMessages::ColumnExpr* ExprArgument::_internal_mutable_column() {
  if (!_internal_has_column()) {
    clear_argument();
    set_has_column();
    _impl_.argument_.column_ = CreateMaybeMessage< ::PicachvMessages::ColumnExpr >(GetArenaForAllocation());
  }
  return _impl_.argument_.column_;
}
inline ::PicachvMessages::ColumnExpr* ExprArgument::mutable_column() {
  ::PicachvMessages::ColumnExpr* _msg = _internal_mutable_column();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.ExprArgument.column)
  return _msg;
}

// .PicachvMessages.AliasExpr alias = 3;
inline bool ExprArgument::_internal_has_alias() const {
  return argument_case() == kAlias;
}
inline bool ExprArgument::has_alias() const {
  return _internal_has_alias();
}
inline void ExprArgument::set_has_alias() {
  _impl_._oneof_case_[0] = kAlias;
}
inline void ExprArgument::clear_alias() {
  if (_internal_has_alias()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.argument_.alias_;
    }
    clear_has_argument();
  }
}
inline ::PicachvMessages::AliasExpr* ExprArgument::release_alias() {
  // @@protoc_insertion_point(field_release:PicachvMessages.ExprArgument.alias)
  if (_internal_has_alias()) {
    clear_has_argument();
    ::PicachvMessages::AliasExpr* temp = _impl_.argument_.alias_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.argument_.alias_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PicachvMessages::AliasExpr& ExprArgument::_internal_alias() const {
  return _internal_has_alias()
      ? *_impl_.argument_.alias_
      : reinterpret_cast< ::PicachvMessages::AliasExpr&>(::PicachvMessages::_AliasExpr_default_instance_);
}
inline const ::PicachvMessages::AliasExpr& ExprArgument::alias() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.ExprArgument.alias)
  return _internal_alias();
}
inline ::PicachvMessages::AliasExpr* ExprArgument::unsafe_arena_release_alias() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PicachvMessages.ExprArgument.alias)
  if (_internal_has_alias()) {
    clear_has_argument();
    ::PicachvMessages::AliasExpr* temp = _impl_.argument_.alias_;
    _impl_.argument_.alias_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExprArgument::unsafe_arena_set_allocated_alias(::PicachvMessages::AliasExpr* alias) {
  clear_argument();
  if (alias) {
    set_has_alias();
    _impl_.argument_.alias_ = alias;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PicachvMessages.ExprArgument.alias)
}
inline ::PicachvMessages::AliasExpr* ExprArgument::_internal_mutable_alias() {
  if (!_internal_has_alias()) {
    clear_argument();
    set_has_alias();
    _impl_.argument_.alias_ = CreateMaybeMessage< ::PicachvMessages::AliasExpr >(GetArenaForAllocation());
  }
  return _impl_.argument_.alias_;
}
inline ::PicachvMessages::AliasExpr* ExprArgument::mutable_alias() {
  ::PicachvMessages::AliasExpr* _msg = _internal_mutable_alias();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.ExprArgument.alias)
  return _msg;
}

// .PicachvMessages.WildcardExpr wildcard = 4;
inline bool ExprArgument::_internal_has_wildcard() const {
  return argument_case() == kWildcard;
}
inline bool ExprArgument::has_wildcard() const {
  return _internal_has_wildcard();
}
inline void ExprArgument::set_has_wildcard() {
  _impl_._oneof_case_[0] = kWildcard;
}
inline void ExprArgument::clear_wildcard() {
  if (_internal_has_wildcard()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.argument_.wildcard_;
    }
    clear_has_argument();
  }
}
inline ::PicachvMessages::WildcardExpr* ExprArgument::release_wildcard() {
  // @@protoc_insertion_point(field_release:PicachvMessages.ExprArgument.wildcard)
  if (_internal_has_wildcard()) {
    clear_has_argument();
    ::PicachvMessages::WildcardExpr* temp = _impl_.argument_.wildcard_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.argument_.wildcard_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PicachvMessages::WildcardExpr& ExprArgument::_internal_wildcard() const {
  return _internal_has_wildcard()
      ? *_impl_.argument_.wildcard_
      : reinterpret_cast< ::PicachvMessages::WildcardExpr&>(::PicachvMessages::_WildcardExpr_default_instance_);
}
inline const ::PicachvMessages::WildcardExpr& ExprArgument::wildcard() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.ExprArgument.wildcard)
  return _internal_wildcard();
}
inline ::PicachvMessages::WildcardExpr* ExprArgument::unsafe_arena_release_wildcard() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PicachvMessages.ExprArgument.wildcard)
  if (_internal_has_wildcard()) {
    clear_has_argument();
    ::PicachvMessages::WildcardExpr* temp = _impl_.argument_.wildcard_;
    _impl_.argument_.wildcard_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExprArgument::unsafe_arena_set_allocated_wildcard(::PicachvMessages::WildcardExpr* wildcard) {
  clear_argument();
  if (wildcard) {
    set_has_wildcard();
    _impl_.argument_.wildcard_ = wildcard;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PicachvMessages.ExprArgument.wildcard)
}
inline ::PicachvMessages::WildcardExpr* ExprArgument::_internal_mutable_wildcard() {
  if (!_internal_has_wildcard()) {
    clear_argument();
    set_has_wildcard();
    _impl_.argument_.wildcard_ = CreateMaybeMessage< ::PicachvMessages::WildcardExpr >(GetArenaForAllocation());
  }
  return _impl_.argument_.wildcard_;
}
inline ::PicachvMessages::WildcardExpr* ExprArgument::mutable_wildcard() {
  ::PicachvMessages::WildcardExpr* _msg = _internal_mutable_wildcard();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.ExprArgument.wildcard)
  return _msg;
}

// .PicachvMessages.FilterExpr filter = 5;
inline bool ExprArgument::_internal_has_filter() const {
  return argument_case() == kFilter;
}
inline bool ExprArgument::has_filter() const {
  return _internal_has_filter();
}
inline void ExprArgument::set_has_filter() {
  _impl_._oneof_case_[0] = kFilter;
}
inline void ExprArgument::clear_filter() {
  if (_internal_has_filter()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.argument_.filter_;
    }
    clear_has_argument();
  }
}
inline ::PicachvMessages::FilterExpr* ExprArgument::release_filter() {
  // @@protoc_insertion_point(field_release:PicachvMessages.ExprArgument.filter)
  if (_internal_has_filter()) {
    clear_has_argument();
    ::PicachvMessages::FilterExpr* temp = _impl_.argument_.filter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.argument_.filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PicachvMessages::FilterExpr& ExprArgument::_internal_filter() const {
  return _internal_has_filter()
      ? *_impl_.argument_.filter_
      : reinterpret_cast< ::PicachvMessages::FilterExpr&>(::PicachvMessages::_FilterExpr_default_instance_);
}
inline const ::PicachvMessages::FilterExpr& ExprArgument::filter() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.ExprArgument.filter)
  return _internal_filter();
}
inline ::PicachvMessages::FilterExpr* ExprArgument::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PicachvMessages.ExprArgument.filter)
  if (_internal_has_filter()) {
    clear_has_argument();
    ::PicachvMessages::FilterExpr* temp = _impl_.argument_.filter_;
    _impl_.argument_.filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExprArgument::unsafe_arena_set_allocated_filter(::PicachvMessages::FilterExpr* filter) {
  clear_argument();
  if (filter) {
    set_has_filter();
    _impl_.argument_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PicachvMessages.ExprArgument.filter)
}
inline ::PicachvMessages::FilterExpr* ExprArgument::_internal_mutable_filter() {
  if (!_internal_has_filter()) {
    clear_argument();
    set_has_filter();
    _impl_.argument_.filter_ = CreateMaybeMessage< ::PicachvMessages::FilterExpr >(GetArenaForAllocation());
  }
  return _impl_.argument_.filter_;
}
inline ::PicachvMessages::FilterExpr* ExprArgument::mutable_filter() {
  ::PicachvMessages::FilterExpr* _msg = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.ExprArgument.filter)
  return _msg;
}

// .PicachvMessages.BinaryExpr binary = 6;
inline bool ExprArgument::_internal_has_binary() const {
  return argument_case() == kBinary;
}
inline bool ExprArgument::has_binary() const {
  return _internal_has_binary();
}
inline void ExprArgument::set_has_binary() {
  _impl_._oneof_case_[0] = kBinary;
}
inline void ExprArgument::clear_binary() {
  if (_internal_has_binary()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.argument_.binary_;
    }
    clear_has_argument();
  }
}
inline ::PicachvMessages::BinaryExpr* ExprArgument::release_binary() {
  // @@protoc_insertion_point(field_release:PicachvMessages.ExprArgument.binary)
  if (_internal_has_binary()) {
    clear_has_argument();
    ::PicachvMessages::BinaryExpr* temp = _impl_.argument_.binary_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.argument_.binary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PicachvMessages::BinaryExpr& ExprArgument::_internal_binary() const {
  return _internal_has_binary()
      ? *_impl_.argument_.binary_
      : reinterpret_cast< ::PicachvMessages::BinaryExpr&>(::PicachvMessages::_BinaryExpr_default_instance_);
}
inline const ::PicachvMessages::BinaryExpr& ExprArgument::binary() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.ExprArgument.binary)
  return _internal_binary();
}
inline ::PicachvMessages::BinaryExpr* ExprArgument::unsafe_arena_release_binary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PicachvMessages.ExprArgument.binary)
  if (_internal_has_binary()) {
    clear_has_argument();
    ::PicachvMessages::BinaryExpr* temp = _impl_.argument_.binary_;
    _impl_.argument_.binary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExprArgument::unsafe_arena_set_allocated_binary(::PicachvMessages::BinaryExpr* binary) {
  clear_argument();
  if (binary) {
    set_has_binary();
    _impl_.argument_.binary_ = binary;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PicachvMessages.ExprArgument.binary)
}
inline ::PicachvMessages::BinaryExpr* ExprArgument::_internal_mutable_binary() {
  if (!_internal_has_binary()) {
    clear_argument();
    set_has_binary();
    _impl_.argument_.binary_ = CreateMaybeMessage< ::PicachvMessages::BinaryExpr >(GetArenaForAllocation());
  }
  return _impl_.argument_.binary_;
}
inline ::PicachvMessages::BinaryExpr* ExprArgument::mutable_binary() {
  ::PicachvMessages::BinaryExpr* _msg = _internal_mutable_binary();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.ExprArgument.binary)
  return _msg;
}

// .PicachvMessages.UnaryExpr unary = 7;
inline bool ExprArgument::_internal_has_unary() const {
  return argument_case() == kUnary;
}
inline bool ExprArgument::has_unary() const {
  return _internal_has_unary();
}
inline void ExprArgument::set_has_unary() {
  _impl_._oneof_case_[0] = kUnary;
}
inline void ExprArgument::clear_unary() {
  if (_internal_has_unary()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.argument_.unary_;
    }
    clear_has_argument();
  }
}
inline ::PicachvMessages::UnaryExpr* ExprArgument::release_unary() {
  // @@protoc_insertion_point(field_release:PicachvMessages.ExprArgument.unary)
  if (_internal_has_unary()) {
    clear_has_argument();
    ::PicachvMessages::UnaryExpr* temp = _impl_.argument_.unary_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.argument_.unary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PicachvMessages::UnaryExpr& ExprArgument::_internal_unary() const {
  return _internal_has_unary()
      ? *_impl_.argument_.unary_
      : reinterpret_cast< ::PicachvMessages::UnaryExpr&>(::PicachvMessages::_UnaryExpr_default_instance_);
}
inline const ::PicachvMessages::UnaryExpr& ExprArgument::unary() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.ExprArgument.unary)
  return _internal_unary();
}
inline ::PicachvMessages::UnaryExpr* ExprArgument::unsafe_arena_release_unary() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PicachvMessages.ExprArgument.unary)
  if (_internal_has_unary()) {
    clear_has_argument();
    ::PicachvMessages::UnaryExpr* temp = _impl_.argument_.unary_;
    _impl_.argument_.unary_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExprArgument::unsafe_arena_set_allocated_unary(::PicachvMessages::UnaryExpr* unary) {
  clear_argument();
  if (unary) {
    set_has_unary();
    _impl_.argument_.unary_ = unary;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PicachvMessages.ExprArgument.unary)
}
inline ::PicachvMessages::UnaryExpr* ExprArgument::_internal_mutable_unary() {
  if (!_internal_has_unary()) {
    clear_argument();
    set_has_unary();
    _impl_.argument_.unary_ = CreateMaybeMessage< ::PicachvMessages::UnaryExpr >(GetArenaForAllocation());
  }
  return _impl_.argument_.unary_;
}
inline ::PicachvMessages::UnaryExpr* ExprArgument::mutable_unary() {
  ::PicachvMessages::UnaryExpr* _msg = _internal_mutable_unary();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.ExprArgument.unary)
  return _msg;
}

// .PicachvMessages.LiteralExpr literal = 8;
inline bool ExprArgument::_internal_has_literal() const {
  return argument_case() == kLiteral;
}
inline bool ExprArgument::has_literal() const {
  return _internal_has_literal();
}
inline void ExprArgument::set_has_literal() {
  _impl_._oneof_case_[0] = kLiteral;
}
inline void ExprArgument::clear_literal() {
  if (_internal_has_literal()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.argument_.literal_;
    }
    clear_has_argument();
  }
}
inline ::PicachvMessages::LiteralExpr* ExprArgument::release_literal() {
  // @@protoc_insertion_point(field_release:PicachvMessages.ExprArgument.literal)
  if (_internal_has_literal()) {
    clear_has_argument();
    ::PicachvMessages::LiteralExpr* temp = _impl_.argument_.literal_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.argument_.literal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PicachvMessages::LiteralExpr& ExprArgument::_internal_literal() const {
  return _internal_has_literal()
      ? *_impl_.argument_.literal_
      : reinterpret_cast< ::PicachvMessages::LiteralExpr&>(::PicachvMessages::_LiteralExpr_default_instance_);
}
inline const ::PicachvMessages::LiteralExpr& ExprArgument::literal() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.ExprArgument.literal)
  return _internal_literal();
}
inline ::PicachvMessages::LiteralExpr* ExprArgument::unsafe_arena_release_literal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PicachvMessages.ExprArgument.literal)
  if (_internal_has_literal()) {
    clear_has_argument();
    ::PicachvMessages::LiteralExpr* temp = _impl_.argument_.literal_;
    _impl_.argument_.literal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExprArgument::unsafe_arena_set_allocated_literal(::PicachvMessages::LiteralExpr* literal) {
  clear_argument();
  if (literal) {
    set_has_literal();
    _impl_.argument_.literal_ = literal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PicachvMessages.ExprArgument.literal)
}
inline ::PicachvMessages::LiteralExpr* ExprArgument::_internal_mutable_literal() {
  if (!_internal_has_literal()) {
    clear_argument();
    set_has_literal();
    _impl_.argument_.literal_ = CreateMaybeMessage< ::PicachvMessages::LiteralExpr >(GetArenaForAllocation());
  }
  return _impl_.argument_.literal_;
}
inline ::PicachvMessages::LiteralExpr* ExprArgument::mutable_literal() {
  ::PicachvMessages::LiteralExpr* _msg = _internal_mutable_literal();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.ExprArgument.literal)
  return _msg;
}

// .PicachvMessages.ApplyExpr apply = 9;
inline bool ExprArgument::_internal_has_apply() const {
  return argument_case() == kApply;
}
inline bool ExprArgument::has_apply() const {
  return _internal_has_apply();
}
inline void ExprArgument::set_has_apply() {
  _impl_._oneof_case_[0] = kApply;
}
inline void ExprArgument::clear_apply() {
  if (_internal_has_apply()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.argument_.apply_;
    }
    clear_has_argument();
  }
}
inline ::PicachvMessages::ApplyExpr* ExprArgument::release_apply() {
  // @@protoc_insertion_point(field_release:PicachvMessages.ExprArgument.apply)
  if (_internal_has_apply()) {
    clear_has_argument();
    ::PicachvMessages::ApplyExpr* temp = _impl_.argument_.apply_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.argument_.apply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PicachvMessages::ApplyExpr& ExprArgument::_internal_apply() const {
  return _internal_has_apply()
      ? *_impl_.argument_.apply_
      : reinterpret_cast< ::PicachvMessages::ApplyExpr&>(::PicachvMessages::_ApplyExpr_default_instance_);
}
inline const ::PicachvMessages::ApplyExpr& ExprArgument::apply() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.ExprArgument.apply)
  return _internal_apply();
}
inline ::PicachvMessages::ApplyExpr* ExprArgument::unsafe_arena_release_apply() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PicachvMessages.ExprArgument.apply)
  if (_internal_has_apply()) {
    clear_has_argument();
    ::PicachvMessages::ApplyExpr* temp = _impl_.argument_.apply_;
    _impl_.argument_.apply_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ExprArgument::unsafe_arena_set_allocated_apply(::PicachvMessages::ApplyExpr* apply) {
  clear_argument();
  if (apply) {
    set_has_apply();
    _impl_.argument_.apply_ = apply;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PicachvMessages.ExprArgument.apply)
}
inline ::PicachvMessages::ApplyExpr* ExprArgument::_internal_mutable_apply() {
  if (!_internal_has_apply()) {
    clear_argument();
    set_has_apply();
    _impl_.argument_.apply_ = CreateMaybeMessage< ::PicachvMessages::ApplyExpr >(GetArenaForAllocation());
  }
  return _impl_.argument_.apply_;
}
inline ::PicachvMessages::ApplyExpr* ExprArgument::mutable_apply() {
  ::PicachvMessages::ApplyExpr* _msg = _internal_mutable_apply();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.ExprArgument.apply)
  return _msg;
}

inline bool ExprArgument::has_argument() const {
  return argument_case() != ARGUMENT_NOT_SET;
}
inline void ExprArgument::clear_has_argument() {
  _impl_._oneof_case_[0] = ARGUMENT_NOT_SET;
}
inline ExprArgument::ArgumentCase ExprArgument::argument_case() const {
  return ExprArgument::ArgumentCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PicachvMessages

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_expr_5fargs_2eproto
