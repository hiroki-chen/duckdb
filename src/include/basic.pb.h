// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: basic.proto
// Protobuf C++ Version: 5.28.0-dev

#ifndef GOOGLE_PROTOBUF_INCLUDED_basic_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_basic_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5028000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_basic_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_basic_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_basic_2eproto;
namespace PicachvMessages {
class BinaryOperator;
struct BinaryOperatorDefaultTypeInternal;
extern BinaryOperatorDefaultTypeInternal _BinaryOperator_default_instance_;
class GroupByProxy;
struct GroupByProxyDefaultTypeInternal;
extern GroupByProxyDefaultTypeInternal _GroupByProxy_default_instance_;
class GroupByProxy_Groups;
struct GroupByProxy_GroupsDefaultTypeInternal;
extern GroupByProxy_GroupsDefaultTypeInternal _GroupByProxy_Groups_default_instance_;
class PrimitiveValue;
struct PrimitiveValueDefaultTypeInternal;
extern PrimitiveValueDefaultTypeInternal _PrimitiveValue_default_instance_;
class PrimitiveValue_Duration;
struct PrimitiveValue_DurationDefaultTypeInternal;
extern PrimitiveValue_DurationDefaultTypeInternal _PrimitiveValue_Duration_default_instance_;
}  // namespace PicachvMessages
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace PicachvMessages {
enum FileType : int {
  Csv = 0,
  Parquet = 1,
  Json = 2,
  Avro = 3,
  FileType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  FileType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool FileType_IsValid(int value);
extern const uint32_t FileType_internal_data_[];
constexpr FileType FileType_MIN = static_cast<FileType>(0);
constexpr FileType FileType_MAX = static_cast<FileType>(3);
constexpr int FileType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
FileType_descriptor();
template <typename T>
const std::string& FileType_Name(T value) {
  static_assert(std::is_same<T, FileType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to FileType_Name().");
  return FileType_Name(static_cast<FileType>(value));
}
template <>
inline const std::string& FileType_Name(FileType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<FileType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool FileType_Parse(absl::string_view name, FileType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileType>(
      FileType_descriptor(), name, value);
}
enum JoinType : int {
  Inner = 0,
  Left = 1,
  Cross = 2,
  Outer = 3,
  JoinType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  JoinType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool JoinType_IsValid(int value);
extern const uint32_t JoinType_internal_data_[];
constexpr JoinType JoinType_MIN = static_cast<JoinType>(0);
constexpr JoinType JoinType_MAX = static_cast<JoinType>(3);
constexpr int JoinType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
JoinType_descriptor();
template <typename T>
const std::string& JoinType_Name(T value) {
  static_assert(std::is_same<T, JoinType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to JoinType_Name().");
  return JoinType_Name(static_cast<JoinType>(value));
}
template <>
inline const std::string& JoinType_Name(JoinType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<JoinType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool JoinType_Parse(absl::string_view name, JoinType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<JoinType>(
      JoinType_descriptor(), name, value);
}
enum LogicalPlanType : int {
  Select = 0,
  Distinct = 1,
  Projection = 2,
  Aggregation = 3,
  Join = 4,
  Scan = 5,
  Union = 6,
  Other = 7,
  LogicalPlanType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LogicalPlanType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LogicalPlanType_IsValid(int value);
extern const uint32_t LogicalPlanType_internal_data_[];
constexpr LogicalPlanType LogicalPlanType_MIN = static_cast<LogicalPlanType>(0);
constexpr LogicalPlanType LogicalPlanType_MAX = static_cast<LogicalPlanType>(7);
constexpr int LogicalPlanType_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
LogicalPlanType_descriptor();
template <typename T>
const std::string& LogicalPlanType_Name(T value) {
  static_assert(std::is_same<T, LogicalPlanType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LogicalPlanType_Name().");
  return LogicalPlanType_Name(static_cast<LogicalPlanType>(value));
}
template <>
inline const std::string& LogicalPlanType_Name(LogicalPlanType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LogicalPlanType_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool LogicalPlanType_Parse(absl::string_view name, LogicalPlanType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogicalPlanType>(
      LogicalPlanType_descriptor(), name, value);
}
enum LogicalBinaryOperator : int {
  And = 0,
  Or = 1,
  LogicalBinaryOperator_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LogicalBinaryOperator_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LogicalBinaryOperator_IsValid(int value);
extern const uint32_t LogicalBinaryOperator_internal_data_[];
constexpr LogicalBinaryOperator LogicalBinaryOperator_MIN = static_cast<LogicalBinaryOperator>(0);
constexpr LogicalBinaryOperator LogicalBinaryOperator_MAX = static_cast<LogicalBinaryOperator>(1);
constexpr int LogicalBinaryOperator_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor*
LogicalBinaryOperator_descriptor();
template <typename T>
const std::string& LogicalBinaryOperator_Name(T value) {
  static_assert(std::is_same<T, LogicalBinaryOperator>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LogicalBinaryOperator_Name().");
  return LogicalBinaryOperator_Name(static_cast<LogicalBinaryOperator>(value));
}
template <>
inline const std::string& LogicalBinaryOperator_Name(LogicalBinaryOperator value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LogicalBinaryOperator_descriptor,
                                                 0, 1>(
      static_cast<int>(value));
}
inline bool LogicalBinaryOperator_Parse(absl::string_view name, LogicalBinaryOperator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogicalBinaryOperator>(
      LogicalBinaryOperator_descriptor(), name, value);
}
enum ComparisonBinaryOperator : int {
  Eq = 0,
  Ne = 1,
  Gt = 2,
  Lt = 3,
  Le = 4,
  Ge = 5,
  ComparisonBinaryOperator_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ComparisonBinaryOperator_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ComparisonBinaryOperator_IsValid(int value);
extern const uint32_t ComparisonBinaryOperator_internal_data_[];
constexpr ComparisonBinaryOperator ComparisonBinaryOperator_MIN = static_cast<ComparisonBinaryOperator>(0);
constexpr ComparisonBinaryOperator ComparisonBinaryOperator_MAX = static_cast<ComparisonBinaryOperator>(5);
constexpr int ComparisonBinaryOperator_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
ComparisonBinaryOperator_descriptor();
template <typename T>
const std::string& ComparisonBinaryOperator_Name(T value) {
  static_assert(std::is_same<T, ComparisonBinaryOperator>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ComparisonBinaryOperator_Name().");
  return ComparisonBinaryOperator_Name(static_cast<ComparisonBinaryOperator>(value));
}
template <>
inline const std::string& ComparisonBinaryOperator_Name(ComparisonBinaryOperator value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ComparisonBinaryOperator_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool ComparisonBinaryOperator_Parse(absl::string_view name, ComparisonBinaryOperator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ComparisonBinaryOperator>(
      ComparisonBinaryOperator_descriptor(), name, value);
}
enum ArithmeticBinaryOperator : int {
  Add = 0,
  Sub = 1,
  Mul = 2,
  Div = 3,
  Mod = 4,
  Pow = 5,
  ShiftBy = 6,
  ArithmeticBinaryOperator_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ArithmeticBinaryOperator_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ArithmeticBinaryOperator_IsValid(int value);
extern const uint32_t ArithmeticBinaryOperator_internal_data_[];
constexpr ArithmeticBinaryOperator ArithmeticBinaryOperator_MIN = static_cast<ArithmeticBinaryOperator>(0);
constexpr ArithmeticBinaryOperator ArithmeticBinaryOperator_MAX = static_cast<ArithmeticBinaryOperator>(6);
constexpr int ArithmeticBinaryOperator_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
ArithmeticBinaryOperator_descriptor();
template <typename T>
const std::string& ArithmeticBinaryOperator_Name(T value) {
  static_assert(std::is_same<T, ArithmeticBinaryOperator>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ArithmeticBinaryOperator_Name().");
  return ArithmeticBinaryOperator_Name(static_cast<ArithmeticBinaryOperator>(value));
}
template <>
inline const std::string& ArithmeticBinaryOperator_Name(ArithmeticBinaryOperator value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ArithmeticBinaryOperator_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool ArithmeticBinaryOperator_Parse(absl::string_view name, ArithmeticBinaryOperator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ArithmeticBinaryOperator>(
      ArithmeticBinaryOperator_descriptor(), name, value);
}
enum UnaryOperator : int {
  Identity = 0,
  Redact = 1,
  Substitute = 2,
  Not = 3,
  UnaryOperator_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  UnaryOperator_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool UnaryOperator_IsValid(int value);
extern const uint32_t UnaryOperator_internal_data_[];
constexpr UnaryOperator UnaryOperator_MIN = static_cast<UnaryOperator>(0);
constexpr UnaryOperator UnaryOperator_MAX = static_cast<UnaryOperator>(3);
constexpr int UnaryOperator_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
UnaryOperator_descriptor();
template <typename T>
const std::string& UnaryOperator_Name(T value) {
  static_assert(std::is_same<T, UnaryOperator>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to UnaryOperator_Name().");
  return UnaryOperator_Name(static_cast<UnaryOperator>(value));
}
template <>
inline const std::string& UnaryOperator_Name(UnaryOperator value) {
  return ::google::protobuf::internal::NameOfDenseEnum<UnaryOperator_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool UnaryOperator_Parse(absl::string_view name, UnaryOperator* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UnaryOperator>(
      UnaryOperator_descriptor(), name, value);
}
enum GroupByMethod : int {
  Min = 0,
  NanMin = 1,
  Max = 2,
  NanMax = 3,
  Median = 4,
  Mean = 5,
  First = 6,
  Last = 7,
  Sum = 8,
  GroupByMethod_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GroupByMethod_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GroupByMethod_IsValid(int value);
extern const uint32_t GroupByMethod_internal_data_[];
constexpr GroupByMethod GroupByMethod_MIN = static_cast<GroupByMethod>(0);
constexpr GroupByMethod GroupByMethod_MAX = static_cast<GroupByMethod>(8);
constexpr int GroupByMethod_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
GroupByMethod_descriptor();
template <typename T>
const std::string& GroupByMethod_Name(T value) {
  static_assert(std::is_same<T, GroupByMethod>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to GroupByMethod_Name().");
  return GroupByMethod_Name(static_cast<GroupByMethod>(value));
}
template <>
inline const std::string& GroupByMethod_Name(GroupByMethod value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GroupByMethod_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool GroupByMethod_Parse(absl::string_view name, GroupByMethod* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GroupByMethod>(
      GroupByMethod_descriptor(), name, value);
}
enum ExprType : int {
  Agg = 0,
  Column = 1,
  Count = 2,
  Alias = 3,
  Wildcard = 4,
  Filter = 5,
  Binary = 6,
  Unary = 7,
  ExprType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ExprType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool ExprType_IsValid(int value);
extern const uint32_t ExprType_internal_data_[];
constexpr ExprType ExprType_MIN = static_cast<ExprType>(0);
constexpr ExprType ExprType_MAX = static_cast<ExprType>(7);
constexpr int ExprType_ARRAYSIZE = 7 + 1;
const ::google::protobuf::EnumDescriptor*
ExprType_descriptor();
template <typename T>
const std::string& ExprType_Name(T value) {
  static_assert(std::is_same<T, ExprType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ExprType_Name().");
  return ExprType_Name(static_cast<ExprType>(value));
}
template <>
inline const std::string& ExprType_Name(ExprType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ExprType_descriptor,
                                                 0, 7>(
      static_cast<int>(value));
}
inline bool ExprType_Parse(absl::string_view name, ExprType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExprType>(
      ExprType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class PrimitiveValue_Duration final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PicachvMessages.PrimitiveValue.Duration) */ {
 public:
  inline PrimitiveValue_Duration() : PrimitiveValue_Duration(nullptr) {}
  ~PrimitiveValue_Duration() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PrimitiveValue_Duration(
      ::google::protobuf::internal::ConstantInitialized);

  inline PrimitiveValue_Duration(const PrimitiveValue_Duration& from) : PrimitiveValue_Duration(nullptr, from) {}
  inline PrimitiveValue_Duration(PrimitiveValue_Duration&& from) noexcept
      : PrimitiveValue_Duration(nullptr, std::move(from)) {}
  inline PrimitiveValue_Duration& operator=(const PrimitiveValue_Duration& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrimitiveValue_Duration& operator=(PrimitiveValue_Duration&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrimitiveValue_Duration& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrimitiveValue_Duration* internal_default_instance() {
    return reinterpret_cast<const PrimitiveValue_Duration*>(
        &_PrimitiveValue_Duration_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(PrimitiveValue_Duration& a, PrimitiveValue_Duration& b) { a.Swap(&b); }
  inline void Swap(PrimitiveValue_Duration* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrimitiveValue_Duration* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrimitiveValue_Duration* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PrimitiveValue_Duration>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PrimitiveValue_Duration& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PrimitiveValue_Duration& from) { PrimitiveValue_Duration::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PrimitiveValue_Duration* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PicachvMessages.PrimitiveValue.Duration"; }

 protected:
  explicit PrimitiveValue_Duration(::google::protobuf::Arena* arena);
  PrimitiveValue_Duration(::google::protobuf::Arena* arena, const PrimitiveValue_Duration& from);
  PrimitiveValue_Duration(::google::protobuf::Arena* arena, PrimitiveValue_Duration&& from) noexcept
      : PrimitiveValue_Duration(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSecFieldNumber = 1,
    kNsecFieldNumber = 2,
  };
  // int64 sec = 1;
  void clear_sec() ;
  ::int64_t sec() const;
  void set_sec(::int64_t value);

  private:
  ::int64_t _internal_sec() const;
  void _internal_set_sec(::int64_t value);

  public:
  // int32 nsec = 2;
  void clear_nsec() ;
  ::int32_t nsec() const;
  void set_nsec(::int32_t value);

  private:
  ::int32_t _internal_nsec() const;
  void _internal_set_nsec(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:PicachvMessages.PrimitiveValue.Duration)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PrimitiveValue_Duration_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PrimitiveValue_Duration& from_msg);
    ::int64_t sec_;
    ::int32_t nsec_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class GroupByProxy_Groups final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PicachvMessages.GroupByProxy.Groups) */ {
 public:
  inline GroupByProxy_Groups() : GroupByProxy_Groups(nullptr) {}
  ~GroupByProxy_Groups() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GroupByProxy_Groups(
      ::google::protobuf::internal::ConstantInitialized);

  inline GroupByProxy_Groups(const GroupByProxy_Groups& from) : GroupByProxy_Groups(nullptr, from) {}
  inline GroupByProxy_Groups(GroupByProxy_Groups&& from) noexcept
      : GroupByProxy_Groups(nullptr, std::move(from)) {}
  inline GroupByProxy_Groups& operator=(const GroupByProxy_Groups& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupByProxy_Groups& operator=(GroupByProxy_Groups&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupByProxy_Groups& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupByProxy_Groups* internal_default_instance() {
    return reinterpret_cast<const GroupByProxy_Groups*>(
        &_GroupByProxy_Groups_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(GroupByProxy_Groups& a, GroupByProxy_Groups& b) { a.Swap(&b); }
  inline void Swap(GroupByProxy_Groups* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupByProxy_Groups* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupByProxy_Groups* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GroupByProxy_Groups>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GroupByProxy_Groups& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GroupByProxy_Groups& from) { GroupByProxy_Groups::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GroupByProxy_Groups* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PicachvMessages.GroupByProxy.Groups"; }

 protected:
  explicit GroupByProxy_Groups(::google::protobuf::Arena* arena);
  GroupByProxy_Groups(::google::protobuf::Arena* arena, const GroupByProxy_Groups& from);
  GroupByProxy_Groups(::google::protobuf::Arena* arena, GroupByProxy_Groups&& from) noexcept
      : GroupByProxy_Groups(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kGroupFieldNumber = 1,
  };
  // repeated uint64 group = 1;
  int group_size() const;
  private:
  int _internal_group_size() const;

  public:
  void clear_group() ;
  ::uint64_t group(int index) const;
  void set_group(int index, ::uint64_t value);
  void add_group(::uint64_t value);
  const ::google::protobuf::RepeatedField<::uint64_t>& group() const;
  ::google::protobuf::RepeatedField<::uint64_t>* mutable_group();

  private:
  const ::google::protobuf::RepeatedField<::uint64_t>& _internal_group() const;
  ::google::protobuf::RepeatedField<::uint64_t>* _internal_mutable_group();

  public:
  // @@protoc_insertion_point(class_scope:PicachvMessages.GroupByProxy.Groups)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GroupByProxy_Groups_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GroupByProxy_Groups& from_msg);
    ::google::protobuf::RepeatedField<::uint64_t> group_;
    mutable ::google::protobuf::internal::CachedSize _group_cached_byte_size_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class BinaryOperator final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PicachvMessages.BinaryOperator) */ {
 public:
  inline BinaryOperator() : BinaryOperator(nullptr) {}
  ~BinaryOperator() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR BinaryOperator(
      ::google::protobuf::internal::ConstantInitialized);

  inline BinaryOperator(const BinaryOperator& from) : BinaryOperator(nullptr, from) {}
  inline BinaryOperator(BinaryOperator&& from) noexcept
      : BinaryOperator(nullptr, std::move(from)) {}
  inline BinaryOperator& operator=(const BinaryOperator& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryOperator& operator=(BinaryOperator&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BinaryOperator& default_instance() {
    return *internal_default_instance();
  }
  enum OperatorCase {
    kLogicalOperator = 1,
    kComparisonOperator = 2,
    kArithmeticOperator = 3,
    OPERATOR_NOT_SET = 0,
  };
  static inline const BinaryOperator* internal_default_instance() {
    return reinterpret_cast<const BinaryOperator*>(
        &_BinaryOperator_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(BinaryOperator& a, BinaryOperator& b) { a.Swap(&b); }
  inline void Swap(BinaryOperator* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinaryOperator* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinaryOperator* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<BinaryOperator>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BinaryOperator& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const BinaryOperator& from) { BinaryOperator::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(BinaryOperator* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PicachvMessages.BinaryOperator"; }

 protected:
  explicit BinaryOperator(::google::protobuf::Arena* arena);
  BinaryOperator(::google::protobuf::Arena* arena, const BinaryOperator& from);
  BinaryOperator(::google::protobuf::Arena* arena, BinaryOperator&& from) noexcept
      : BinaryOperator(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLogicalOperatorFieldNumber = 1,
    kComparisonOperatorFieldNumber = 2,
    kArithmeticOperatorFieldNumber = 3,
  };
  // .PicachvMessages.LogicalBinaryOperator logical_operator = 1;
  bool has_logical_operator() const;
  void clear_logical_operator() ;
  ::PicachvMessages::LogicalBinaryOperator logical_operator() const;
  void set_logical_operator(::PicachvMessages::LogicalBinaryOperator value);

  private:
  ::PicachvMessages::LogicalBinaryOperator _internal_logical_operator() const;
  void _internal_set_logical_operator(::PicachvMessages::LogicalBinaryOperator value);

  public:
  // .PicachvMessages.ComparisonBinaryOperator comparison_operator = 2;
  bool has_comparison_operator() const;
  void clear_comparison_operator() ;
  ::PicachvMessages::ComparisonBinaryOperator comparison_operator() const;
  void set_comparison_operator(::PicachvMessages::ComparisonBinaryOperator value);

  private:
  ::PicachvMessages::ComparisonBinaryOperator _internal_comparison_operator() const;
  void _internal_set_comparison_operator(::PicachvMessages::ComparisonBinaryOperator value);

  public:
  // .PicachvMessages.ArithmeticBinaryOperator arithmetic_operator = 3;
  bool has_arithmetic_operator() const;
  void clear_arithmetic_operator() ;
  ::PicachvMessages::ArithmeticBinaryOperator arithmetic_operator() const;
  void set_arithmetic_operator(::PicachvMessages::ArithmeticBinaryOperator value);

  private:
  ::PicachvMessages::ArithmeticBinaryOperator _internal_arithmetic_operator() const;
  void _internal_set_arithmetic_operator(::PicachvMessages::ArithmeticBinaryOperator value);

  public:
  void clear_operator();
  OperatorCase operator_case() const;
  // @@protoc_insertion_point(class_scope:PicachvMessages.BinaryOperator)
 private:
  class _Internal;
  void set_has_logical_operator();
  void set_has_comparison_operator();
  void set_has_arithmetic_operator();
  inline bool has_operator() const;
  inline void clear_has_operator();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 3, 0,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_BinaryOperator_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const BinaryOperator& from_msg);
    union OperatorUnion {
      constexpr OperatorUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      int logical_operator_;
      int comparison_operator_;
      int arithmetic_operator_;
    } operator_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class PrimitiveValue final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PicachvMessages.PrimitiveValue) */ {
 public:
  inline PrimitiveValue() : PrimitiveValue(nullptr) {}
  ~PrimitiveValue() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PrimitiveValue(
      ::google::protobuf::internal::ConstantInitialized);

  inline PrimitiveValue(const PrimitiveValue& from) : PrimitiveValue(nullptr, from) {}
  inline PrimitiveValue(PrimitiveValue&& from) noexcept
      : PrimitiveValue(nullptr, std::move(from)) {}
  inline PrimitiveValue& operator=(const PrimitiveValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrimitiveValue& operator=(PrimitiveValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrimitiveValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kU8 = 1,
    kU16 = 2,
    kU32 = 3,
    kU64 = 4,
    kI8 = 5,
    kI16 = 6,
    kI32 = 7,
    kI64 = 8,
    kF32 = 9,
    kF64 = 10,
    kBool = 11,
    kStr = 12,
    kDuration = 13,
    VALUE_NOT_SET = 0,
  };
  static inline const PrimitiveValue* internal_default_instance() {
    return reinterpret_cast<const PrimitiveValue*>(
        &_PrimitiveValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(PrimitiveValue& a, PrimitiveValue& b) { a.Swap(&b); }
  inline void Swap(PrimitiveValue* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrimitiveValue* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrimitiveValue* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<PrimitiveValue>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PrimitiveValue& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PrimitiveValue& from) { PrimitiveValue::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(PrimitiveValue* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PicachvMessages.PrimitiveValue"; }

 protected:
  explicit PrimitiveValue(::google::protobuf::Arena* arena);
  PrimitiveValue(::google::protobuf::Arena* arena, const PrimitiveValue& from);
  PrimitiveValue(::google::protobuf::Arena* arena, PrimitiveValue&& from) noexcept
      : PrimitiveValue(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Duration = PrimitiveValue_Duration;

  // accessors -------------------------------------------------------
  enum : int {
    kU8FieldNumber = 1,
    kU16FieldNumber = 2,
    kU32FieldNumber = 3,
    kU64FieldNumber = 4,
    kI8FieldNumber = 5,
    kI16FieldNumber = 6,
    kI32FieldNumber = 7,
    kI64FieldNumber = 8,
    kF32FieldNumber = 9,
    kF64FieldNumber = 10,
    kBoolFieldNumber = 11,
    kStrFieldNumber = 12,
    kDurationFieldNumber = 13,
  };
  // uint32 u8 = 1;
  bool has_u8() const;
  void clear_u8() ;
  ::uint32_t u8() const;
  void set_u8(::uint32_t value);

  private:
  ::uint32_t _internal_u8() const;
  void _internal_set_u8(::uint32_t value);

  public:
  // uint32 u16 = 2;
  bool has_u16() const;
  void clear_u16() ;
  ::uint32_t u16() const;
  void set_u16(::uint32_t value);

  private:
  ::uint32_t _internal_u16() const;
  void _internal_set_u16(::uint32_t value);

  public:
  // uint32 u32 = 3;
  bool has_u32() const;
  void clear_u32() ;
  ::uint32_t u32() const;
  void set_u32(::uint32_t value);

  private:
  ::uint32_t _internal_u32() const;
  void _internal_set_u32(::uint32_t value);

  public:
  // uint64 u64 = 4;
  bool has_u64() const;
  void clear_u64() ;
  ::uint64_t u64() const;
  void set_u64(::uint64_t value);

  private:
  ::uint64_t _internal_u64() const;
  void _internal_set_u64(::uint64_t value);

  public:
  // int32 i8 = 5;
  bool has_i8() const;
  void clear_i8() ;
  ::int32_t i8() const;
  void set_i8(::int32_t value);

  private:
  ::int32_t _internal_i8() const;
  void _internal_set_i8(::int32_t value);

  public:
  // int32 i16 = 6;
  bool has_i16() const;
  void clear_i16() ;
  ::int32_t i16() const;
  void set_i16(::int32_t value);

  private:
  ::int32_t _internal_i16() const;
  void _internal_set_i16(::int32_t value);

  public:
  // int32 i32 = 7;
  bool has_i32() const;
  void clear_i32() ;
  ::int32_t i32() const;
  void set_i32(::int32_t value);

  private:
  ::int32_t _internal_i32() const;
  void _internal_set_i32(::int32_t value);

  public:
  // int64 i64 = 8;
  bool has_i64() const;
  void clear_i64() ;
  ::int64_t i64() const;
  void set_i64(::int64_t value);

  private:
  ::int64_t _internal_i64() const;
  void _internal_set_i64(::int64_t value);

  public:
  // float f32 = 9;
  bool has_f32() const;
  void clear_f32() ;
  float f32() const;
  void set_f32(float value);

  private:
  float _internal_f32() const;
  void _internal_set_f32(float value);

  public:
  // double f64 = 10;
  bool has_f64() const;
  void clear_f64() ;
  double f64() const;
  void set_f64(double value);

  private:
  double _internal_f64() const;
  void _internal_set_f64(double value);

  public:
  // bool bool = 11;
  bool has_bool_() const;
  void clear_bool_() ;
  bool bool_() const;
  void set_bool_(bool value);

  private:
  bool _internal_bool_() const;
  void _internal_set_bool_(bool value);

  public:
  // string str = 12;
  bool has_str() const;
  void clear_str() ;
  const std::string& str() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_str(Arg_&& arg, Args_... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* value);

  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(
      const std::string& value);
  std::string* _internal_mutable_str();

  public:
  // .PicachvMessages.PrimitiveValue.Duration duration = 13;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;

  public:
  void clear_duration() ;
  const ::PicachvMessages::PrimitiveValue_Duration& duration() const;
  PROTOBUF_NODISCARD ::PicachvMessages::PrimitiveValue_Duration* release_duration();
  ::PicachvMessages::PrimitiveValue_Duration* mutable_duration();
  void set_allocated_duration(::PicachvMessages::PrimitiveValue_Duration* value);
  void unsafe_arena_set_allocated_duration(::PicachvMessages::PrimitiveValue_Duration* value);
  ::PicachvMessages::PrimitiveValue_Duration* unsafe_arena_release_duration();

  private:
  const ::PicachvMessages::PrimitiveValue_Duration& _internal_duration() const;
  ::PicachvMessages::PrimitiveValue_Duration* _internal_mutable_duration();

  public:
  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:PicachvMessages.PrimitiveValue)
 private:
  class _Internal;
  void set_has_u8();
  void set_has_u16();
  void set_has_u32();
  void set_has_u64();
  void set_has_i8();
  void set_has_i16();
  void set_has_i32();
  void set_has_i64();
  void set_has_f32();
  void set_has_f64();
  void set_has_bool_();
  void set_has_str();
  void set_has_duration();
  inline bool has_value() const;
  inline void clear_has_value();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 13, 1,
      50, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_PrimitiveValue_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PrimitiveValue& from_msg);
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::uint32_t u8_;
      ::uint32_t u16_;
      ::uint32_t u32_;
      ::uint64_t u64_;
      ::int32_t i8_;
      ::int32_t i16_;
      ::int32_t i32_;
      ::int64_t i64_;
      float f32_;
      double f64_;
      bool bool__;
      ::google::protobuf::internal::ArenaStringPtr str_;
      ::PicachvMessages::PrimitiveValue_Duration* duration_;
    } value_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class GroupByProxy final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:PicachvMessages.GroupByProxy) */ {
 public:
  inline GroupByProxy() : GroupByProxy(nullptr) {}
  ~GroupByProxy() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GroupByProxy(
      ::google::protobuf::internal::ConstantInitialized);

  inline GroupByProxy(const GroupByProxy& from) : GroupByProxy(nullptr, from) {}
  inline GroupByProxy(GroupByProxy&& from) noexcept
      : GroupByProxy(nullptr, std::move(from)) {}
  inline GroupByProxy& operator=(const GroupByProxy& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupByProxy& operator=(GroupByProxy&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupByProxy& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupByProxy* internal_default_instance() {
    return reinterpret_cast<const GroupByProxy*>(
        &_GroupByProxy_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(GroupByProxy& a, GroupByProxy& b) { a.Swap(&b); }
  inline void Swap(GroupByProxy* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupByProxy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupByProxy* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GroupByProxy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GroupByProxy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GroupByProxy& from) { GroupByProxy::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GroupByProxy* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "PicachvMessages.GroupByProxy"; }

 protected:
  explicit GroupByProxy(::google::protobuf::Arena* arena);
  GroupByProxy(::google::protobuf::Arena* arena, const GroupByProxy& from);
  GroupByProxy(::google::protobuf::Arena* arena, GroupByProxy&& from) noexcept
      : GroupByProxy(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::Message::ClassData* GetClassData() const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Groups = GroupByProxy_Groups;

  // accessors -------------------------------------------------------
  enum : int {
    kFirstFieldNumber = 1,
    kGroupsFieldNumber = 2,
  };
  // repeated uint64 first = 1;
  int first_size() const;
  private:
  int _internal_first_size() const;

  public:
  void clear_first() ;
  ::uint64_t first(int index) const;
  void set_first(int index, ::uint64_t value);
  void add_first(::uint64_t value);
  const ::google::protobuf::RepeatedField<::uint64_t>& first() const;
  ::google::protobuf::RepeatedField<::uint64_t>* mutable_first();

  private:
  const ::google::protobuf::RepeatedField<::uint64_t>& _internal_first() const;
  ::google::protobuf::RepeatedField<::uint64_t>* _internal_mutable_first();

  public:
  // repeated .PicachvMessages.GroupByProxy.Groups groups = 2;
  int groups_size() const;
  private:
  int _internal_groups_size() const;

  public:
  void clear_groups() ;
  ::PicachvMessages::GroupByProxy_Groups* mutable_groups(int index);
  ::google::protobuf::RepeatedPtrField<::PicachvMessages::GroupByProxy_Groups>* mutable_groups();

  private:
  const ::google::protobuf::RepeatedPtrField<::PicachvMessages::GroupByProxy_Groups>& _internal_groups() const;
  ::google::protobuf::RepeatedPtrField<::PicachvMessages::GroupByProxy_Groups>* _internal_mutable_groups();
  public:
  const ::PicachvMessages::GroupByProxy_Groups& groups(int index) const;
  ::PicachvMessages::GroupByProxy_Groups* add_groups();
  const ::google::protobuf::RepeatedPtrField<::PicachvMessages::GroupByProxy_Groups>& groups() const;
  // @@protoc_insertion_point(class_scope:PicachvMessages.GroupByProxy)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  static constexpr const void* _raw_default_instance_ =
      &_GroupByProxy_default_instance_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GroupByProxy& from_msg);
    ::google::protobuf::RepeatedField<::uint64_t> first_;
    mutable ::google::protobuf::internal::CachedSize _first_cached_byte_size_;
    ::google::protobuf::RepeatedPtrField< ::PicachvMessages::GroupByProxy_Groups > groups_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_basic_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GroupByProxy_Groups

// repeated uint64 group = 1;
inline int GroupByProxy_Groups::_internal_group_size() const {
  return _internal_group().size();
}
inline int GroupByProxy_Groups::group_size() const {
  return _internal_group_size();
}
inline void GroupByProxy_Groups::clear_group() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.group_.Clear();
}
inline ::uint64_t GroupByProxy_Groups::group(int index) const {
  // @@protoc_insertion_point(field_get:PicachvMessages.GroupByProxy.Groups.group)
  return _internal_group().Get(index);
}
inline void GroupByProxy_Groups::set_group(int index, ::uint64_t value) {
  _internal_mutable_group()->Set(index, value);
  // @@protoc_insertion_point(field_set:PicachvMessages.GroupByProxy.Groups.group)
}
inline void GroupByProxy_Groups::add_group(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_group()->Add(value);
  // @@protoc_insertion_point(field_add:PicachvMessages.GroupByProxy.Groups.group)
}
inline const ::google::protobuf::RepeatedField<::uint64_t>& GroupByProxy_Groups::group() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:PicachvMessages.GroupByProxy.Groups.group)
  return _internal_group();
}
inline ::google::protobuf::RepeatedField<::uint64_t>* GroupByProxy_Groups::mutable_group()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:PicachvMessages.GroupByProxy.Groups.group)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_group();
}
inline const ::google::protobuf::RepeatedField<::uint64_t>&
GroupByProxy_Groups::_internal_group() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.group_;
}
inline ::google::protobuf::RepeatedField<::uint64_t>* GroupByProxy_Groups::_internal_mutable_group() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.group_;
}

// -------------------------------------------------------------------

// GroupByProxy

// repeated uint64 first = 1;
inline int GroupByProxy::_internal_first_size() const {
  return _internal_first().size();
}
inline int GroupByProxy::first_size() const {
  return _internal_first_size();
}
inline void GroupByProxy::clear_first() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.first_.Clear();
}
inline ::uint64_t GroupByProxy::first(int index) const {
  // @@protoc_insertion_point(field_get:PicachvMessages.GroupByProxy.first)
  return _internal_first().Get(index);
}
inline void GroupByProxy::set_first(int index, ::uint64_t value) {
  _internal_mutable_first()->Set(index, value);
  // @@protoc_insertion_point(field_set:PicachvMessages.GroupByProxy.first)
}
inline void GroupByProxy::add_first(::uint64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _internal_mutable_first()->Add(value);
  // @@protoc_insertion_point(field_add:PicachvMessages.GroupByProxy.first)
}
inline const ::google::protobuf::RepeatedField<::uint64_t>& GroupByProxy::first() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:PicachvMessages.GroupByProxy.first)
  return _internal_first();
}
inline ::google::protobuf::RepeatedField<::uint64_t>* GroupByProxy::mutable_first()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:PicachvMessages.GroupByProxy.first)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_first();
}
inline const ::google::protobuf::RepeatedField<::uint64_t>&
GroupByProxy::_internal_first() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.first_;
}
inline ::google::protobuf::RepeatedField<::uint64_t>* GroupByProxy::_internal_mutable_first() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.first_;
}

// repeated .PicachvMessages.GroupByProxy.Groups groups = 2;
inline int GroupByProxy::_internal_groups_size() const {
  return _internal_groups().size();
}
inline int GroupByProxy::groups_size() const {
  return _internal_groups_size();
}
inline void GroupByProxy::clear_groups() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.groups_.Clear();
}
inline ::PicachvMessages::GroupByProxy_Groups* GroupByProxy::mutable_groups(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:PicachvMessages.GroupByProxy.groups)
  return _internal_mutable_groups()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::PicachvMessages::GroupByProxy_Groups>* GroupByProxy::mutable_groups()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:PicachvMessages.GroupByProxy.groups)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_groups();
}
inline const ::PicachvMessages::GroupByProxy_Groups& GroupByProxy::groups(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PicachvMessages.GroupByProxy.groups)
  return _internal_groups().Get(index);
}
inline ::PicachvMessages::GroupByProxy_Groups* GroupByProxy::add_groups() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::PicachvMessages::GroupByProxy_Groups* _add = _internal_mutable_groups()->Add();
  // @@protoc_insertion_point(field_add:PicachvMessages.GroupByProxy.groups)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::PicachvMessages::GroupByProxy_Groups>& GroupByProxy::groups() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:PicachvMessages.GroupByProxy.groups)
  return _internal_groups();
}
inline const ::google::protobuf::RepeatedPtrField<::PicachvMessages::GroupByProxy_Groups>&
GroupByProxy::_internal_groups() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.groups_;
}
inline ::google::protobuf::RepeatedPtrField<::PicachvMessages::GroupByProxy_Groups>*
GroupByProxy::_internal_mutable_groups() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.groups_;
}

// -------------------------------------------------------------------

// PrimitiveValue_Duration

// int64 sec = 1;
inline void PrimitiveValue_Duration::clear_sec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sec_ = ::int64_t{0};
}
inline ::int64_t PrimitiveValue_Duration::sec() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.Duration.sec)
  return _internal_sec();
}
inline void PrimitiveValue_Duration::set_sec(::int64_t value) {
  _internal_set_sec(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.Duration.sec)
}
inline ::int64_t PrimitiveValue_Duration::_internal_sec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.sec_;
}
inline void PrimitiveValue_Duration::_internal_set_sec(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.sec_ = value;
}

// int32 nsec = 2;
inline void PrimitiveValue_Duration::clear_nsec() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nsec_ = 0;
}
inline ::int32_t PrimitiveValue_Duration::nsec() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.Duration.nsec)
  return _internal_nsec();
}
inline void PrimitiveValue_Duration::set_nsec(::int32_t value) {
  _internal_set_nsec(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.Duration.nsec)
}
inline ::int32_t PrimitiveValue_Duration::_internal_nsec() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.nsec_;
}
inline void PrimitiveValue_Duration::_internal_set_nsec(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.nsec_ = value;
}

// -------------------------------------------------------------------

// PrimitiveValue

// uint32 u8 = 1;
inline bool PrimitiveValue::has_u8() const {
  return value_case() == kU8;
}
inline void PrimitiveValue::set_has_u8() {
  _impl_._oneof_case_[0] = kU8;
}
inline void PrimitiveValue::clear_u8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kU8) {
    _impl_.value_.u8_ = 0u;
    clear_has_value();
  }
}
inline ::uint32_t PrimitiveValue::u8() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.u8)
  return _internal_u8();
}
inline void PrimitiveValue::set_u8(::uint32_t value) {
  if (value_case() != kU8) {
    clear_value();
    set_has_u8();
  }
  _impl_.value_.u8_ = value;
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.u8)
}
inline ::uint32_t PrimitiveValue::_internal_u8() const {
  if (value_case() == kU8) {
    return _impl_.value_.u8_;
  }
  return 0u;
}

// uint32 u16 = 2;
inline bool PrimitiveValue::has_u16() const {
  return value_case() == kU16;
}
inline void PrimitiveValue::set_has_u16() {
  _impl_._oneof_case_[0] = kU16;
}
inline void PrimitiveValue::clear_u16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kU16) {
    _impl_.value_.u16_ = 0u;
    clear_has_value();
  }
}
inline ::uint32_t PrimitiveValue::u16() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.u16)
  return _internal_u16();
}
inline void PrimitiveValue::set_u16(::uint32_t value) {
  if (value_case() != kU16) {
    clear_value();
    set_has_u16();
  }
  _impl_.value_.u16_ = value;
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.u16)
}
inline ::uint32_t PrimitiveValue::_internal_u16() const {
  if (value_case() == kU16) {
    return _impl_.value_.u16_;
  }
  return 0u;
}

// uint32 u32 = 3;
inline bool PrimitiveValue::has_u32() const {
  return value_case() == kU32;
}
inline void PrimitiveValue::set_has_u32() {
  _impl_._oneof_case_[0] = kU32;
}
inline void PrimitiveValue::clear_u32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kU32) {
    _impl_.value_.u32_ = 0u;
    clear_has_value();
  }
}
inline ::uint32_t PrimitiveValue::u32() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.u32)
  return _internal_u32();
}
inline void PrimitiveValue::set_u32(::uint32_t value) {
  if (value_case() != kU32) {
    clear_value();
    set_has_u32();
  }
  _impl_.value_.u32_ = value;
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.u32)
}
inline ::uint32_t PrimitiveValue::_internal_u32() const {
  if (value_case() == kU32) {
    return _impl_.value_.u32_;
  }
  return 0u;
}

// uint64 u64 = 4;
inline bool PrimitiveValue::has_u64() const {
  return value_case() == kU64;
}
inline void PrimitiveValue::set_has_u64() {
  _impl_._oneof_case_[0] = kU64;
}
inline void PrimitiveValue::clear_u64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kU64) {
    _impl_.value_.u64_ = ::uint64_t{0u};
    clear_has_value();
  }
}
inline ::uint64_t PrimitiveValue::u64() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.u64)
  return _internal_u64();
}
inline void PrimitiveValue::set_u64(::uint64_t value) {
  if (value_case() != kU64) {
    clear_value();
    set_has_u64();
  }
  _impl_.value_.u64_ = value;
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.u64)
}
inline ::uint64_t PrimitiveValue::_internal_u64() const {
  if (value_case() == kU64) {
    return _impl_.value_.u64_;
  }
  return ::uint64_t{0u};
}

// int32 i8 = 5;
inline bool PrimitiveValue::has_i8() const {
  return value_case() == kI8;
}
inline void PrimitiveValue::set_has_i8() {
  _impl_._oneof_case_[0] = kI8;
}
inline void PrimitiveValue::clear_i8() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kI8) {
    _impl_.value_.i8_ = 0;
    clear_has_value();
  }
}
inline ::int32_t PrimitiveValue::i8() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.i8)
  return _internal_i8();
}
inline void PrimitiveValue::set_i8(::int32_t value) {
  if (value_case() != kI8) {
    clear_value();
    set_has_i8();
  }
  _impl_.value_.i8_ = value;
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.i8)
}
inline ::int32_t PrimitiveValue::_internal_i8() const {
  if (value_case() == kI8) {
    return _impl_.value_.i8_;
  }
  return 0;
}

// int32 i16 = 6;
inline bool PrimitiveValue::has_i16() const {
  return value_case() == kI16;
}
inline void PrimitiveValue::set_has_i16() {
  _impl_._oneof_case_[0] = kI16;
}
inline void PrimitiveValue::clear_i16() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kI16) {
    _impl_.value_.i16_ = 0;
    clear_has_value();
  }
}
inline ::int32_t PrimitiveValue::i16() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.i16)
  return _internal_i16();
}
inline void PrimitiveValue::set_i16(::int32_t value) {
  if (value_case() != kI16) {
    clear_value();
    set_has_i16();
  }
  _impl_.value_.i16_ = value;
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.i16)
}
inline ::int32_t PrimitiveValue::_internal_i16() const {
  if (value_case() == kI16) {
    return _impl_.value_.i16_;
  }
  return 0;
}

// int32 i32 = 7;
inline bool PrimitiveValue::has_i32() const {
  return value_case() == kI32;
}
inline void PrimitiveValue::set_has_i32() {
  _impl_._oneof_case_[0] = kI32;
}
inline void PrimitiveValue::clear_i32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kI32) {
    _impl_.value_.i32_ = 0;
    clear_has_value();
  }
}
inline ::int32_t PrimitiveValue::i32() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.i32)
  return _internal_i32();
}
inline void PrimitiveValue::set_i32(::int32_t value) {
  if (value_case() != kI32) {
    clear_value();
    set_has_i32();
  }
  _impl_.value_.i32_ = value;
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.i32)
}
inline ::int32_t PrimitiveValue::_internal_i32() const {
  if (value_case() == kI32) {
    return _impl_.value_.i32_;
  }
  return 0;
}

// int64 i64 = 8;
inline bool PrimitiveValue::has_i64() const {
  return value_case() == kI64;
}
inline void PrimitiveValue::set_has_i64() {
  _impl_._oneof_case_[0] = kI64;
}
inline void PrimitiveValue::clear_i64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kI64) {
    _impl_.value_.i64_ = ::int64_t{0};
    clear_has_value();
  }
}
inline ::int64_t PrimitiveValue::i64() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.i64)
  return _internal_i64();
}
inline void PrimitiveValue::set_i64(::int64_t value) {
  if (value_case() != kI64) {
    clear_value();
    set_has_i64();
  }
  _impl_.value_.i64_ = value;
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.i64)
}
inline ::int64_t PrimitiveValue::_internal_i64() const {
  if (value_case() == kI64) {
    return _impl_.value_.i64_;
  }
  return ::int64_t{0};
}

// float f32 = 9;
inline bool PrimitiveValue::has_f32() const {
  return value_case() == kF32;
}
inline void PrimitiveValue::set_has_f32() {
  _impl_._oneof_case_[0] = kF32;
}
inline void PrimitiveValue::clear_f32() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kF32) {
    _impl_.value_.f32_ = 0;
    clear_has_value();
  }
}
inline float PrimitiveValue::f32() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.f32)
  return _internal_f32();
}
inline void PrimitiveValue::set_f32(float value) {
  if (value_case() != kF32) {
    clear_value();
    set_has_f32();
  }
  _impl_.value_.f32_ = value;
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.f32)
}
inline float PrimitiveValue::_internal_f32() const {
  if (value_case() == kF32) {
    return _impl_.value_.f32_;
  }
  return 0;
}

// double f64 = 10;
inline bool PrimitiveValue::has_f64() const {
  return value_case() == kF64;
}
inline void PrimitiveValue::set_has_f64() {
  _impl_._oneof_case_[0] = kF64;
}
inline void PrimitiveValue::clear_f64() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kF64) {
    _impl_.value_.f64_ = 0;
    clear_has_value();
  }
}
inline double PrimitiveValue::f64() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.f64)
  return _internal_f64();
}
inline void PrimitiveValue::set_f64(double value) {
  if (value_case() != kF64) {
    clear_value();
    set_has_f64();
  }
  _impl_.value_.f64_ = value;
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.f64)
}
inline double PrimitiveValue::_internal_f64() const {
  if (value_case() == kF64) {
    return _impl_.value_.f64_;
  }
  return 0;
}

// bool bool = 11;
inline bool PrimitiveValue::has_bool_() const {
  return value_case() == kBool;
}
inline void PrimitiveValue::set_has_bool_() {
  _impl_._oneof_case_[0] = kBool;
}
inline void PrimitiveValue::clear_bool_() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kBool) {
    _impl_.value_.bool__ = false;
    clear_has_value();
  }
}
inline bool PrimitiveValue::bool_() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.bool)
  return _internal_bool_();
}
inline void PrimitiveValue::set_bool_(bool value) {
  if (value_case() != kBool) {
    clear_value();
    set_has_bool_();
  }
  _impl_.value_.bool__ = value;
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.bool)
}
inline bool PrimitiveValue::_internal_bool_() const {
  if (value_case() == kBool) {
    return _impl_.value_.bool__;
  }
  return false;
}

// string str = 12;
inline bool PrimitiveValue::has_str() const {
  return value_case() == kStr;
}
inline void PrimitiveValue::set_has_str() {
  _impl_._oneof_case_[0] = kStr;
}
inline void PrimitiveValue::clear_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kStr) {
    _impl_.value_.str_.Destroy();
    clear_has_value();
  }
}
inline const std::string& PrimitiveValue::str() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.str)
  return _internal_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PrimitiveValue::set_str(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStr) {
    clear_value();

    set_has_str();
    _impl_.value_.str_.InitDefault();
  }
  _impl_.value_.str_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.str)
}
inline std::string* PrimitiveValue::mutable_str() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.PrimitiveValue.str)
  return _s;
}
inline const std::string& PrimitiveValue::_internal_str() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  if (value_case() != kStr) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.value_.str_.Get();
}
inline void PrimitiveValue::_internal_set_str(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStr) {
    clear_value();

    set_has_str();
    _impl_.value_.str_.InitDefault();
  }
  _impl_.value_.str_.Set(value, GetArena());
}
inline std::string* PrimitiveValue::_internal_mutable_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() != kStr) {
    clear_value();

    set_has_str();
    _impl_.value_.str_.InitDefault();
  }
  return _impl_.value_.str_.Mutable( GetArena());
}
inline std::string* PrimitiveValue::release_str() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:PicachvMessages.PrimitiveValue.str)
  if (value_case() != kStr) {
    return nullptr;
  }
  clear_has_value();
  return _impl_.value_.str_.Release();
}
inline void PrimitiveValue::set_allocated_str(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (has_value()) {
    clear_value();
  }
  if (value != nullptr) {
    set_has_str();
    _impl_.value_.str_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:PicachvMessages.PrimitiveValue.str)
}

// .PicachvMessages.PrimitiveValue.Duration duration = 13;
inline bool PrimitiveValue::has_duration() const {
  return value_case() == kDuration;
}
inline bool PrimitiveValue::_internal_has_duration() const {
  return value_case() == kDuration;
}
inline void PrimitiveValue::set_has_duration() {
  _impl_._oneof_case_[0] = kDuration;
}
inline void PrimitiveValue::clear_duration() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value_case() == kDuration) {
    if (GetArena() == nullptr) {
      delete _impl_.value_.duration_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.value_.duration_);
    }
    clear_has_value();
  }
}
inline ::PicachvMessages::PrimitiveValue_Duration* PrimitiveValue::release_duration() {
  // @@protoc_insertion_point(field_release:PicachvMessages.PrimitiveValue.duration)
  if (value_case() == kDuration) {
    clear_has_value();
    auto* temp = _impl_.value_.duration_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.duration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PicachvMessages::PrimitiveValue_Duration& PrimitiveValue::_internal_duration() const {
  return value_case() == kDuration ? *_impl_.value_.duration_ : reinterpret_cast<::PicachvMessages::PrimitiveValue_Duration&>(::PicachvMessages::_PrimitiveValue_Duration_default_instance_);
}
inline const ::PicachvMessages::PrimitiveValue_Duration& PrimitiveValue::duration() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.duration)
  return _internal_duration();
}
inline ::PicachvMessages::PrimitiveValue_Duration* PrimitiveValue::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PicachvMessages.PrimitiveValue.duration)
  if (value_case() == kDuration) {
    clear_has_value();
    auto* temp = _impl_.value_.duration_;
    _impl_.value_.duration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PrimitiveValue::unsafe_arena_set_allocated_duration(::PicachvMessages::PrimitiveValue_Duration* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_value();
  if (value) {
    set_has_duration();
    _impl_.value_.duration_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PicachvMessages.PrimitiveValue.duration)
}
inline ::PicachvMessages::PrimitiveValue_Duration* PrimitiveValue::_internal_mutable_duration() {
  if (value_case() != kDuration) {
    clear_value();
    set_has_duration();
    _impl_.value_.duration_ =
        ::google::protobuf::Message::DefaultConstruct<::PicachvMessages::PrimitiveValue_Duration>(GetArena());
  }
  return _impl_.value_.duration_;
}
inline ::PicachvMessages::PrimitiveValue_Duration* PrimitiveValue::mutable_duration() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::PicachvMessages::PrimitiveValue_Duration* _msg = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.PrimitiveValue.duration)
  return _msg;
}

inline bool PrimitiveValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void PrimitiveValue::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline PrimitiveValue::ValueCase PrimitiveValue::value_case() const {
  return PrimitiveValue::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BinaryOperator

// .PicachvMessages.LogicalBinaryOperator logical_operator = 1;
inline bool BinaryOperator::has_logical_operator() const {
  return operator_case() == kLogicalOperator;
}
inline void BinaryOperator::set_has_logical_operator() {
  _impl_._oneof_case_[0] = kLogicalOperator;
}
inline void BinaryOperator::clear_logical_operator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (operator_case() == kLogicalOperator) {
    _impl_.operator_.logical_operator_ = 0;
    clear_has_operator();
  }
}
inline ::PicachvMessages::LogicalBinaryOperator BinaryOperator::logical_operator() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.BinaryOperator.logical_operator)
  return _internal_logical_operator();
}
inline void BinaryOperator::set_logical_operator(::PicachvMessages::LogicalBinaryOperator value) {
  if (operator_case() != kLogicalOperator) {
    clear_operator();
    set_has_logical_operator();
  }
  _impl_.operator_.logical_operator_ = value;
  // @@protoc_insertion_point(field_set:PicachvMessages.BinaryOperator.logical_operator)
}
inline ::PicachvMessages::LogicalBinaryOperator BinaryOperator::_internal_logical_operator() const {
  if (operator_case() == kLogicalOperator) {
    return static_cast<::PicachvMessages::LogicalBinaryOperator>(_impl_.operator_.logical_operator_);
  }
  return static_cast<::PicachvMessages::LogicalBinaryOperator>(0);
}

// .PicachvMessages.ComparisonBinaryOperator comparison_operator = 2;
inline bool BinaryOperator::has_comparison_operator() const {
  return operator_case() == kComparisonOperator;
}
inline void BinaryOperator::set_has_comparison_operator() {
  _impl_._oneof_case_[0] = kComparisonOperator;
}
inline void BinaryOperator::clear_comparison_operator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (operator_case() == kComparisonOperator) {
    _impl_.operator_.comparison_operator_ = 0;
    clear_has_operator();
  }
}
inline ::PicachvMessages::ComparisonBinaryOperator BinaryOperator::comparison_operator() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.BinaryOperator.comparison_operator)
  return _internal_comparison_operator();
}
inline void BinaryOperator::set_comparison_operator(::PicachvMessages::ComparisonBinaryOperator value) {
  if (operator_case() != kComparisonOperator) {
    clear_operator();
    set_has_comparison_operator();
  }
  _impl_.operator_.comparison_operator_ = value;
  // @@protoc_insertion_point(field_set:PicachvMessages.BinaryOperator.comparison_operator)
}
inline ::PicachvMessages::ComparisonBinaryOperator BinaryOperator::_internal_comparison_operator() const {
  if (operator_case() == kComparisonOperator) {
    return static_cast<::PicachvMessages::ComparisonBinaryOperator>(_impl_.operator_.comparison_operator_);
  }
  return static_cast<::PicachvMessages::ComparisonBinaryOperator>(0);
}

// .PicachvMessages.ArithmeticBinaryOperator arithmetic_operator = 3;
inline bool BinaryOperator::has_arithmetic_operator() const {
  return operator_case() == kArithmeticOperator;
}
inline void BinaryOperator::set_has_arithmetic_operator() {
  _impl_._oneof_case_[0] = kArithmeticOperator;
}
inline void BinaryOperator::clear_arithmetic_operator() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (operator_case() == kArithmeticOperator) {
    _impl_.operator_.arithmetic_operator_ = 0;
    clear_has_operator();
  }
}
inline ::PicachvMessages::ArithmeticBinaryOperator BinaryOperator::arithmetic_operator() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.BinaryOperator.arithmetic_operator)
  return _internal_arithmetic_operator();
}
inline void BinaryOperator::set_arithmetic_operator(::PicachvMessages::ArithmeticBinaryOperator value) {
  if (operator_case() != kArithmeticOperator) {
    clear_operator();
    set_has_arithmetic_operator();
  }
  _impl_.operator_.arithmetic_operator_ = value;
  // @@protoc_insertion_point(field_set:PicachvMessages.BinaryOperator.arithmetic_operator)
}
inline ::PicachvMessages::ArithmeticBinaryOperator BinaryOperator::_internal_arithmetic_operator() const {
  if (operator_case() == kArithmeticOperator) {
    return static_cast<::PicachvMessages::ArithmeticBinaryOperator>(_impl_.operator_.arithmetic_operator_);
  }
  return static_cast<::PicachvMessages::ArithmeticBinaryOperator>(0);
}

inline bool BinaryOperator::has_operator() const {
  return operator_case() != OPERATOR_NOT_SET;
}
inline void BinaryOperator::clear_has_operator() {
  _impl_._oneof_case_[0] = OPERATOR_NOT_SET;
}
inline BinaryOperator::OperatorCase BinaryOperator::operator_case() const {
  return BinaryOperator::OperatorCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace PicachvMessages


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::PicachvMessages::FileType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::PicachvMessages::FileType>() {
  return ::PicachvMessages::FileType_descriptor();
}
template <>
struct is_proto_enum<::PicachvMessages::JoinType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::PicachvMessages::JoinType>() {
  return ::PicachvMessages::JoinType_descriptor();
}
template <>
struct is_proto_enum<::PicachvMessages::LogicalPlanType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::PicachvMessages::LogicalPlanType>() {
  return ::PicachvMessages::LogicalPlanType_descriptor();
}
template <>
struct is_proto_enum<::PicachvMessages::LogicalBinaryOperator> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::PicachvMessages::LogicalBinaryOperator>() {
  return ::PicachvMessages::LogicalBinaryOperator_descriptor();
}
template <>
struct is_proto_enum<::PicachvMessages::ComparisonBinaryOperator> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::PicachvMessages::ComparisonBinaryOperator>() {
  return ::PicachvMessages::ComparisonBinaryOperator_descriptor();
}
template <>
struct is_proto_enum<::PicachvMessages::ArithmeticBinaryOperator> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::PicachvMessages::ArithmeticBinaryOperator>() {
  return ::PicachvMessages::ArithmeticBinaryOperator_descriptor();
}
template <>
struct is_proto_enum<::PicachvMessages::UnaryOperator> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::PicachvMessages::UnaryOperator>() {
  return ::PicachvMessages::UnaryOperator_descriptor();
}
template <>
struct is_proto_enum<::PicachvMessages::GroupByMethod> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::PicachvMessages::GroupByMethod>() {
  return ::PicachvMessages::GroupByMethod_descriptor();
}
template <>
struct is_proto_enum<::PicachvMessages::ExprType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::PicachvMessages::ExprType>() {
  return ::PicachvMessages::ExprType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_basic_2eproto_2epb_2eh
