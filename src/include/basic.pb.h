// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: basic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_basic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_basic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_basic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_basic_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_basic_2eproto;
namespace PicachvMessages {
class BinaryOperator;
struct BinaryOperatorDefaultTypeInternal;
extern BinaryOperatorDefaultTypeInternal _BinaryOperator_default_instance_;
class ColumnSpecifier;
struct ColumnSpecifierDefaultTypeInternal;
extern ColumnSpecifierDefaultTypeInternal _ColumnSpecifier_default_instance_;
class GroupByProxy;
struct GroupByProxyDefaultTypeInternal;
extern GroupByProxyDefaultTypeInternal _GroupByProxy_default_instance_;
class GroupByProxy_Groups;
struct GroupByProxy_GroupsDefaultTypeInternal;
extern GroupByProxy_GroupsDefaultTypeInternal _GroupByProxy_Groups_default_instance_;
class PrimitiveValue;
struct PrimitiveValueDefaultTypeInternal;
extern PrimitiveValueDefaultTypeInternal _PrimitiveValue_default_instance_;
class PrimitiveValue_Duration;
struct PrimitiveValue_DurationDefaultTypeInternal;
extern PrimitiveValue_DurationDefaultTypeInternal _PrimitiveValue_Duration_default_instance_;
}  // namespace PicachvMessages
PROTOBUF_NAMESPACE_OPEN
template<> ::PicachvMessages::BinaryOperator* Arena::CreateMaybeMessage<::PicachvMessages::BinaryOperator>(Arena*);
template<> ::PicachvMessages::ColumnSpecifier* Arena::CreateMaybeMessage<::PicachvMessages::ColumnSpecifier>(Arena*);
template<> ::PicachvMessages::GroupByProxy* Arena::CreateMaybeMessage<::PicachvMessages::GroupByProxy>(Arena*);
template<> ::PicachvMessages::GroupByProxy_Groups* Arena::CreateMaybeMessage<::PicachvMessages::GroupByProxy_Groups>(Arena*);
template<> ::PicachvMessages::PrimitiveValue* Arena::CreateMaybeMessage<::PicachvMessages::PrimitiveValue>(Arena*);
template<> ::PicachvMessages::PrimitiveValue_Duration* Arena::CreateMaybeMessage<::PicachvMessages::PrimitiveValue_Duration>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PicachvMessages {

enum FileType : int {
  Csv = 0,
  Parquet = 1,
  Json = 2,
  Avro = 3,
  FileType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  FileType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool FileType_IsValid(int value);
constexpr FileType FileType_MIN = Csv;
constexpr FileType FileType_MAX = Avro;
constexpr int FileType_ARRAYSIZE = FileType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileType_descriptor();
template<typename T>
inline const std::string& FileType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FileType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FileType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FileType_descriptor(), enum_t_value);
}
inline bool FileType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, FileType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FileType>(
    FileType_descriptor(), name, value);
}
enum JoinType : int {
  Inner = 0,
  Left = 1,
  Cross = 2,
  Outer = 3,
  JoinType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  JoinType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool JoinType_IsValid(int value);
constexpr JoinType JoinType_MIN = Inner;
constexpr JoinType JoinType_MAX = Outer;
constexpr int JoinType_ARRAYSIZE = JoinType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* JoinType_descriptor();
template<typename T>
inline const std::string& JoinType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, JoinType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function JoinType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    JoinType_descriptor(), enum_t_value);
}
inline bool JoinType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, JoinType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<JoinType>(
    JoinType_descriptor(), name, value);
}
enum LogicalPlanType : int {
  Select = 0,
  Distinct = 1,
  Projection = 2,
  Aggregation = 3,
  Join = 4,
  Scan = 5,
  Union = 6,
  Other = 7,
  LogicalPlanType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LogicalPlanType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LogicalPlanType_IsValid(int value);
constexpr LogicalPlanType LogicalPlanType_MIN = Select;
constexpr LogicalPlanType LogicalPlanType_MAX = Other;
constexpr int LogicalPlanType_ARRAYSIZE = LogicalPlanType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalPlanType_descriptor();
template<typename T>
inline const std::string& LogicalPlanType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogicalPlanType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogicalPlanType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogicalPlanType_descriptor(), enum_t_value);
}
inline bool LogicalPlanType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogicalPlanType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogicalPlanType>(
    LogicalPlanType_descriptor(), name, value);
}
enum LogicalBinaryOperator : int {
  And = 0,
  Or = 1,
  LogicalBinaryOperator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  LogicalBinaryOperator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool LogicalBinaryOperator_IsValid(int value);
constexpr LogicalBinaryOperator LogicalBinaryOperator_MIN = And;
constexpr LogicalBinaryOperator LogicalBinaryOperator_MAX = Or;
constexpr int LogicalBinaryOperator_ARRAYSIZE = LogicalBinaryOperator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogicalBinaryOperator_descriptor();
template<typename T>
inline const std::string& LogicalBinaryOperator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogicalBinaryOperator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogicalBinaryOperator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogicalBinaryOperator_descriptor(), enum_t_value);
}
inline bool LogicalBinaryOperator_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, LogicalBinaryOperator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogicalBinaryOperator>(
    LogicalBinaryOperator_descriptor(), name, value);
}
enum ComparisonBinaryOperator : int {
  Eq = 0,
  Ne = 1,
  Gt = 2,
  Lt = 3,
  Le = 4,
  Ge = 5,
  ComparisonBinaryOperator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ComparisonBinaryOperator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ComparisonBinaryOperator_IsValid(int value);
constexpr ComparisonBinaryOperator ComparisonBinaryOperator_MIN = Eq;
constexpr ComparisonBinaryOperator ComparisonBinaryOperator_MAX = Ge;
constexpr int ComparisonBinaryOperator_ARRAYSIZE = ComparisonBinaryOperator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComparisonBinaryOperator_descriptor();
template<typename T>
inline const std::string& ComparisonBinaryOperator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ComparisonBinaryOperator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ComparisonBinaryOperator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ComparisonBinaryOperator_descriptor(), enum_t_value);
}
inline bool ComparisonBinaryOperator_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ComparisonBinaryOperator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ComparisonBinaryOperator>(
    ComparisonBinaryOperator_descriptor(), name, value);
}
enum ArithmeticBinaryOperator : int {
  Add = 0,
  Sub = 1,
  Mul = 2,
  Div = 3,
  Mod = 4,
  Pow = 5,
  ShiftBy = 6,
  ArithmeticBinaryOperator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ArithmeticBinaryOperator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ArithmeticBinaryOperator_IsValid(int value);
constexpr ArithmeticBinaryOperator ArithmeticBinaryOperator_MIN = Add;
constexpr ArithmeticBinaryOperator ArithmeticBinaryOperator_MAX = ShiftBy;
constexpr int ArithmeticBinaryOperator_ARRAYSIZE = ArithmeticBinaryOperator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ArithmeticBinaryOperator_descriptor();
template<typename T>
inline const std::string& ArithmeticBinaryOperator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ArithmeticBinaryOperator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ArithmeticBinaryOperator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ArithmeticBinaryOperator_descriptor(), enum_t_value);
}
inline bool ArithmeticBinaryOperator_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ArithmeticBinaryOperator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ArithmeticBinaryOperator>(
    ArithmeticBinaryOperator_descriptor(), name, value);
}
enum UnaryOperator : int {
  Identity = 0,
  Redact = 1,
  Substitute = 2,
  Not = 3,
  UnaryOperator_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  UnaryOperator_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool UnaryOperator_IsValid(int value);
constexpr UnaryOperator UnaryOperator_MIN = Identity;
constexpr UnaryOperator UnaryOperator_MAX = Not;
constexpr int UnaryOperator_ARRAYSIZE = UnaryOperator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UnaryOperator_descriptor();
template<typename T>
inline const std::string& UnaryOperator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UnaryOperator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UnaryOperator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UnaryOperator_descriptor(), enum_t_value);
}
inline bool UnaryOperator_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UnaryOperator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UnaryOperator>(
    UnaryOperator_descriptor(), name, value);
}
enum GroupByMethod : int {
  Min = 0,
  NanMin = 1,
  Max = 2,
  NanMax = 3,
  Median = 4,
  Mean = 5,
  First = 6,
  Last = 7,
  Sum = 8,
  GroupByMethod_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GroupByMethod_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GroupByMethod_IsValid(int value);
constexpr GroupByMethod GroupByMethod_MIN = Min;
constexpr GroupByMethod GroupByMethod_MAX = Sum;
constexpr int GroupByMethod_ARRAYSIZE = GroupByMethod_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GroupByMethod_descriptor();
template<typename T>
inline const std::string& GroupByMethod_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GroupByMethod>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GroupByMethod_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GroupByMethod_descriptor(), enum_t_value);
}
inline bool GroupByMethod_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GroupByMethod* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GroupByMethod>(
    GroupByMethod_descriptor(), name, value);
}
enum ExprType : int {
  Agg = 0,
  Column = 1,
  Count = 2,
  Alias = 3,
  Wildcard = 4,
  Filter = 5,
  Binary = 6,
  Unary = 7,
  ExprType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ExprType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ExprType_IsValid(int value);
constexpr ExprType ExprType_MIN = Agg;
constexpr ExprType ExprType_MAX = Unary;
constexpr int ExprType_ARRAYSIZE = ExprType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ExprType_descriptor();
template<typename T>
inline const std::string& ExprType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ExprType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ExprType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ExprType_descriptor(), enum_t_value);
}
inline bool ExprType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ExprType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ExprType>(
    ExprType_descriptor(), name, value);
}
// ===================================================================

class ColumnSpecifier final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.ColumnSpecifier) */ {
 public:
  inline ColumnSpecifier() : ColumnSpecifier(nullptr) {}
  ~ColumnSpecifier() override;
  explicit PROTOBUF_CONSTEXPR ColumnSpecifier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColumnSpecifier(const ColumnSpecifier& from);
  ColumnSpecifier(ColumnSpecifier&& from) noexcept
    : ColumnSpecifier() {
    *this = ::std::move(from);
  }

  inline ColumnSpecifier& operator=(const ColumnSpecifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColumnSpecifier& operator=(ColumnSpecifier&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColumnSpecifier& default_instance() {
    return *internal_default_instance();
  }
  enum ColumnCase {
    kColumnIndex = 1,
    kColumnName = 2,
    COLUMN_NOT_SET = 0,
  };

  static inline const ColumnSpecifier* internal_default_instance() {
    return reinterpret_cast<const ColumnSpecifier*>(
               &_ColumnSpecifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ColumnSpecifier& a, ColumnSpecifier& b) {
    a.Swap(&b);
  }
  inline void Swap(ColumnSpecifier* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColumnSpecifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ColumnSpecifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ColumnSpecifier>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ColumnSpecifier& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ColumnSpecifier& from) {
    ColumnSpecifier::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColumnSpecifier* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.ColumnSpecifier";
  }
  protected:
  explicit ColumnSpecifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kColumnIndexFieldNumber = 1,
    kColumnNameFieldNumber = 2,
  };
  // uint64 column_index = 1;
  bool has_column_index() const;
  private:
  bool _internal_has_column_index() const;
  public:
  void clear_column_index();
  uint64_t column_index() const;
  void set_column_index(uint64_t value);
  private:
  uint64_t _internal_column_index() const;
  void _internal_set_column_index(uint64_t value);
  public:

  // string column_name = 2;
  bool has_column_name() const;
  private:
  bool _internal_has_column_name() const;
  public:
  void clear_column_name();
  const std::string& column_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_column_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_column_name();
  PROTOBUF_NODISCARD std::string* release_column_name();
  void set_allocated_column_name(std::string* column_name);
  private:
  const std::string& _internal_column_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_column_name(const std::string& value);
  std::string* _internal_mutable_column_name();
  public:

  void clear_column();
  ColumnCase column_case() const;
  // @@protoc_insertion_point(class_scope:PicachvMessages.ColumnSpecifier)
 private:
  class _Internal;
  void set_has_column_index();
  void set_has_column_name();

  inline bool has_column() const;
  inline void clear_has_column();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ColumnUnion {
      constexpr ColumnUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint64_t column_index_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr column_name_;
    } column_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class GroupByProxy_Groups final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.GroupByProxy.Groups) */ {
 public:
  inline GroupByProxy_Groups() : GroupByProxy_Groups(nullptr) {}
  ~GroupByProxy_Groups() override;
  explicit PROTOBUF_CONSTEXPR GroupByProxy_Groups(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupByProxy_Groups(const GroupByProxy_Groups& from);
  GroupByProxy_Groups(GroupByProxy_Groups&& from) noexcept
    : GroupByProxy_Groups() {
    *this = ::std::move(from);
  }

  inline GroupByProxy_Groups& operator=(const GroupByProxy_Groups& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupByProxy_Groups& operator=(GroupByProxy_Groups&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupByProxy_Groups& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupByProxy_Groups* internal_default_instance() {
    return reinterpret_cast<const GroupByProxy_Groups*>(
               &_GroupByProxy_Groups_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GroupByProxy_Groups& a, GroupByProxy_Groups& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupByProxy_Groups* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupByProxy_Groups* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupByProxy_Groups* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupByProxy_Groups>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupByProxy_Groups& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupByProxy_Groups& from) {
    GroupByProxy_Groups::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupByProxy_Groups* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.GroupByProxy.Groups";
  }
  protected:
  explicit GroupByProxy_Groups(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 1,
  };
  // repeated uint64 group = 1;
  int group_size() const;
  private:
  int _internal_group_size() const;
  public:
  void clear_group();
  private:
  uint64_t _internal_group(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_group() const;
  void _internal_add_group(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_group();
  public:
  uint64_t group(int index) const;
  void set_group(int index, uint64_t value);
  void add_group(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      group() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_group();

  // @@protoc_insertion_point(class_scope:PicachvMessages.GroupByProxy.Groups)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > group_;
    mutable std::atomic<int> _group_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class GroupByProxy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.GroupByProxy) */ {
 public:
  inline GroupByProxy() : GroupByProxy(nullptr) {}
  ~GroupByProxy() override;
  explicit PROTOBUF_CONSTEXPR GroupByProxy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupByProxy(const GroupByProxy& from);
  GroupByProxy(GroupByProxy&& from) noexcept
    : GroupByProxy() {
    *this = ::std::move(from);
  }

  inline GroupByProxy& operator=(const GroupByProxy& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupByProxy& operator=(GroupByProxy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupByProxy& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupByProxy* internal_default_instance() {
    return reinterpret_cast<const GroupByProxy*>(
               &_GroupByProxy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GroupByProxy& a, GroupByProxy& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupByProxy* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupByProxy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupByProxy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupByProxy>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupByProxy& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupByProxy& from) {
    GroupByProxy::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupByProxy* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.GroupByProxy";
  }
  protected:
  explicit GroupByProxy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GroupByProxy_Groups Groups;

  // accessors -------------------------------------------------------

  enum : int {
    kFirstFieldNumber = 1,
    kGroupsFieldNumber = 2,
  };
  // repeated uint64 first = 1;
  int first_size() const;
  private:
  int _internal_first_size() const;
  public:
  void clear_first();
  private:
  uint64_t _internal_first(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_first() const;
  void _internal_add_first(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_first();
  public:
  uint64_t first(int index) const;
  void set_first(int index, uint64_t value);
  void add_first(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      first() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_first();

  // repeated .PicachvMessages.GroupByProxy.Groups groups = 2;
  int groups_size() const;
  private:
  int _internal_groups_size() const;
  public:
  void clear_groups();
  ::PicachvMessages::GroupByProxy_Groups* mutable_groups(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PicachvMessages::GroupByProxy_Groups >*
      mutable_groups();
  private:
  const ::PicachvMessages::GroupByProxy_Groups& _internal_groups(int index) const;
  ::PicachvMessages::GroupByProxy_Groups* _internal_add_groups();
  public:
  const ::PicachvMessages::GroupByProxy_Groups& groups(int index) const;
  ::PicachvMessages::GroupByProxy_Groups* add_groups();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PicachvMessages::GroupByProxy_Groups >&
      groups() const;

  // @@protoc_insertion_point(class_scope:PicachvMessages.GroupByProxy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > first_;
    mutable std::atomic<int> _first_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PicachvMessages::GroupByProxy_Groups > groups_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class PrimitiveValue_Duration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.PrimitiveValue.Duration) */ {
 public:
  inline PrimitiveValue_Duration() : PrimitiveValue_Duration(nullptr) {}
  ~PrimitiveValue_Duration() override;
  explicit PROTOBUF_CONSTEXPR PrimitiveValue_Duration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrimitiveValue_Duration(const PrimitiveValue_Duration& from);
  PrimitiveValue_Duration(PrimitiveValue_Duration&& from) noexcept
    : PrimitiveValue_Duration() {
    *this = ::std::move(from);
  }

  inline PrimitiveValue_Duration& operator=(const PrimitiveValue_Duration& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrimitiveValue_Duration& operator=(PrimitiveValue_Duration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrimitiveValue_Duration& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrimitiveValue_Duration* internal_default_instance() {
    return reinterpret_cast<const PrimitiveValue_Duration*>(
               &_PrimitiveValue_Duration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PrimitiveValue_Duration& a, PrimitiveValue_Duration& b) {
    a.Swap(&b);
  }
  inline void Swap(PrimitiveValue_Duration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrimitiveValue_Duration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrimitiveValue_Duration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrimitiveValue_Duration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrimitiveValue_Duration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PrimitiveValue_Duration& from) {
    PrimitiveValue_Duration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrimitiveValue_Duration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.PrimitiveValue.Duration";
  }
  protected:
  explicit PrimitiveValue_Duration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecFieldNumber = 1,
    kNsecFieldNumber = 2,
  };
  // int64 sec = 1;
  void clear_sec();
  int64_t sec() const;
  void set_sec(int64_t value);
  private:
  int64_t _internal_sec() const;
  void _internal_set_sec(int64_t value);
  public:

  // int32 nsec = 2;
  void clear_nsec();
  int32_t nsec() const;
  void set_nsec(int32_t value);
  private:
  int32_t _internal_nsec() const;
  void _internal_set_nsec(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:PicachvMessages.PrimitiveValue.Duration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int64_t sec_;
    int32_t nsec_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class PrimitiveValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.PrimitiveValue) */ {
 public:
  inline PrimitiveValue() : PrimitiveValue(nullptr) {}
  ~PrimitiveValue() override;
  explicit PROTOBUF_CONSTEXPR PrimitiveValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrimitiveValue(const PrimitiveValue& from);
  PrimitiveValue(PrimitiveValue&& from) noexcept
    : PrimitiveValue() {
    *this = ::std::move(from);
  }

  inline PrimitiveValue& operator=(const PrimitiveValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrimitiveValue& operator=(PrimitiveValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrimitiveValue& default_instance() {
    return *internal_default_instance();
  }
  enum ValueCase {
    kU8 = 1,
    kU16 = 2,
    kU32 = 3,
    kU64 = 4,
    kI8 = 5,
    kI16 = 6,
    kI32 = 7,
    kI64 = 8,
    kF32 = 9,
    kF64 = 10,
    kBool = 11,
    kStr = 12,
    kDuration = 13,
    VALUE_NOT_SET = 0,
  };

  static inline const PrimitiveValue* internal_default_instance() {
    return reinterpret_cast<const PrimitiveValue*>(
               &_PrimitiveValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PrimitiveValue& a, PrimitiveValue& b) {
    a.Swap(&b);
  }
  inline void Swap(PrimitiveValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrimitiveValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrimitiveValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrimitiveValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrimitiveValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PrimitiveValue& from) {
    PrimitiveValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrimitiveValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.PrimitiveValue";
  }
  protected:
  explicit PrimitiveValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PrimitiveValue_Duration Duration;

  // accessors -------------------------------------------------------

  enum : int {
    kU8FieldNumber = 1,
    kU16FieldNumber = 2,
    kU32FieldNumber = 3,
    kU64FieldNumber = 4,
    kI8FieldNumber = 5,
    kI16FieldNumber = 6,
    kI32FieldNumber = 7,
    kI64FieldNumber = 8,
    kF32FieldNumber = 9,
    kF64FieldNumber = 10,
    kBoolFieldNumber = 11,
    kStrFieldNumber = 12,
    kDurationFieldNumber = 13,
  };
  // uint32 u8 = 1;
  bool has_u8() const;
  private:
  bool _internal_has_u8() const;
  public:
  void clear_u8();
  uint32_t u8() const;
  void set_u8(uint32_t value);
  private:
  uint32_t _internal_u8() const;
  void _internal_set_u8(uint32_t value);
  public:

  // uint32 u16 = 2;
  bool has_u16() const;
  private:
  bool _internal_has_u16() const;
  public:
  void clear_u16();
  uint32_t u16() const;
  void set_u16(uint32_t value);
  private:
  uint32_t _internal_u16() const;
  void _internal_set_u16(uint32_t value);
  public:

  // uint32 u32 = 3;
  bool has_u32() const;
  private:
  bool _internal_has_u32() const;
  public:
  void clear_u32();
  uint32_t u32() const;
  void set_u32(uint32_t value);
  private:
  uint32_t _internal_u32() const;
  void _internal_set_u32(uint32_t value);
  public:

  // uint64 u64 = 4;
  bool has_u64() const;
  private:
  bool _internal_has_u64() const;
  public:
  void clear_u64();
  uint64_t u64() const;
  void set_u64(uint64_t value);
  private:
  uint64_t _internal_u64() const;
  void _internal_set_u64(uint64_t value);
  public:

  // int32 i8 = 5;
  bool has_i8() const;
  private:
  bool _internal_has_i8() const;
  public:
  void clear_i8();
  int32_t i8() const;
  void set_i8(int32_t value);
  private:
  int32_t _internal_i8() const;
  void _internal_set_i8(int32_t value);
  public:

  // int32 i16 = 6;
  bool has_i16() const;
  private:
  bool _internal_has_i16() const;
  public:
  void clear_i16();
  int32_t i16() const;
  void set_i16(int32_t value);
  private:
  int32_t _internal_i16() const;
  void _internal_set_i16(int32_t value);
  public:

  // int32 i32 = 7;
  bool has_i32() const;
  private:
  bool _internal_has_i32() const;
  public:
  void clear_i32();
  int32_t i32() const;
  void set_i32(int32_t value);
  private:
  int32_t _internal_i32() const;
  void _internal_set_i32(int32_t value);
  public:

  // int64 i64 = 8;
  bool has_i64() const;
  private:
  bool _internal_has_i64() const;
  public:
  void clear_i64();
  int64_t i64() const;
  void set_i64(int64_t value);
  private:
  int64_t _internal_i64() const;
  void _internal_set_i64(int64_t value);
  public:

  // float f32 = 9;
  bool has_f32() const;
  private:
  bool _internal_has_f32() const;
  public:
  void clear_f32();
  float f32() const;
  void set_f32(float value);
  private:
  float _internal_f32() const;
  void _internal_set_f32(float value);
  public:

  // double f64 = 10;
  bool has_f64() const;
  private:
  bool _internal_has_f64() const;
  public:
  void clear_f64();
  double f64() const;
  void set_f64(double value);
  private:
  double _internal_f64() const;
  void _internal_set_f64(double value);
  public:

  // bool bool = 11;
  bool has_bool_() const;
  private:
  bool _internal_has_bool_() const;
  public:
  void clear_bool_();
  bool bool_() const;
  void set_bool_(bool value);
  private:
  bool _internal_bool_() const;
  void _internal_set_bool_(bool value);
  public:

  // string str = 12;
  bool has_str() const;
  private:
  bool _internal_has_str() const;
  public:
  void clear_str();
  const std::string& str() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* str);
  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(const std::string& value);
  std::string* _internal_mutable_str();
  public:

  // .PicachvMessages.PrimitiveValue.Duration duration = 13;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const ::PicachvMessages::PrimitiveValue_Duration& duration() const;
  PROTOBUF_NODISCARD ::PicachvMessages::PrimitiveValue_Duration* release_duration();
  ::PicachvMessages::PrimitiveValue_Duration* mutable_duration();
  void set_allocated_duration(::PicachvMessages::PrimitiveValue_Duration* duration);
  private:
  const ::PicachvMessages::PrimitiveValue_Duration& _internal_duration() const;
  ::PicachvMessages::PrimitiveValue_Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      ::PicachvMessages::PrimitiveValue_Duration* duration);
  ::PicachvMessages::PrimitiveValue_Duration* unsafe_arena_release_duration();

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:PicachvMessages.PrimitiveValue)
 private:
  class _Internal;
  void set_has_u8();
  void set_has_u16();
  void set_has_u32();
  void set_has_u64();
  void set_has_i8();
  void set_has_i16();
  void set_has_i32();
  void set_has_i64();
  void set_has_f32();
  void set_has_f64();
  void set_has_bool_();
  void set_has_str();
  void set_has_duration();

  inline bool has_value() const;
  inline void clear_has_value();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union ValueUnion {
      constexpr ValueUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      uint32_t u8_;
      uint32_t u16_;
      uint32_t u32_;
      uint64_t u64_;
      int32_t i8_;
      int32_t i16_;
      int32_t i32_;
      int64_t i64_;
      float f32_;
      double f64_;
      bool bool__;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_;
      ::PicachvMessages::PrimitiveValue_Duration* duration_;
    } value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_basic_2eproto;
};
// -------------------------------------------------------------------

class BinaryOperator final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.BinaryOperator) */ {
 public:
  inline BinaryOperator() : BinaryOperator(nullptr) {}
  ~BinaryOperator() override;
  explicit PROTOBUF_CONSTEXPR BinaryOperator(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BinaryOperator(const BinaryOperator& from);
  BinaryOperator(BinaryOperator&& from) noexcept
    : BinaryOperator() {
    *this = ::std::move(from);
  }

  inline BinaryOperator& operator=(const BinaryOperator& from) {
    CopyFrom(from);
    return *this;
  }
  inline BinaryOperator& operator=(BinaryOperator&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BinaryOperator& default_instance() {
    return *internal_default_instance();
  }
  enum OperatorCase {
    kLogicalOperator = 1,
    kComparisonOperator = 2,
    kArithmeticOperator = 3,
    OPERATOR_NOT_SET = 0,
  };

  static inline const BinaryOperator* internal_default_instance() {
    return reinterpret_cast<const BinaryOperator*>(
               &_BinaryOperator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BinaryOperator& a, BinaryOperator& b) {
    a.Swap(&b);
  }
  inline void Swap(BinaryOperator* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BinaryOperator* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BinaryOperator* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BinaryOperator>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BinaryOperator& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BinaryOperator& from) {
    BinaryOperator::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryOperator* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.BinaryOperator";
  }
  protected:
  explicit BinaryOperator(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogicalOperatorFieldNumber = 1,
    kComparisonOperatorFieldNumber = 2,
    kArithmeticOperatorFieldNumber = 3,
  };
  // .PicachvMessages.LogicalBinaryOperator logical_operator = 1;
  bool has_logical_operator() const;
  private:
  bool _internal_has_logical_operator() const;
  public:
  void clear_logical_operator();
  ::PicachvMessages::LogicalBinaryOperator logical_operator() const;
  void set_logical_operator(::PicachvMessages::LogicalBinaryOperator value);
  private:
  ::PicachvMessages::LogicalBinaryOperator _internal_logical_operator() const;
  void _internal_set_logical_operator(::PicachvMessages::LogicalBinaryOperator value);
  public:

  // .PicachvMessages.ComparisonBinaryOperator comparison_operator = 2;
  bool has_comparison_operator() const;
  private:
  bool _internal_has_comparison_operator() const;
  public:
  void clear_comparison_operator();
  ::PicachvMessages::ComparisonBinaryOperator comparison_operator() const;
  void set_comparison_operator(::PicachvMessages::ComparisonBinaryOperator value);
  private:
  ::PicachvMessages::ComparisonBinaryOperator _internal_comparison_operator() const;
  void _internal_set_comparison_operator(::PicachvMessages::ComparisonBinaryOperator value);
  public:

  // .PicachvMessages.ArithmeticBinaryOperator arithmetic_operator = 3;
  bool has_arithmetic_operator() const;
  private:
  bool _internal_has_arithmetic_operator() const;
  public:
  void clear_arithmetic_operator();
  ::PicachvMessages::ArithmeticBinaryOperator arithmetic_operator() const;
  void set_arithmetic_operator(::PicachvMessages::ArithmeticBinaryOperator value);
  private:
  ::PicachvMessages::ArithmeticBinaryOperator _internal_arithmetic_operator() const;
  void _internal_set_arithmetic_operator(::PicachvMessages::ArithmeticBinaryOperator value);
  public:

  void clear_operator();
  OperatorCase operator_case() const;
  // @@protoc_insertion_point(class_scope:PicachvMessages.BinaryOperator)
 private:
  class _Internal;
  void set_has_logical_operator();
  void set_has_comparison_operator();
  void set_has_arithmetic_operator();

  inline bool has_operator() const;
  inline void clear_has_operator();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union OperatorUnion {
      constexpr OperatorUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      int logical_operator_;
      int comparison_operator_;
      int arithmetic_operator_;
    } operator_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_basic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ColumnSpecifier

// uint64 column_index = 1;
inline bool ColumnSpecifier::_internal_has_column_index() const {
  return column_case() == kColumnIndex;
}
inline bool ColumnSpecifier::has_column_index() const {
  return _internal_has_column_index();
}
inline void ColumnSpecifier::set_has_column_index() {
  _impl_._oneof_case_[0] = kColumnIndex;
}
inline void ColumnSpecifier::clear_column_index() {
  if (_internal_has_column_index()) {
    _impl_.column_.column_index_ = uint64_t{0u};
    clear_has_column();
  }
}
inline uint64_t ColumnSpecifier::_internal_column_index() const {
  if (_internal_has_column_index()) {
    return _impl_.column_.column_index_;
  }
  return uint64_t{0u};
}
inline void ColumnSpecifier::_internal_set_column_index(uint64_t value) {
  if (!_internal_has_column_index()) {
    clear_column();
    set_has_column_index();
  }
  _impl_.column_.column_index_ = value;
}
inline uint64_t ColumnSpecifier::column_index() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.ColumnSpecifier.column_index)
  return _internal_column_index();
}
inline void ColumnSpecifier::set_column_index(uint64_t value) {
  _internal_set_column_index(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.ColumnSpecifier.column_index)
}

// string column_name = 2;
inline bool ColumnSpecifier::_internal_has_column_name() const {
  return column_case() == kColumnName;
}
inline bool ColumnSpecifier::has_column_name() const {
  return _internal_has_column_name();
}
inline void ColumnSpecifier::set_has_column_name() {
  _impl_._oneof_case_[0] = kColumnName;
}
inline void ColumnSpecifier::clear_column_name() {
  if (_internal_has_column_name()) {
    _impl_.column_.column_name_.Destroy();
    clear_has_column();
  }
}
inline const std::string& ColumnSpecifier::column_name() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.ColumnSpecifier.column_name)
  return _internal_column_name();
}
template <typename ArgT0, typename... ArgT>
inline void ColumnSpecifier::set_column_name(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_column_name()) {
    clear_column();
    set_has_column_name();
    _impl_.column_.column_name_.InitDefault();
  }
  _impl_.column_.column_name_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PicachvMessages.ColumnSpecifier.column_name)
}
inline std::string* ColumnSpecifier::mutable_column_name() {
  std::string* _s = _internal_mutable_column_name();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.ColumnSpecifier.column_name)
  return _s;
}
inline const std::string& ColumnSpecifier::_internal_column_name() const {
  if (_internal_has_column_name()) {
    return _impl_.column_.column_name_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void ColumnSpecifier::_internal_set_column_name(const std::string& value) {
  if (!_internal_has_column_name()) {
    clear_column();
    set_has_column_name();
    _impl_.column_.column_name_.InitDefault();
  }
  _impl_.column_.column_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ColumnSpecifier::_internal_mutable_column_name() {
  if (!_internal_has_column_name()) {
    clear_column();
    set_has_column_name();
    _impl_.column_.column_name_.InitDefault();
  }
  return _impl_.column_.column_name_.Mutable(      GetArenaForAllocation());
}
inline std::string* ColumnSpecifier::release_column_name() {
  // @@protoc_insertion_point(field_release:PicachvMessages.ColumnSpecifier.column_name)
  if (_internal_has_column_name()) {
    clear_has_column();
    return _impl_.column_.column_name_.Release();
  } else {
    return nullptr;
  }
}
inline void ColumnSpecifier::set_allocated_column_name(std::string* column_name) {
  if (has_column()) {
    clear_column();
  }
  if (column_name != nullptr) {
    set_has_column_name();
    _impl_.column_.column_name_.InitAllocated(column_name, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:PicachvMessages.ColumnSpecifier.column_name)
}

inline bool ColumnSpecifier::has_column() const {
  return column_case() != COLUMN_NOT_SET;
}
inline void ColumnSpecifier::clear_has_column() {
  _impl_._oneof_case_[0] = COLUMN_NOT_SET;
}
inline ColumnSpecifier::ColumnCase ColumnSpecifier::column_case() const {
  return ColumnSpecifier::ColumnCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// GroupByProxy_Groups

// repeated uint64 group = 1;
inline int GroupByProxy_Groups::_internal_group_size() const {
  return _impl_.group_.size();
}
inline int GroupByProxy_Groups::group_size() const {
  return _internal_group_size();
}
inline void GroupByProxy_Groups::clear_group() {
  _impl_.group_.Clear();
}
inline uint64_t GroupByProxy_Groups::_internal_group(int index) const {
  return _impl_.group_.Get(index);
}
inline uint64_t GroupByProxy_Groups::group(int index) const {
  // @@protoc_insertion_point(field_get:PicachvMessages.GroupByProxy.Groups.group)
  return _internal_group(index);
}
inline void GroupByProxy_Groups::set_group(int index, uint64_t value) {
  _impl_.group_.Set(index, value);
  // @@protoc_insertion_point(field_set:PicachvMessages.GroupByProxy.Groups.group)
}
inline void GroupByProxy_Groups::_internal_add_group(uint64_t value) {
  _impl_.group_.Add(value);
}
inline void GroupByProxy_Groups::add_group(uint64_t value) {
  _internal_add_group(value);
  // @@protoc_insertion_point(field_add:PicachvMessages.GroupByProxy.Groups.group)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
GroupByProxy_Groups::_internal_group() const {
  return _impl_.group_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
GroupByProxy_Groups::group() const {
  // @@protoc_insertion_point(field_list:PicachvMessages.GroupByProxy.Groups.group)
  return _internal_group();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
GroupByProxy_Groups::_internal_mutable_group() {
  return &_impl_.group_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
GroupByProxy_Groups::mutable_group() {
  // @@protoc_insertion_point(field_mutable_list:PicachvMessages.GroupByProxy.Groups.group)
  return _internal_mutable_group();
}

// -------------------------------------------------------------------

// GroupByProxy

// repeated uint64 first = 1;
inline int GroupByProxy::_internal_first_size() const {
  return _impl_.first_.size();
}
inline int GroupByProxy::first_size() const {
  return _internal_first_size();
}
inline void GroupByProxy::clear_first() {
  _impl_.first_.Clear();
}
inline uint64_t GroupByProxy::_internal_first(int index) const {
  return _impl_.first_.Get(index);
}
inline uint64_t GroupByProxy::first(int index) const {
  // @@protoc_insertion_point(field_get:PicachvMessages.GroupByProxy.first)
  return _internal_first(index);
}
inline void GroupByProxy::set_first(int index, uint64_t value) {
  _impl_.first_.Set(index, value);
  // @@protoc_insertion_point(field_set:PicachvMessages.GroupByProxy.first)
}
inline void GroupByProxy::_internal_add_first(uint64_t value) {
  _impl_.first_.Add(value);
}
inline void GroupByProxy::add_first(uint64_t value) {
  _internal_add_first(value);
  // @@protoc_insertion_point(field_add:PicachvMessages.GroupByProxy.first)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
GroupByProxy::_internal_first() const {
  return _impl_.first_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
GroupByProxy::first() const {
  // @@protoc_insertion_point(field_list:PicachvMessages.GroupByProxy.first)
  return _internal_first();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
GroupByProxy::_internal_mutable_first() {
  return &_impl_.first_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
GroupByProxy::mutable_first() {
  // @@protoc_insertion_point(field_mutable_list:PicachvMessages.GroupByProxy.first)
  return _internal_mutable_first();
}

// repeated .PicachvMessages.GroupByProxy.Groups groups = 2;
inline int GroupByProxy::_internal_groups_size() const {
  return _impl_.groups_.size();
}
inline int GroupByProxy::groups_size() const {
  return _internal_groups_size();
}
inline void GroupByProxy::clear_groups() {
  _impl_.groups_.Clear();
}
inline ::PicachvMessages::GroupByProxy_Groups* GroupByProxy::mutable_groups(int index) {
  // @@protoc_insertion_point(field_mutable:PicachvMessages.GroupByProxy.groups)
  return _impl_.groups_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PicachvMessages::GroupByProxy_Groups >*
GroupByProxy::mutable_groups() {
  // @@protoc_insertion_point(field_mutable_list:PicachvMessages.GroupByProxy.groups)
  return &_impl_.groups_;
}
inline const ::PicachvMessages::GroupByProxy_Groups& GroupByProxy::_internal_groups(int index) const {
  return _impl_.groups_.Get(index);
}
inline const ::PicachvMessages::GroupByProxy_Groups& GroupByProxy::groups(int index) const {
  // @@protoc_insertion_point(field_get:PicachvMessages.GroupByProxy.groups)
  return _internal_groups(index);
}
inline ::PicachvMessages::GroupByProxy_Groups* GroupByProxy::_internal_add_groups() {
  return _impl_.groups_.Add();
}
inline ::PicachvMessages::GroupByProxy_Groups* GroupByProxy::add_groups() {
  ::PicachvMessages::GroupByProxy_Groups* _add = _internal_add_groups();
  // @@protoc_insertion_point(field_add:PicachvMessages.GroupByProxy.groups)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PicachvMessages::GroupByProxy_Groups >&
GroupByProxy::groups() const {
  // @@protoc_insertion_point(field_list:PicachvMessages.GroupByProxy.groups)
  return _impl_.groups_;
}

// -------------------------------------------------------------------

// PrimitiveValue_Duration

// int64 sec = 1;
inline void PrimitiveValue_Duration::clear_sec() {
  _impl_.sec_ = int64_t{0};
}
inline int64_t PrimitiveValue_Duration::_internal_sec() const {
  return _impl_.sec_;
}
inline int64_t PrimitiveValue_Duration::sec() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.Duration.sec)
  return _internal_sec();
}
inline void PrimitiveValue_Duration::_internal_set_sec(int64_t value) {
  
  _impl_.sec_ = value;
}
inline void PrimitiveValue_Duration::set_sec(int64_t value) {
  _internal_set_sec(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.Duration.sec)
}

// int32 nsec = 2;
inline void PrimitiveValue_Duration::clear_nsec() {
  _impl_.nsec_ = 0;
}
inline int32_t PrimitiveValue_Duration::_internal_nsec() const {
  return _impl_.nsec_;
}
inline int32_t PrimitiveValue_Duration::nsec() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.Duration.nsec)
  return _internal_nsec();
}
inline void PrimitiveValue_Duration::_internal_set_nsec(int32_t value) {
  
  _impl_.nsec_ = value;
}
inline void PrimitiveValue_Duration::set_nsec(int32_t value) {
  _internal_set_nsec(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.Duration.nsec)
}

// -------------------------------------------------------------------

// PrimitiveValue

// uint32 u8 = 1;
inline bool PrimitiveValue::_internal_has_u8() const {
  return value_case() == kU8;
}
inline bool PrimitiveValue::has_u8() const {
  return _internal_has_u8();
}
inline void PrimitiveValue::set_has_u8() {
  _impl_._oneof_case_[0] = kU8;
}
inline void PrimitiveValue::clear_u8() {
  if (_internal_has_u8()) {
    _impl_.value_.u8_ = 0u;
    clear_has_value();
  }
}
inline uint32_t PrimitiveValue::_internal_u8() const {
  if (_internal_has_u8()) {
    return _impl_.value_.u8_;
  }
  return 0u;
}
inline void PrimitiveValue::_internal_set_u8(uint32_t value) {
  if (!_internal_has_u8()) {
    clear_value();
    set_has_u8();
  }
  _impl_.value_.u8_ = value;
}
inline uint32_t PrimitiveValue::u8() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.u8)
  return _internal_u8();
}
inline void PrimitiveValue::set_u8(uint32_t value) {
  _internal_set_u8(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.u8)
}

// uint32 u16 = 2;
inline bool PrimitiveValue::_internal_has_u16() const {
  return value_case() == kU16;
}
inline bool PrimitiveValue::has_u16() const {
  return _internal_has_u16();
}
inline void PrimitiveValue::set_has_u16() {
  _impl_._oneof_case_[0] = kU16;
}
inline void PrimitiveValue::clear_u16() {
  if (_internal_has_u16()) {
    _impl_.value_.u16_ = 0u;
    clear_has_value();
  }
}
inline uint32_t PrimitiveValue::_internal_u16() const {
  if (_internal_has_u16()) {
    return _impl_.value_.u16_;
  }
  return 0u;
}
inline void PrimitiveValue::_internal_set_u16(uint32_t value) {
  if (!_internal_has_u16()) {
    clear_value();
    set_has_u16();
  }
  _impl_.value_.u16_ = value;
}
inline uint32_t PrimitiveValue::u16() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.u16)
  return _internal_u16();
}
inline void PrimitiveValue::set_u16(uint32_t value) {
  _internal_set_u16(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.u16)
}

// uint32 u32 = 3;
inline bool PrimitiveValue::_internal_has_u32() const {
  return value_case() == kU32;
}
inline bool PrimitiveValue::has_u32() const {
  return _internal_has_u32();
}
inline void PrimitiveValue::set_has_u32() {
  _impl_._oneof_case_[0] = kU32;
}
inline void PrimitiveValue::clear_u32() {
  if (_internal_has_u32()) {
    _impl_.value_.u32_ = 0u;
    clear_has_value();
  }
}
inline uint32_t PrimitiveValue::_internal_u32() const {
  if (_internal_has_u32()) {
    return _impl_.value_.u32_;
  }
  return 0u;
}
inline void PrimitiveValue::_internal_set_u32(uint32_t value) {
  if (!_internal_has_u32()) {
    clear_value();
    set_has_u32();
  }
  _impl_.value_.u32_ = value;
}
inline uint32_t PrimitiveValue::u32() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.u32)
  return _internal_u32();
}
inline void PrimitiveValue::set_u32(uint32_t value) {
  _internal_set_u32(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.u32)
}

// uint64 u64 = 4;
inline bool PrimitiveValue::_internal_has_u64() const {
  return value_case() == kU64;
}
inline bool PrimitiveValue::has_u64() const {
  return _internal_has_u64();
}
inline void PrimitiveValue::set_has_u64() {
  _impl_._oneof_case_[0] = kU64;
}
inline void PrimitiveValue::clear_u64() {
  if (_internal_has_u64()) {
    _impl_.value_.u64_ = uint64_t{0u};
    clear_has_value();
  }
}
inline uint64_t PrimitiveValue::_internal_u64() const {
  if (_internal_has_u64()) {
    return _impl_.value_.u64_;
  }
  return uint64_t{0u};
}
inline void PrimitiveValue::_internal_set_u64(uint64_t value) {
  if (!_internal_has_u64()) {
    clear_value();
    set_has_u64();
  }
  _impl_.value_.u64_ = value;
}
inline uint64_t PrimitiveValue::u64() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.u64)
  return _internal_u64();
}
inline void PrimitiveValue::set_u64(uint64_t value) {
  _internal_set_u64(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.u64)
}

// int32 i8 = 5;
inline bool PrimitiveValue::_internal_has_i8() const {
  return value_case() == kI8;
}
inline bool PrimitiveValue::has_i8() const {
  return _internal_has_i8();
}
inline void PrimitiveValue::set_has_i8() {
  _impl_._oneof_case_[0] = kI8;
}
inline void PrimitiveValue::clear_i8() {
  if (_internal_has_i8()) {
    _impl_.value_.i8_ = 0;
    clear_has_value();
  }
}
inline int32_t PrimitiveValue::_internal_i8() const {
  if (_internal_has_i8()) {
    return _impl_.value_.i8_;
  }
  return 0;
}
inline void PrimitiveValue::_internal_set_i8(int32_t value) {
  if (!_internal_has_i8()) {
    clear_value();
    set_has_i8();
  }
  _impl_.value_.i8_ = value;
}
inline int32_t PrimitiveValue::i8() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.i8)
  return _internal_i8();
}
inline void PrimitiveValue::set_i8(int32_t value) {
  _internal_set_i8(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.i8)
}

// int32 i16 = 6;
inline bool PrimitiveValue::_internal_has_i16() const {
  return value_case() == kI16;
}
inline bool PrimitiveValue::has_i16() const {
  return _internal_has_i16();
}
inline void PrimitiveValue::set_has_i16() {
  _impl_._oneof_case_[0] = kI16;
}
inline void PrimitiveValue::clear_i16() {
  if (_internal_has_i16()) {
    _impl_.value_.i16_ = 0;
    clear_has_value();
  }
}
inline int32_t PrimitiveValue::_internal_i16() const {
  if (_internal_has_i16()) {
    return _impl_.value_.i16_;
  }
  return 0;
}
inline void PrimitiveValue::_internal_set_i16(int32_t value) {
  if (!_internal_has_i16()) {
    clear_value();
    set_has_i16();
  }
  _impl_.value_.i16_ = value;
}
inline int32_t PrimitiveValue::i16() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.i16)
  return _internal_i16();
}
inline void PrimitiveValue::set_i16(int32_t value) {
  _internal_set_i16(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.i16)
}

// int32 i32 = 7;
inline bool PrimitiveValue::_internal_has_i32() const {
  return value_case() == kI32;
}
inline bool PrimitiveValue::has_i32() const {
  return _internal_has_i32();
}
inline void PrimitiveValue::set_has_i32() {
  _impl_._oneof_case_[0] = kI32;
}
inline void PrimitiveValue::clear_i32() {
  if (_internal_has_i32()) {
    _impl_.value_.i32_ = 0;
    clear_has_value();
  }
}
inline int32_t PrimitiveValue::_internal_i32() const {
  if (_internal_has_i32()) {
    return _impl_.value_.i32_;
  }
  return 0;
}
inline void PrimitiveValue::_internal_set_i32(int32_t value) {
  if (!_internal_has_i32()) {
    clear_value();
    set_has_i32();
  }
  _impl_.value_.i32_ = value;
}
inline int32_t PrimitiveValue::i32() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.i32)
  return _internal_i32();
}
inline void PrimitiveValue::set_i32(int32_t value) {
  _internal_set_i32(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.i32)
}

// int64 i64 = 8;
inline bool PrimitiveValue::_internal_has_i64() const {
  return value_case() == kI64;
}
inline bool PrimitiveValue::has_i64() const {
  return _internal_has_i64();
}
inline void PrimitiveValue::set_has_i64() {
  _impl_._oneof_case_[0] = kI64;
}
inline void PrimitiveValue::clear_i64() {
  if (_internal_has_i64()) {
    _impl_.value_.i64_ = int64_t{0};
    clear_has_value();
  }
}
inline int64_t PrimitiveValue::_internal_i64() const {
  if (_internal_has_i64()) {
    return _impl_.value_.i64_;
  }
  return int64_t{0};
}
inline void PrimitiveValue::_internal_set_i64(int64_t value) {
  if (!_internal_has_i64()) {
    clear_value();
    set_has_i64();
  }
  _impl_.value_.i64_ = value;
}
inline int64_t PrimitiveValue::i64() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.i64)
  return _internal_i64();
}
inline void PrimitiveValue::set_i64(int64_t value) {
  _internal_set_i64(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.i64)
}

// float f32 = 9;
inline bool PrimitiveValue::_internal_has_f32() const {
  return value_case() == kF32;
}
inline bool PrimitiveValue::has_f32() const {
  return _internal_has_f32();
}
inline void PrimitiveValue::set_has_f32() {
  _impl_._oneof_case_[0] = kF32;
}
inline void PrimitiveValue::clear_f32() {
  if (_internal_has_f32()) {
    _impl_.value_.f32_ = 0;
    clear_has_value();
  }
}
inline float PrimitiveValue::_internal_f32() const {
  if (_internal_has_f32()) {
    return _impl_.value_.f32_;
  }
  return 0;
}
inline void PrimitiveValue::_internal_set_f32(float value) {
  if (!_internal_has_f32()) {
    clear_value();
    set_has_f32();
  }
  _impl_.value_.f32_ = value;
}
inline float PrimitiveValue::f32() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.f32)
  return _internal_f32();
}
inline void PrimitiveValue::set_f32(float value) {
  _internal_set_f32(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.f32)
}

// double f64 = 10;
inline bool PrimitiveValue::_internal_has_f64() const {
  return value_case() == kF64;
}
inline bool PrimitiveValue::has_f64() const {
  return _internal_has_f64();
}
inline void PrimitiveValue::set_has_f64() {
  _impl_._oneof_case_[0] = kF64;
}
inline void PrimitiveValue::clear_f64() {
  if (_internal_has_f64()) {
    _impl_.value_.f64_ = 0;
    clear_has_value();
  }
}
inline double PrimitiveValue::_internal_f64() const {
  if (_internal_has_f64()) {
    return _impl_.value_.f64_;
  }
  return 0;
}
inline void PrimitiveValue::_internal_set_f64(double value) {
  if (!_internal_has_f64()) {
    clear_value();
    set_has_f64();
  }
  _impl_.value_.f64_ = value;
}
inline double PrimitiveValue::f64() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.f64)
  return _internal_f64();
}
inline void PrimitiveValue::set_f64(double value) {
  _internal_set_f64(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.f64)
}

// bool bool = 11;
inline bool PrimitiveValue::_internal_has_bool_() const {
  return value_case() == kBool;
}
inline bool PrimitiveValue::has_bool_() const {
  return _internal_has_bool_();
}
inline void PrimitiveValue::set_has_bool_() {
  _impl_._oneof_case_[0] = kBool;
}
inline void PrimitiveValue::clear_bool_() {
  if (_internal_has_bool_()) {
    _impl_.value_.bool__ = false;
    clear_has_value();
  }
}
inline bool PrimitiveValue::_internal_bool_() const {
  if (_internal_has_bool_()) {
    return _impl_.value_.bool__;
  }
  return false;
}
inline void PrimitiveValue::_internal_set_bool_(bool value) {
  if (!_internal_has_bool_()) {
    clear_value();
    set_has_bool_();
  }
  _impl_.value_.bool__ = value;
}
inline bool PrimitiveValue::bool_() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.bool)
  return _internal_bool_();
}
inline void PrimitiveValue::set_bool_(bool value) {
  _internal_set_bool_(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.bool)
}

// string str = 12;
inline bool PrimitiveValue::_internal_has_str() const {
  return value_case() == kStr;
}
inline bool PrimitiveValue::has_str() const {
  return _internal_has_str();
}
inline void PrimitiveValue::set_has_str() {
  _impl_._oneof_case_[0] = kStr;
}
inline void PrimitiveValue::clear_str() {
  if (_internal_has_str()) {
    _impl_.value_.str_.Destroy();
    clear_has_value();
  }
}
inline const std::string& PrimitiveValue::str() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.str)
  return _internal_str();
}
template <typename ArgT0, typename... ArgT>
inline void PrimitiveValue::set_str(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_str()) {
    clear_value();
    set_has_str();
    _impl_.value_.str_.InitDefault();
  }
  _impl_.value_.str_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PicachvMessages.PrimitiveValue.str)
}
inline std::string* PrimitiveValue::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.PrimitiveValue.str)
  return _s;
}
inline const std::string& PrimitiveValue::_internal_str() const {
  if (_internal_has_str()) {
    return _impl_.value_.str_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PrimitiveValue::_internal_set_str(const std::string& value) {
  if (!_internal_has_str()) {
    clear_value();
    set_has_str();
    _impl_.value_.str_.InitDefault();
  }
  _impl_.value_.str_.Set(value, GetArenaForAllocation());
}
inline std::string* PrimitiveValue::_internal_mutable_str() {
  if (!_internal_has_str()) {
    clear_value();
    set_has_str();
    _impl_.value_.str_.InitDefault();
  }
  return _impl_.value_.str_.Mutable(      GetArenaForAllocation());
}
inline std::string* PrimitiveValue::release_str() {
  // @@protoc_insertion_point(field_release:PicachvMessages.PrimitiveValue.str)
  if (_internal_has_str()) {
    clear_has_value();
    return _impl_.value_.str_.Release();
  } else {
    return nullptr;
  }
}
inline void PrimitiveValue::set_allocated_str(std::string* str) {
  if (has_value()) {
    clear_value();
  }
  if (str != nullptr) {
    set_has_str();
    _impl_.value_.str_.InitAllocated(str, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:PicachvMessages.PrimitiveValue.str)
}

// .PicachvMessages.PrimitiveValue.Duration duration = 13;
inline bool PrimitiveValue::_internal_has_duration() const {
  return value_case() == kDuration;
}
inline bool PrimitiveValue::has_duration() const {
  return _internal_has_duration();
}
inline void PrimitiveValue::set_has_duration() {
  _impl_._oneof_case_[0] = kDuration;
}
inline void PrimitiveValue::clear_duration() {
  if (_internal_has_duration()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.duration_;
    }
    clear_has_value();
  }
}
inline ::PicachvMessages::PrimitiveValue_Duration* PrimitiveValue::release_duration() {
  // @@protoc_insertion_point(field_release:PicachvMessages.PrimitiveValue.duration)
  if (_internal_has_duration()) {
    clear_has_value();
    ::PicachvMessages::PrimitiveValue_Duration* temp = _impl_.value_.duration_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.value_.duration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PicachvMessages::PrimitiveValue_Duration& PrimitiveValue::_internal_duration() const {
  return _internal_has_duration()
      ? *_impl_.value_.duration_
      : reinterpret_cast< ::PicachvMessages::PrimitiveValue_Duration&>(::PicachvMessages::_PrimitiveValue_Duration_default_instance_);
}
inline const ::PicachvMessages::PrimitiveValue_Duration& PrimitiveValue::duration() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.PrimitiveValue.duration)
  return _internal_duration();
}
inline ::PicachvMessages::PrimitiveValue_Duration* PrimitiveValue::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PicachvMessages.PrimitiveValue.duration)
  if (_internal_has_duration()) {
    clear_has_value();
    ::PicachvMessages::PrimitiveValue_Duration* temp = _impl_.value_.duration_;
    _impl_.value_.duration_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void PrimitiveValue::unsafe_arena_set_allocated_duration(::PicachvMessages::PrimitiveValue_Duration* duration) {
  clear_value();
  if (duration) {
    set_has_duration();
    _impl_.value_.duration_ = duration;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PicachvMessages.PrimitiveValue.duration)
}
inline ::PicachvMessages::PrimitiveValue_Duration* PrimitiveValue::_internal_mutable_duration() {
  if (!_internal_has_duration()) {
    clear_value();
    set_has_duration();
    _impl_.value_.duration_ = CreateMaybeMessage< ::PicachvMessages::PrimitiveValue_Duration >(GetArenaForAllocation());
  }
  return _impl_.value_.duration_;
}
inline ::PicachvMessages::PrimitiveValue_Duration* PrimitiveValue::mutable_duration() {
  ::PicachvMessages::PrimitiveValue_Duration* _msg = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.PrimitiveValue.duration)
  return _msg;
}

inline bool PrimitiveValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void PrimitiveValue::clear_has_value() {
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}
inline PrimitiveValue::ValueCase PrimitiveValue::value_case() const {
  return PrimitiveValue::ValueCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// BinaryOperator

// .PicachvMessages.LogicalBinaryOperator logical_operator = 1;
inline bool BinaryOperator::_internal_has_logical_operator() const {
  return operator_case() == kLogicalOperator;
}
inline bool BinaryOperator::has_logical_operator() const {
  return _internal_has_logical_operator();
}
inline void BinaryOperator::set_has_logical_operator() {
  _impl_._oneof_case_[0] = kLogicalOperator;
}
inline void BinaryOperator::clear_logical_operator() {
  if (_internal_has_logical_operator()) {
    _impl_.operator_.logical_operator_ = 0;
    clear_has_operator();
  }
}
inline ::PicachvMessages::LogicalBinaryOperator BinaryOperator::_internal_logical_operator() const {
  if (_internal_has_logical_operator()) {
    return static_cast< ::PicachvMessages::LogicalBinaryOperator >(_impl_.operator_.logical_operator_);
  }
  return static_cast< ::PicachvMessages::LogicalBinaryOperator >(0);
}
inline ::PicachvMessages::LogicalBinaryOperator BinaryOperator::logical_operator() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.BinaryOperator.logical_operator)
  return _internal_logical_operator();
}
inline void BinaryOperator::_internal_set_logical_operator(::PicachvMessages::LogicalBinaryOperator value) {
  if (!_internal_has_logical_operator()) {
    clear_operator();
    set_has_logical_operator();
  }
  _impl_.operator_.logical_operator_ = value;
}
inline void BinaryOperator::set_logical_operator(::PicachvMessages::LogicalBinaryOperator value) {
  _internal_set_logical_operator(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.BinaryOperator.logical_operator)
}

// .PicachvMessages.ComparisonBinaryOperator comparison_operator = 2;
inline bool BinaryOperator::_internal_has_comparison_operator() const {
  return operator_case() == kComparisonOperator;
}
inline bool BinaryOperator::has_comparison_operator() const {
  return _internal_has_comparison_operator();
}
inline void BinaryOperator::set_has_comparison_operator() {
  _impl_._oneof_case_[0] = kComparisonOperator;
}
inline void BinaryOperator::clear_comparison_operator() {
  if (_internal_has_comparison_operator()) {
    _impl_.operator_.comparison_operator_ = 0;
    clear_has_operator();
  }
}
inline ::PicachvMessages::ComparisonBinaryOperator BinaryOperator::_internal_comparison_operator() const {
  if (_internal_has_comparison_operator()) {
    return static_cast< ::PicachvMessages::ComparisonBinaryOperator >(_impl_.operator_.comparison_operator_);
  }
  return static_cast< ::PicachvMessages::ComparisonBinaryOperator >(0);
}
inline ::PicachvMessages::ComparisonBinaryOperator BinaryOperator::comparison_operator() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.BinaryOperator.comparison_operator)
  return _internal_comparison_operator();
}
inline void BinaryOperator::_internal_set_comparison_operator(::PicachvMessages::ComparisonBinaryOperator value) {
  if (!_internal_has_comparison_operator()) {
    clear_operator();
    set_has_comparison_operator();
  }
  _impl_.operator_.comparison_operator_ = value;
}
inline void BinaryOperator::set_comparison_operator(::PicachvMessages::ComparisonBinaryOperator value) {
  _internal_set_comparison_operator(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.BinaryOperator.comparison_operator)
}

// .PicachvMessages.ArithmeticBinaryOperator arithmetic_operator = 3;
inline bool BinaryOperator::_internal_has_arithmetic_operator() const {
  return operator_case() == kArithmeticOperator;
}
inline bool BinaryOperator::has_arithmetic_operator() const {
  return _internal_has_arithmetic_operator();
}
inline void BinaryOperator::set_has_arithmetic_operator() {
  _impl_._oneof_case_[0] = kArithmeticOperator;
}
inline void BinaryOperator::clear_arithmetic_operator() {
  if (_internal_has_arithmetic_operator()) {
    _impl_.operator_.arithmetic_operator_ = 0;
    clear_has_operator();
  }
}
inline ::PicachvMessages::ArithmeticBinaryOperator BinaryOperator::_internal_arithmetic_operator() const {
  if (_internal_has_arithmetic_operator()) {
    return static_cast< ::PicachvMessages::ArithmeticBinaryOperator >(_impl_.operator_.arithmetic_operator_);
  }
  return static_cast< ::PicachvMessages::ArithmeticBinaryOperator >(0);
}
inline ::PicachvMessages::ArithmeticBinaryOperator BinaryOperator::arithmetic_operator() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.BinaryOperator.arithmetic_operator)
  return _internal_arithmetic_operator();
}
inline void BinaryOperator::_internal_set_arithmetic_operator(::PicachvMessages::ArithmeticBinaryOperator value) {
  if (!_internal_has_arithmetic_operator()) {
    clear_operator();
    set_has_arithmetic_operator();
  }
  _impl_.operator_.arithmetic_operator_ = value;
}
inline void BinaryOperator::set_arithmetic_operator(::PicachvMessages::ArithmeticBinaryOperator value) {
  _internal_set_arithmetic_operator(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.BinaryOperator.arithmetic_operator)
}

inline bool BinaryOperator::has_operator() const {
  return operator_case() != OPERATOR_NOT_SET;
}
inline void BinaryOperator::clear_has_operator() {
  _impl_._oneof_case_[0] = OPERATOR_NOT_SET;
}
inline BinaryOperator::OperatorCase BinaryOperator::operator_case() const {
  return BinaryOperator::OperatorCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PicachvMessages

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PicachvMessages::FileType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PicachvMessages::FileType>() {
  return ::PicachvMessages::FileType_descriptor();
}
template <> struct is_proto_enum< ::PicachvMessages::JoinType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PicachvMessages::JoinType>() {
  return ::PicachvMessages::JoinType_descriptor();
}
template <> struct is_proto_enum< ::PicachvMessages::LogicalPlanType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PicachvMessages::LogicalPlanType>() {
  return ::PicachvMessages::LogicalPlanType_descriptor();
}
template <> struct is_proto_enum< ::PicachvMessages::LogicalBinaryOperator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PicachvMessages::LogicalBinaryOperator>() {
  return ::PicachvMessages::LogicalBinaryOperator_descriptor();
}
template <> struct is_proto_enum< ::PicachvMessages::ComparisonBinaryOperator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PicachvMessages::ComparisonBinaryOperator>() {
  return ::PicachvMessages::ComparisonBinaryOperator_descriptor();
}
template <> struct is_proto_enum< ::PicachvMessages::ArithmeticBinaryOperator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PicachvMessages::ArithmeticBinaryOperator>() {
  return ::PicachvMessages::ArithmeticBinaryOperator_descriptor();
}
template <> struct is_proto_enum< ::PicachvMessages::UnaryOperator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PicachvMessages::UnaryOperator>() {
  return ::PicachvMessages::UnaryOperator_descriptor();
}
template <> struct is_proto_enum< ::PicachvMessages::GroupByMethod> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PicachvMessages::GroupByMethod>() {
  return ::PicachvMessages::GroupByMethod_descriptor();
}
template <> struct is_proto_enum< ::PicachvMessages::ExprType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PicachvMessages::ExprType>() {
  return ::PicachvMessages::ExprType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_basic_2eproto
