// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transform.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transform_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transform_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transform_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transform_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transform_2eproto;
namespace PicachvMessages {
class FilterInformation;
struct FilterInformationDefaultTypeInternal;
extern FilterInformationDefaultTypeInternal _FilterInformation_default_instance_;
class GroupByInformation;
struct GroupByInformationDefaultTypeInternal;
extern GroupByInformationDefaultTypeInternal _GroupByInformation_default_instance_;
class GroupByInformation_GroupByEntry_DoNotUse;
struct GroupByInformation_GroupByEntry_DoNotUseDefaultTypeInternal;
extern GroupByInformation_GroupByEntry_DoNotUseDefaultTypeInternal _GroupByInformation_GroupByEntry_DoNotUse_default_instance_;
class JoinInformation;
struct JoinInformationDefaultTypeInternal;
extern JoinInformationDefaultTypeInternal _JoinInformation_default_instance_;
class RenamingInformation;
struct RenamingInformationDefaultTypeInternal;
extern RenamingInformationDefaultTypeInternal _RenamingInformation_default_instance_;
class ReorderInformation;
struct ReorderInformationDefaultTypeInternal;
extern ReorderInformationDefaultTypeInternal _ReorderInformation_default_instance_;
class RowJoinInformation;
struct RowJoinInformationDefaultTypeInternal;
extern RowJoinInformationDefaultTypeInternal _RowJoinInformation_default_instance_;
class TransformInfo;
struct TransformInfoDefaultTypeInternal;
extern TransformInfoDefaultTypeInternal _TransformInfo_default_instance_;
class UnionInformation;
struct UnionInformationDefaultTypeInternal;
extern UnionInformationDefaultTypeInternal _UnionInformation_default_instance_;
}  // namespace PicachvMessages
PROTOBUF_NAMESPACE_OPEN
template<> ::PicachvMessages::FilterInformation* Arena::CreateMaybeMessage<::PicachvMessages::FilterInformation>(Arena*);
template<> ::PicachvMessages::GroupByInformation* Arena::CreateMaybeMessage<::PicachvMessages::GroupByInformation>(Arena*);
template<> ::PicachvMessages::GroupByInformation_GroupByEntry_DoNotUse* Arena::CreateMaybeMessage<::PicachvMessages::GroupByInformation_GroupByEntry_DoNotUse>(Arena*);
template<> ::PicachvMessages::JoinInformation* Arena::CreateMaybeMessage<::PicachvMessages::JoinInformation>(Arena*);
template<> ::PicachvMessages::RenamingInformation* Arena::CreateMaybeMessage<::PicachvMessages::RenamingInformation>(Arena*);
template<> ::PicachvMessages::ReorderInformation* Arena::CreateMaybeMessage<::PicachvMessages::ReorderInformation>(Arena*);
template<> ::PicachvMessages::RowJoinInformation* Arena::CreateMaybeMessage<::PicachvMessages::RowJoinInformation>(Arena*);
template<> ::PicachvMessages::TransformInfo* Arena::CreateMaybeMessage<::PicachvMessages::TransformInfo>(Arena*);
template<> ::PicachvMessages::UnionInformation* Arena::CreateMaybeMessage<::PicachvMessages::UnionInformation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace PicachvMessages {

// ===================================================================

class FilterInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.FilterInformation) */ {
 public:
  inline FilterInformation() : FilterInformation(nullptr) {}
  ~FilterInformation() override;
  explicit PROTOBUF_CONSTEXPR FilterInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FilterInformation(const FilterInformation& from);
  FilterInformation(FilterInformation&& from) noexcept
    : FilterInformation() {
    *this = ::std::move(from);
  }

  inline FilterInformation& operator=(const FilterInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline FilterInformation& operator=(FilterInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FilterInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const FilterInformation* internal_default_instance() {
    return reinterpret_cast<const FilterInformation*>(
               &_FilterInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FilterInformation& a, FilterInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(FilterInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FilterInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FilterInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FilterInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FilterInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FilterInformation& from) {
    FilterInformation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FilterInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.FilterInformation";
  }
  protected:
  explicit FilterInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 1,
  };
  // repeated bool filter = 1;
  int filter_size() const;
  private:
  int _internal_filter_size() const;
  public:
  void clear_filter();
  private:
  bool _internal_filter(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_filter() const;
  void _internal_add_filter(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_filter();
  public:
  bool filter(int index) const;
  void set_filter(int index, bool value);
  void add_filter(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_filter();

  // @@protoc_insertion_point(class_scope:PicachvMessages.FilterInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > filter_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class RowJoinInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.RowJoinInformation) */ {
 public:
  inline RowJoinInformation() : RowJoinInformation(nullptr) {}
  ~RowJoinInformation() override;
  explicit PROTOBUF_CONSTEXPR RowJoinInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RowJoinInformation(const RowJoinInformation& from);
  RowJoinInformation(RowJoinInformation&& from) noexcept
    : RowJoinInformation() {
    *this = ::std::move(from);
  }

  inline RowJoinInformation& operator=(const RowJoinInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline RowJoinInformation& operator=(RowJoinInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RowJoinInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const RowJoinInformation* internal_default_instance() {
    return reinterpret_cast<const RowJoinInformation*>(
               &_RowJoinInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RowJoinInformation& a, RowJoinInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(RowJoinInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RowJoinInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RowJoinInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RowJoinInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RowJoinInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RowJoinInformation& from) {
    RowJoinInformation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RowJoinInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.RowJoinInformation";
  }
  protected:
  explicit RowJoinInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftRowFieldNumber = 1,
    kRightRowFieldNumber = 2,
  };
  // uint64 left_row = 1;
  void clear_left_row();
  uint64_t left_row() const;
  void set_left_row(uint64_t value);
  private:
  uint64_t _internal_left_row() const;
  void _internal_set_left_row(uint64_t value);
  public:

  // uint64 right_row = 2;
  void clear_right_row();
  uint64_t right_row() const;
  void set_right_row(uint64_t value);
  private:
  uint64_t _internal_right_row() const;
  void _internal_set_right_row(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:PicachvMessages.RowJoinInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t left_row_;
    uint64_t right_row_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class RenamingInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.RenamingInformation) */ {
 public:
  inline RenamingInformation() : RenamingInformation(nullptr) {}
  ~RenamingInformation() override;
  explicit PROTOBUF_CONSTEXPR RenamingInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenamingInformation(const RenamingInformation& from);
  RenamingInformation(RenamingInformation&& from) noexcept
    : RenamingInformation() {
    *this = ::std::move(from);
  }

  inline RenamingInformation& operator=(const RenamingInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenamingInformation& operator=(RenamingInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RenamingInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenamingInformation* internal_default_instance() {
    return reinterpret_cast<const RenamingInformation*>(
               &_RenamingInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RenamingInformation& a, RenamingInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(RenamingInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenamingInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RenamingInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RenamingInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RenamingInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const RenamingInformation& from) {
    RenamingInformation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenamingInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.RenamingInformation";
  }
  protected:
  explicit RenamingInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOldNameFieldNumber = 1,
    kNewNameFieldNumber = 2,
  };
  // string old_name = 1;
  void clear_old_name();
  const std::string& old_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_old_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_old_name();
  PROTOBUF_NODISCARD std::string* release_old_name();
  void set_allocated_old_name(std::string* old_name);
  private:
  const std::string& _internal_old_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_old_name(const std::string& value);
  std::string* _internal_mutable_old_name();
  public:

  // string new_name = 2;
  void clear_new_name();
  const std::string& new_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_new_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_new_name();
  PROTOBUF_NODISCARD std::string* release_new_name();
  void set_allocated_new_name(std::string* new_name);
  private:
  const std::string& _internal_new_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_new_name(const std::string& value);
  std::string* _internal_mutable_new_name();
  public:

  // @@protoc_insertion_point(class_scope:PicachvMessages.RenamingInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr old_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr new_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class JoinInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.JoinInformation) */ {
 public:
  inline JoinInformation() : JoinInformation(nullptr) {}
  ~JoinInformation() override;
  explicit PROTOBUF_CONSTEXPR JoinInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JoinInformation(const JoinInformation& from);
  JoinInformation(JoinInformation&& from) noexcept
    : JoinInformation() {
    *this = ::std::move(from);
  }

  inline JoinInformation& operator=(const JoinInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline JoinInformation& operator=(JoinInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JoinInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const JoinInformation* internal_default_instance() {
    return reinterpret_cast<const JoinInformation*>(
               &_JoinInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(JoinInformation& a, JoinInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(JoinInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JoinInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JoinInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JoinInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JoinInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JoinInformation& from) {
    JoinInformation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JoinInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.JoinInformation";
  }
  protected:
  explicit JoinInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowJoinInfoFieldNumber = 3,
    kLeftColumnsFieldNumber = 4,
    kRightColumnsFieldNumber = 5,
    kRenamingInfoFieldNumber = 6,
    kLhsDfUuidFieldNumber = 1,
    kRhsDfUuidFieldNumber = 2,
  };
  // repeated .PicachvMessages.RowJoinInformation row_join_info = 3;
  int row_join_info_size() const;
  private:
  int _internal_row_join_info_size() const;
  public:
  void clear_row_join_info();
  ::PicachvMessages::RowJoinInformation* mutable_row_join_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PicachvMessages::RowJoinInformation >*
      mutable_row_join_info();
  private:
  const ::PicachvMessages::RowJoinInformation& _internal_row_join_info(int index) const;
  ::PicachvMessages::RowJoinInformation* _internal_add_row_join_info();
  public:
  const ::PicachvMessages::RowJoinInformation& row_join_info(int index) const;
  ::PicachvMessages::RowJoinInformation* add_row_join_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PicachvMessages::RowJoinInformation >&
      row_join_info() const;

  // repeated uint64 left_columns = 4;
  int left_columns_size() const;
  private:
  int _internal_left_columns_size() const;
  public:
  void clear_left_columns();
  private:
  uint64_t _internal_left_columns(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_left_columns() const;
  void _internal_add_left_columns(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_left_columns();
  public:
  uint64_t left_columns(int index) const;
  void set_left_columns(int index, uint64_t value);
  void add_left_columns(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      left_columns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_left_columns();

  // repeated uint64 right_columns = 5;
  int right_columns_size() const;
  private:
  int _internal_right_columns_size() const;
  public:
  void clear_right_columns();
  private:
  uint64_t _internal_right_columns(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_right_columns() const;
  void _internal_add_right_columns(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_right_columns();
  public:
  uint64_t right_columns(int index) const;
  void set_right_columns(int index, uint64_t value);
  void add_right_columns(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      right_columns() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_right_columns();

  // repeated .PicachvMessages.RenamingInformation renaming_info = 6;
  int renaming_info_size() const;
  private:
  int _internal_renaming_info_size() const;
  public:
  void clear_renaming_info();
  ::PicachvMessages::RenamingInformation* mutable_renaming_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PicachvMessages::RenamingInformation >*
      mutable_renaming_info();
  private:
  const ::PicachvMessages::RenamingInformation& _internal_renaming_info(int index) const;
  ::PicachvMessages::RenamingInformation* _internal_add_renaming_info();
  public:
  const ::PicachvMessages::RenamingInformation& renaming_info(int index) const;
  ::PicachvMessages::RenamingInformation* add_renaming_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PicachvMessages::RenamingInformation >&
      renaming_info() const;

  // bytes lhs_df_uuid = 1;
  void clear_lhs_df_uuid();
  const std::string& lhs_df_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lhs_df_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lhs_df_uuid();
  PROTOBUF_NODISCARD std::string* release_lhs_df_uuid();
  void set_allocated_lhs_df_uuid(std::string* lhs_df_uuid);
  private:
  const std::string& _internal_lhs_df_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lhs_df_uuid(const std::string& value);
  std::string* _internal_mutable_lhs_df_uuid();
  public:

  // bytes rhs_df_uuid = 2;
  void clear_rhs_df_uuid();
  const std::string& rhs_df_uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rhs_df_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rhs_df_uuid();
  PROTOBUF_NODISCARD std::string* release_rhs_df_uuid();
  void set_allocated_rhs_df_uuid(std::string* rhs_df_uuid);
  private:
  const std::string& _internal_rhs_df_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rhs_df_uuid(const std::string& value);
  std::string* _internal_mutable_rhs_df_uuid();
  public:

  // @@protoc_insertion_point(class_scope:PicachvMessages.JoinInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PicachvMessages::RowJoinInformation > row_join_info_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > left_columns_;
    mutable std::atomic<int> _left_columns_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > right_columns_;
    mutable std::atomic<int> _right_columns_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PicachvMessages::RenamingInformation > renaming_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lhs_df_uuid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rhs_df_uuid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class GroupByInformation_GroupByEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GroupByInformation_GroupByEntry_DoNotUse, 
    uint64_t, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<GroupByInformation_GroupByEntry_DoNotUse, 
    uint64_t, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> SuperType;
  GroupByInformation_GroupByEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR GroupByInformation_GroupByEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit GroupByInformation_GroupByEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const GroupByInformation_GroupByEntry_DoNotUse& other);
  static const GroupByInformation_GroupByEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const GroupByInformation_GroupByEntry_DoNotUse*>(&_GroupByInformation_GroupByEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_transform_2eproto;
};

// -------------------------------------------------------------------

class GroupByInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.GroupByInformation) */ {
 public:
  inline GroupByInformation() : GroupByInformation(nullptr) {}
  ~GroupByInformation() override;
  explicit PROTOBUF_CONSTEXPR GroupByInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GroupByInformation(const GroupByInformation& from);
  GroupByInformation(GroupByInformation&& from) noexcept
    : GroupByInformation() {
    *this = ::std::move(from);
  }

  inline GroupByInformation& operator=(const GroupByInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline GroupByInformation& operator=(GroupByInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GroupByInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const GroupByInformation* internal_default_instance() {
    return reinterpret_cast<const GroupByInformation*>(
               &_GroupByInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GroupByInformation& a, GroupByInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(GroupByInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GroupByInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GroupByInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GroupByInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GroupByInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GroupByInformation& from) {
    GroupByInformation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GroupByInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.GroupByInformation";
  }
  protected:
  explicit GroupByInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kGroupByFieldNumber = 1,
  };
  // map<uint64, uint64> group_by = 1;
  int group_by_size() const;
  private:
  int _internal_group_by_size() const;
  public:
  void clear_group_by();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >&
      _internal_group_by() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >*
      _internal_mutable_group_by();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >&
      group_by() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >*
      mutable_group_by();

  // @@protoc_insertion_point(class_scope:PicachvMessages.GroupByInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        GroupByInformation_GroupByEntry_DoNotUse,
        uint64_t, uint64_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> group_by_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class UnionInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.UnionInformation) */ {
 public:
  inline UnionInformation() : UnionInformation(nullptr) {}
  ~UnionInformation() override;
  explicit PROTOBUF_CONSTEXPR UnionInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnionInformation(const UnionInformation& from);
  UnionInformation(UnionInformation&& from) noexcept
    : UnionInformation() {
    *this = ::std::move(from);
  }

  inline UnionInformation& operator=(const UnionInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnionInformation& operator=(UnionInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UnionInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnionInformation* internal_default_instance() {
    return reinterpret_cast<const UnionInformation*>(
               &_UnionInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UnionInformation& a, UnionInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(UnionInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnionInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnionInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnionInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UnionInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UnionInformation& from) {
    UnionInformation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnionInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.UnionInformation";
  }
  protected:
  explicit UnionInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDfUuidsFieldNumber = 1,
  };
  // repeated bytes df_uuids = 1;
  int df_uuids_size() const;
  private:
  int _internal_df_uuids_size() const;
  public:
  void clear_df_uuids();
  const std::string& df_uuids(int index) const;
  std::string* mutable_df_uuids(int index);
  void set_df_uuids(int index, const std::string& value);
  void set_df_uuids(int index, std::string&& value);
  void set_df_uuids(int index, const char* value);
  void set_df_uuids(int index, const void* value, size_t size);
  std::string* add_df_uuids();
  void add_df_uuids(const std::string& value);
  void add_df_uuids(std::string&& value);
  void add_df_uuids(const char* value);
  void add_df_uuids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& df_uuids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_df_uuids();
  private:
  const std::string& _internal_df_uuids(int index) const;
  std::string* _internal_add_df_uuids();
  public:

  // @@protoc_insertion_point(class_scope:PicachvMessages.UnionInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> df_uuids_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class ReorderInformation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.ReorderInformation) */ {
 public:
  inline ReorderInformation() : ReorderInformation(nullptr) {}
  ~ReorderInformation() override;
  explicit PROTOBUF_CONSTEXPR ReorderInformation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReorderInformation(const ReorderInformation& from);
  ReorderInformation(ReorderInformation&& from) noexcept
    : ReorderInformation() {
    *this = ::std::move(from);
  }

  inline ReorderInformation& operator=(const ReorderInformation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReorderInformation& operator=(ReorderInformation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReorderInformation& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReorderInformation* internal_default_instance() {
    return reinterpret_cast<const ReorderInformation*>(
               &_ReorderInformation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReorderInformation& a, ReorderInformation& b) {
    a.Swap(&b);
  }
  inline void Swap(ReorderInformation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReorderInformation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReorderInformation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReorderInformation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReorderInformation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ReorderInformation& from) {
    ReorderInformation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReorderInformation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.ReorderInformation";
  }
  protected:
  explicit ReorderInformation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermFieldNumber = 1,
  };
  // repeated uint64 perm = 1;
  int perm_size() const;
  private:
  int _internal_perm_size() const;
  public:
  void clear_perm();
  private:
  uint64_t _internal_perm(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_perm() const;
  void _internal_add_perm(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_perm();
  public:
  uint64_t perm(int index) const;
  void set_perm(int index, uint64_t value);
  void add_perm(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      perm() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_perm();

  // @@protoc_insertion_point(class_scope:PicachvMessages.ReorderInformation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > perm_;
    mutable std::atomic<int> _perm_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transform_2eproto;
};
// -------------------------------------------------------------------

class TransformInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PicachvMessages.TransformInfo) */ {
 public:
  inline TransformInfo() : TransformInfo(nullptr) {}
  ~TransformInfo() override;
  explicit PROTOBUF_CONSTEXPR TransformInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformInfo(const TransformInfo& from);
  TransformInfo(TransformInfo&& from) noexcept
    : TransformInfo() {
    *this = ::std::move(from);
  }

  inline TransformInfo& operator=(const TransformInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformInfo& operator=(TransformInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformInfo& default_instance() {
    return *internal_default_instance();
  }
  enum InformationCase {
    kFilter = 1,
    kJoin = 2,
    kGroupBy = 3,
    kReorder = 4,
    kUnion = 5,
    INFORMATION_NOT_SET = 0,
  };

  static inline const TransformInfo* internal_default_instance() {
    return reinterpret_cast<const TransformInfo*>(
               &_TransformInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TransformInfo& a, TransformInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TransformInfo& from) {
    TransformInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PicachvMessages.TransformInfo";
  }
  protected:
  explicit TransformInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 1,
    kJoinFieldNumber = 2,
    kGroupByFieldNumber = 3,
    kReorderFieldNumber = 4,
    kUnionFieldNumber = 5,
  };
  // .PicachvMessages.FilterInformation filter = 1;
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::PicachvMessages::FilterInformation& filter() const;
  PROTOBUF_NODISCARD ::PicachvMessages::FilterInformation* release_filter();
  ::PicachvMessages::FilterInformation* mutable_filter();
  void set_allocated_filter(::PicachvMessages::FilterInformation* filter);
  private:
  const ::PicachvMessages::FilterInformation& _internal_filter() const;
  ::PicachvMessages::FilterInformation* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::PicachvMessages::FilterInformation* filter);
  ::PicachvMessages::FilterInformation* unsafe_arena_release_filter();

  // .PicachvMessages.JoinInformation join = 2;
  bool has_join() const;
  private:
  bool _internal_has_join() const;
  public:
  void clear_join();
  const ::PicachvMessages::JoinInformation& join() const;
  PROTOBUF_NODISCARD ::PicachvMessages::JoinInformation* release_join();
  ::PicachvMessages::JoinInformation* mutable_join();
  void set_allocated_join(::PicachvMessages::JoinInformation* join);
  private:
  const ::PicachvMessages::JoinInformation& _internal_join() const;
  ::PicachvMessages::JoinInformation* _internal_mutable_join();
  public:
  void unsafe_arena_set_allocated_join(
      ::PicachvMessages::JoinInformation* join);
  ::PicachvMessages::JoinInformation* unsafe_arena_release_join();

  // .PicachvMessages.GroupByInformation group_by = 3;
  bool has_group_by() const;
  private:
  bool _internal_has_group_by() const;
  public:
  void clear_group_by();
  const ::PicachvMessages::GroupByInformation& group_by() const;
  PROTOBUF_NODISCARD ::PicachvMessages::GroupByInformation* release_group_by();
  ::PicachvMessages::GroupByInformation* mutable_group_by();
  void set_allocated_group_by(::PicachvMessages::GroupByInformation* group_by);
  private:
  const ::PicachvMessages::GroupByInformation& _internal_group_by() const;
  ::PicachvMessages::GroupByInformation* _internal_mutable_group_by();
  public:
  void unsafe_arena_set_allocated_group_by(
      ::PicachvMessages::GroupByInformation* group_by);
  ::PicachvMessages::GroupByInformation* unsafe_arena_release_group_by();

  // .PicachvMessages.ReorderInformation reorder = 4;
  bool has_reorder() const;
  private:
  bool _internal_has_reorder() const;
  public:
  void clear_reorder();
  const ::PicachvMessages::ReorderInformation& reorder() const;
  PROTOBUF_NODISCARD ::PicachvMessages::ReorderInformation* release_reorder();
  ::PicachvMessages::ReorderInformation* mutable_reorder();
  void set_allocated_reorder(::PicachvMessages::ReorderInformation* reorder);
  private:
  const ::PicachvMessages::ReorderInformation& _internal_reorder() const;
  ::PicachvMessages::ReorderInformation* _internal_mutable_reorder();
  public:
  void unsafe_arena_set_allocated_reorder(
      ::PicachvMessages::ReorderInformation* reorder);
  ::PicachvMessages::ReorderInformation* unsafe_arena_release_reorder();

  // .PicachvMessages.UnionInformation union = 5;
  bool has_union_() const;
  private:
  bool _internal_has_union_() const;
  public:
  void clear_union_();
  const ::PicachvMessages::UnionInformation& union_() const;
  PROTOBUF_NODISCARD ::PicachvMessages::UnionInformation* release_union_();
  ::PicachvMessages::UnionInformation* mutable_union_();
  void set_allocated_union_(::PicachvMessages::UnionInformation* union_);
  private:
  const ::PicachvMessages::UnionInformation& _internal_union_() const;
  ::PicachvMessages::UnionInformation* _internal_mutable_union_();
  public:
  void unsafe_arena_set_allocated_union_(
      ::PicachvMessages::UnionInformation* union_);
  ::PicachvMessages::UnionInformation* unsafe_arena_release_union_();

  void clear_information();
  InformationCase information_case() const;
  // @@protoc_insertion_point(class_scope:PicachvMessages.TransformInfo)
 private:
  class _Internal;
  void set_has_filter();
  void set_has_join();
  void set_has_group_by();
  void set_has_reorder();
  void set_has_union_();

  inline bool has_information() const;
  inline void clear_has_information();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    union InformationUnion {
      constexpr InformationUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PicachvMessages::FilterInformation* filter_;
      ::PicachvMessages::JoinInformation* join_;
      ::PicachvMessages::GroupByInformation* group_by_;
      ::PicachvMessages::ReorderInformation* reorder_;
      ::PicachvMessages::UnionInformation* union__;
    } information_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_transform_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FilterInformation

// repeated bool filter = 1;
inline int FilterInformation::_internal_filter_size() const {
  return _impl_.filter_.size();
}
inline int FilterInformation::filter_size() const {
  return _internal_filter_size();
}
inline void FilterInformation::clear_filter() {
  _impl_.filter_.Clear();
}
inline bool FilterInformation::_internal_filter(int index) const {
  return _impl_.filter_.Get(index);
}
inline bool FilterInformation::filter(int index) const {
  // @@protoc_insertion_point(field_get:PicachvMessages.FilterInformation.filter)
  return _internal_filter(index);
}
inline void FilterInformation::set_filter(int index, bool value) {
  _impl_.filter_.Set(index, value);
  // @@protoc_insertion_point(field_set:PicachvMessages.FilterInformation.filter)
}
inline void FilterInformation::_internal_add_filter(bool value) {
  _impl_.filter_.Add(value);
}
inline void FilterInformation::add_filter(bool value) {
  _internal_add_filter(value);
  // @@protoc_insertion_point(field_add:PicachvMessages.FilterInformation.filter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
FilterInformation::_internal_filter() const {
  return _impl_.filter_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
FilterInformation::filter() const {
  // @@protoc_insertion_point(field_list:PicachvMessages.FilterInformation.filter)
  return _internal_filter();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
FilterInformation::_internal_mutable_filter() {
  return &_impl_.filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
FilterInformation::mutable_filter() {
  // @@protoc_insertion_point(field_mutable_list:PicachvMessages.FilterInformation.filter)
  return _internal_mutable_filter();
}

// -------------------------------------------------------------------

// RowJoinInformation

// uint64 left_row = 1;
inline void RowJoinInformation::clear_left_row() {
  _impl_.left_row_ = uint64_t{0u};
}
inline uint64_t RowJoinInformation::_internal_left_row() const {
  return _impl_.left_row_;
}
inline uint64_t RowJoinInformation::left_row() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.RowJoinInformation.left_row)
  return _internal_left_row();
}
inline void RowJoinInformation::_internal_set_left_row(uint64_t value) {
  
  _impl_.left_row_ = value;
}
inline void RowJoinInformation::set_left_row(uint64_t value) {
  _internal_set_left_row(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.RowJoinInformation.left_row)
}

// uint64 right_row = 2;
inline void RowJoinInformation::clear_right_row() {
  _impl_.right_row_ = uint64_t{0u};
}
inline uint64_t RowJoinInformation::_internal_right_row() const {
  return _impl_.right_row_;
}
inline uint64_t RowJoinInformation::right_row() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.RowJoinInformation.right_row)
  return _internal_right_row();
}
inline void RowJoinInformation::_internal_set_right_row(uint64_t value) {
  
  _impl_.right_row_ = value;
}
inline void RowJoinInformation::set_right_row(uint64_t value) {
  _internal_set_right_row(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.RowJoinInformation.right_row)
}

// -------------------------------------------------------------------

// RenamingInformation

// string old_name = 1;
inline void RenamingInformation::clear_old_name() {
  _impl_.old_name_.ClearToEmpty();
}
inline const std::string& RenamingInformation::old_name() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.RenamingInformation.old_name)
  return _internal_old_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenamingInformation::set_old_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.old_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PicachvMessages.RenamingInformation.old_name)
}
inline std::string* RenamingInformation::mutable_old_name() {
  std::string* _s = _internal_mutable_old_name();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.RenamingInformation.old_name)
  return _s;
}
inline const std::string& RenamingInformation::_internal_old_name() const {
  return _impl_.old_name_.Get();
}
inline void RenamingInformation::_internal_set_old_name(const std::string& value) {
  
  _impl_.old_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RenamingInformation::_internal_mutable_old_name() {
  
  return _impl_.old_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RenamingInformation::release_old_name() {
  // @@protoc_insertion_point(field_release:PicachvMessages.RenamingInformation.old_name)
  return _impl_.old_name_.Release();
}
inline void RenamingInformation::set_allocated_old_name(std::string* old_name) {
  if (old_name != nullptr) {
    
  } else {
    
  }
  _impl_.old_name_.SetAllocated(old_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.old_name_.IsDefault()) {
    _impl_.old_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PicachvMessages.RenamingInformation.old_name)
}

// string new_name = 2;
inline void RenamingInformation::clear_new_name() {
  _impl_.new_name_.ClearToEmpty();
}
inline const std::string& RenamingInformation::new_name() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.RenamingInformation.new_name)
  return _internal_new_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenamingInformation::set_new_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.new_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PicachvMessages.RenamingInformation.new_name)
}
inline std::string* RenamingInformation::mutable_new_name() {
  std::string* _s = _internal_mutable_new_name();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.RenamingInformation.new_name)
  return _s;
}
inline const std::string& RenamingInformation::_internal_new_name() const {
  return _impl_.new_name_.Get();
}
inline void RenamingInformation::_internal_set_new_name(const std::string& value) {
  
  _impl_.new_name_.Set(value, GetArenaForAllocation());
}
inline std::string* RenamingInformation::_internal_mutable_new_name() {
  
  return _impl_.new_name_.Mutable(GetArenaForAllocation());
}
inline std::string* RenamingInformation::release_new_name() {
  // @@protoc_insertion_point(field_release:PicachvMessages.RenamingInformation.new_name)
  return _impl_.new_name_.Release();
}
inline void RenamingInformation::set_allocated_new_name(std::string* new_name) {
  if (new_name != nullptr) {
    
  } else {
    
  }
  _impl_.new_name_.SetAllocated(new_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.new_name_.IsDefault()) {
    _impl_.new_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PicachvMessages.RenamingInformation.new_name)
}

// -------------------------------------------------------------------

// JoinInformation

// bytes lhs_df_uuid = 1;
inline void JoinInformation::clear_lhs_df_uuid() {
  _impl_.lhs_df_uuid_.ClearToEmpty();
}
inline const std::string& JoinInformation::lhs_df_uuid() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.JoinInformation.lhs_df_uuid)
  return _internal_lhs_df_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinInformation::set_lhs_df_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lhs_df_uuid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PicachvMessages.JoinInformation.lhs_df_uuid)
}
inline std::string* JoinInformation::mutable_lhs_df_uuid() {
  std::string* _s = _internal_mutable_lhs_df_uuid();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.JoinInformation.lhs_df_uuid)
  return _s;
}
inline const std::string& JoinInformation::_internal_lhs_df_uuid() const {
  return _impl_.lhs_df_uuid_.Get();
}
inline void JoinInformation::_internal_set_lhs_df_uuid(const std::string& value) {
  
  _impl_.lhs_df_uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinInformation::_internal_mutable_lhs_df_uuid() {
  
  return _impl_.lhs_df_uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* JoinInformation::release_lhs_df_uuid() {
  // @@protoc_insertion_point(field_release:PicachvMessages.JoinInformation.lhs_df_uuid)
  return _impl_.lhs_df_uuid_.Release();
}
inline void JoinInformation::set_allocated_lhs_df_uuid(std::string* lhs_df_uuid) {
  if (lhs_df_uuid != nullptr) {
    
  } else {
    
  }
  _impl_.lhs_df_uuid_.SetAllocated(lhs_df_uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lhs_df_uuid_.IsDefault()) {
    _impl_.lhs_df_uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PicachvMessages.JoinInformation.lhs_df_uuid)
}

// bytes rhs_df_uuid = 2;
inline void JoinInformation::clear_rhs_df_uuid() {
  _impl_.rhs_df_uuid_.ClearToEmpty();
}
inline const std::string& JoinInformation::rhs_df_uuid() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.JoinInformation.rhs_df_uuid)
  return _internal_rhs_df_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void JoinInformation::set_rhs_df_uuid(ArgT0&& arg0, ArgT... args) {
 
 _impl_.rhs_df_uuid_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:PicachvMessages.JoinInformation.rhs_df_uuid)
}
inline std::string* JoinInformation::mutable_rhs_df_uuid() {
  std::string* _s = _internal_mutable_rhs_df_uuid();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.JoinInformation.rhs_df_uuid)
  return _s;
}
inline const std::string& JoinInformation::_internal_rhs_df_uuid() const {
  return _impl_.rhs_df_uuid_.Get();
}
inline void JoinInformation::_internal_set_rhs_df_uuid(const std::string& value) {
  
  _impl_.rhs_df_uuid_.Set(value, GetArenaForAllocation());
}
inline std::string* JoinInformation::_internal_mutable_rhs_df_uuid() {
  
  return _impl_.rhs_df_uuid_.Mutable(GetArenaForAllocation());
}
inline std::string* JoinInformation::release_rhs_df_uuid() {
  // @@protoc_insertion_point(field_release:PicachvMessages.JoinInformation.rhs_df_uuid)
  return _impl_.rhs_df_uuid_.Release();
}
inline void JoinInformation::set_allocated_rhs_df_uuid(std::string* rhs_df_uuid) {
  if (rhs_df_uuid != nullptr) {
    
  } else {
    
  }
  _impl_.rhs_df_uuid_.SetAllocated(rhs_df_uuid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.rhs_df_uuid_.IsDefault()) {
    _impl_.rhs_df_uuid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:PicachvMessages.JoinInformation.rhs_df_uuid)
}

// repeated .PicachvMessages.RowJoinInformation row_join_info = 3;
inline int JoinInformation::_internal_row_join_info_size() const {
  return _impl_.row_join_info_.size();
}
inline int JoinInformation::row_join_info_size() const {
  return _internal_row_join_info_size();
}
inline void JoinInformation::clear_row_join_info() {
  _impl_.row_join_info_.Clear();
}
inline ::PicachvMessages::RowJoinInformation* JoinInformation::mutable_row_join_info(int index) {
  // @@protoc_insertion_point(field_mutable:PicachvMessages.JoinInformation.row_join_info)
  return _impl_.row_join_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PicachvMessages::RowJoinInformation >*
JoinInformation::mutable_row_join_info() {
  // @@protoc_insertion_point(field_mutable_list:PicachvMessages.JoinInformation.row_join_info)
  return &_impl_.row_join_info_;
}
inline const ::PicachvMessages::RowJoinInformation& JoinInformation::_internal_row_join_info(int index) const {
  return _impl_.row_join_info_.Get(index);
}
inline const ::PicachvMessages::RowJoinInformation& JoinInformation::row_join_info(int index) const {
  // @@protoc_insertion_point(field_get:PicachvMessages.JoinInformation.row_join_info)
  return _internal_row_join_info(index);
}
inline ::PicachvMessages::RowJoinInformation* JoinInformation::_internal_add_row_join_info() {
  return _impl_.row_join_info_.Add();
}
inline ::PicachvMessages::RowJoinInformation* JoinInformation::add_row_join_info() {
  ::PicachvMessages::RowJoinInformation* _add = _internal_add_row_join_info();
  // @@protoc_insertion_point(field_add:PicachvMessages.JoinInformation.row_join_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PicachvMessages::RowJoinInformation >&
JoinInformation::row_join_info() const {
  // @@protoc_insertion_point(field_list:PicachvMessages.JoinInformation.row_join_info)
  return _impl_.row_join_info_;
}

// repeated uint64 left_columns = 4;
inline int JoinInformation::_internal_left_columns_size() const {
  return _impl_.left_columns_.size();
}
inline int JoinInformation::left_columns_size() const {
  return _internal_left_columns_size();
}
inline void JoinInformation::clear_left_columns() {
  _impl_.left_columns_.Clear();
}
inline uint64_t JoinInformation::_internal_left_columns(int index) const {
  return _impl_.left_columns_.Get(index);
}
inline uint64_t JoinInformation::left_columns(int index) const {
  // @@protoc_insertion_point(field_get:PicachvMessages.JoinInformation.left_columns)
  return _internal_left_columns(index);
}
inline void JoinInformation::set_left_columns(int index, uint64_t value) {
  _impl_.left_columns_.Set(index, value);
  // @@protoc_insertion_point(field_set:PicachvMessages.JoinInformation.left_columns)
}
inline void JoinInformation::_internal_add_left_columns(uint64_t value) {
  _impl_.left_columns_.Add(value);
}
inline void JoinInformation::add_left_columns(uint64_t value) {
  _internal_add_left_columns(value);
  // @@protoc_insertion_point(field_add:PicachvMessages.JoinInformation.left_columns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
JoinInformation::_internal_left_columns() const {
  return _impl_.left_columns_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
JoinInformation::left_columns() const {
  // @@protoc_insertion_point(field_list:PicachvMessages.JoinInformation.left_columns)
  return _internal_left_columns();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
JoinInformation::_internal_mutable_left_columns() {
  return &_impl_.left_columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
JoinInformation::mutable_left_columns() {
  // @@protoc_insertion_point(field_mutable_list:PicachvMessages.JoinInformation.left_columns)
  return _internal_mutable_left_columns();
}

// repeated uint64 right_columns = 5;
inline int JoinInformation::_internal_right_columns_size() const {
  return _impl_.right_columns_.size();
}
inline int JoinInformation::right_columns_size() const {
  return _internal_right_columns_size();
}
inline void JoinInformation::clear_right_columns() {
  _impl_.right_columns_.Clear();
}
inline uint64_t JoinInformation::_internal_right_columns(int index) const {
  return _impl_.right_columns_.Get(index);
}
inline uint64_t JoinInformation::right_columns(int index) const {
  // @@protoc_insertion_point(field_get:PicachvMessages.JoinInformation.right_columns)
  return _internal_right_columns(index);
}
inline void JoinInformation::set_right_columns(int index, uint64_t value) {
  _impl_.right_columns_.Set(index, value);
  // @@protoc_insertion_point(field_set:PicachvMessages.JoinInformation.right_columns)
}
inline void JoinInformation::_internal_add_right_columns(uint64_t value) {
  _impl_.right_columns_.Add(value);
}
inline void JoinInformation::add_right_columns(uint64_t value) {
  _internal_add_right_columns(value);
  // @@protoc_insertion_point(field_add:PicachvMessages.JoinInformation.right_columns)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
JoinInformation::_internal_right_columns() const {
  return _impl_.right_columns_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
JoinInformation::right_columns() const {
  // @@protoc_insertion_point(field_list:PicachvMessages.JoinInformation.right_columns)
  return _internal_right_columns();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
JoinInformation::_internal_mutable_right_columns() {
  return &_impl_.right_columns_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
JoinInformation::mutable_right_columns() {
  // @@protoc_insertion_point(field_mutable_list:PicachvMessages.JoinInformation.right_columns)
  return _internal_mutable_right_columns();
}

// repeated .PicachvMessages.RenamingInformation renaming_info = 6;
inline int JoinInformation::_internal_renaming_info_size() const {
  return _impl_.renaming_info_.size();
}
inline int JoinInformation::renaming_info_size() const {
  return _internal_renaming_info_size();
}
inline void JoinInformation::clear_renaming_info() {
  _impl_.renaming_info_.Clear();
}
inline ::PicachvMessages::RenamingInformation* JoinInformation::mutable_renaming_info(int index) {
  // @@protoc_insertion_point(field_mutable:PicachvMessages.JoinInformation.renaming_info)
  return _impl_.renaming_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PicachvMessages::RenamingInformation >*
JoinInformation::mutable_renaming_info() {
  // @@protoc_insertion_point(field_mutable_list:PicachvMessages.JoinInformation.renaming_info)
  return &_impl_.renaming_info_;
}
inline const ::PicachvMessages::RenamingInformation& JoinInformation::_internal_renaming_info(int index) const {
  return _impl_.renaming_info_.Get(index);
}
inline const ::PicachvMessages::RenamingInformation& JoinInformation::renaming_info(int index) const {
  // @@protoc_insertion_point(field_get:PicachvMessages.JoinInformation.renaming_info)
  return _internal_renaming_info(index);
}
inline ::PicachvMessages::RenamingInformation* JoinInformation::_internal_add_renaming_info() {
  return _impl_.renaming_info_.Add();
}
inline ::PicachvMessages::RenamingInformation* JoinInformation::add_renaming_info() {
  ::PicachvMessages::RenamingInformation* _add = _internal_add_renaming_info();
  // @@protoc_insertion_point(field_add:PicachvMessages.JoinInformation.renaming_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PicachvMessages::RenamingInformation >&
JoinInformation::renaming_info() const {
  // @@protoc_insertion_point(field_list:PicachvMessages.JoinInformation.renaming_info)
  return _impl_.renaming_info_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// GroupByInformation

// map<uint64, uint64> group_by = 1;
inline int GroupByInformation::_internal_group_by_size() const {
  return _impl_.group_by_.size();
}
inline int GroupByInformation::group_by_size() const {
  return _internal_group_by_size();
}
inline void GroupByInformation::clear_group_by() {
  _impl_.group_by_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >&
GroupByInformation::_internal_group_by() const {
  return _impl_.group_by_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >&
GroupByInformation::group_by() const {
  // @@protoc_insertion_point(field_map:PicachvMessages.GroupByInformation.group_by)
  return _internal_group_by();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >*
GroupByInformation::_internal_mutable_group_by() {
  return _impl_.group_by_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, uint64_t >*
GroupByInformation::mutable_group_by() {
  // @@protoc_insertion_point(field_mutable_map:PicachvMessages.GroupByInformation.group_by)
  return _internal_mutable_group_by();
}

// -------------------------------------------------------------------

// UnionInformation

// repeated bytes df_uuids = 1;
inline int UnionInformation::_internal_df_uuids_size() const {
  return _impl_.df_uuids_.size();
}
inline int UnionInformation::df_uuids_size() const {
  return _internal_df_uuids_size();
}
inline void UnionInformation::clear_df_uuids() {
  _impl_.df_uuids_.Clear();
}
inline std::string* UnionInformation::add_df_uuids() {
  std::string* _s = _internal_add_df_uuids();
  // @@protoc_insertion_point(field_add_mutable:PicachvMessages.UnionInformation.df_uuids)
  return _s;
}
inline const std::string& UnionInformation::_internal_df_uuids(int index) const {
  return _impl_.df_uuids_.Get(index);
}
inline const std::string& UnionInformation::df_uuids(int index) const {
  // @@protoc_insertion_point(field_get:PicachvMessages.UnionInformation.df_uuids)
  return _internal_df_uuids(index);
}
inline std::string* UnionInformation::mutable_df_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:PicachvMessages.UnionInformation.df_uuids)
  return _impl_.df_uuids_.Mutable(index);
}
inline void UnionInformation::set_df_uuids(int index, const std::string& value) {
  _impl_.df_uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:PicachvMessages.UnionInformation.df_uuids)
}
inline void UnionInformation::set_df_uuids(int index, std::string&& value) {
  _impl_.df_uuids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:PicachvMessages.UnionInformation.df_uuids)
}
inline void UnionInformation::set_df_uuids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.df_uuids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:PicachvMessages.UnionInformation.df_uuids)
}
inline void UnionInformation::set_df_uuids(int index, const void* value, size_t size) {
  _impl_.df_uuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:PicachvMessages.UnionInformation.df_uuids)
}
inline std::string* UnionInformation::_internal_add_df_uuids() {
  return _impl_.df_uuids_.Add();
}
inline void UnionInformation::add_df_uuids(const std::string& value) {
  _impl_.df_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:PicachvMessages.UnionInformation.df_uuids)
}
inline void UnionInformation::add_df_uuids(std::string&& value) {
  _impl_.df_uuids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:PicachvMessages.UnionInformation.df_uuids)
}
inline void UnionInformation::add_df_uuids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.df_uuids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:PicachvMessages.UnionInformation.df_uuids)
}
inline void UnionInformation::add_df_uuids(const void* value, size_t size) {
  _impl_.df_uuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:PicachvMessages.UnionInformation.df_uuids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
UnionInformation::df_uuids() const {
  // @@protoc_insertion_point(field_list:PicachvMessages.UnionInformation.df_uuids)
  return _impl_.df_uuids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
UnionInformation::mutable_df_uuids() {
  // @@protoc_insertion_point(field_mutable_list:PicachvMessages.UnionInformation.df_uuids)
  return &_impl_.df_uuids_;
}

// -------------------------------------------------------------------

// ReorderInformation

// repeated uint64 perm = 1;
inline int ReorderInformation::_internal_perm_size() const {
  return _impl_.perm_.size();
}
inline int ReorderInformation::perm_size() const {
  return _internal_perm_size();
}
inline void ReorderInformation::clear_perm() {
  _impl_.perm_.Clear();
}
inline uint64_t ReorderInformation::_internal_perm(int index) const {
  return _impl_.perm_.Get(index);
}
inline uint64_t ReorderInformation::perm(int index) const {
  // @@protoc_insertion_point(field_get:PicachvMessages.ReorderInformation.perm)
  return _internal_perm(index);
}
inline void ReorderInformation::set_perm(int index, uint64_t value) {
  _impl_.perm_.Set(index, value);
  // @@protoc_insertion_point(field_set:PicachvMessages.ReorderInformation.perm)
}
inline void ReorderInformation::_internal_add_perm(uint64_t value) {
  _impl_.perm_.Add(value);
}
inline void ReorderInformation::add_perm(uint64_t value) {
  _internal_add_perm(value);
  // @@protoc_insertion_point(field_add:PicachvMessages.ReorderInformation.perm)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ReorderInformation::_internal_perm() const {
  return _impl_.perm_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ReorderInformation::perm() const {
  // @@protoc_insertion_point(field_list:PicachvMessages.ReorderInformation.perm)
  return _internal_perm();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ReorderInformation::_internal_mutable_perm() {
  return &_impl_.perm_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ReorderInformation::mutable_perm() {
  // @@protoc_insertion_point(field_mutable_list:PicachvMessages.ReorderInformation.perm)
  return _internal_mutable_perm();
}

// -------------------------------------------------------------------

// TransformInfo

// .PicachvMessages.FilterInformation filter = 1;
inline bool TransformInfo::_internal_has_filter() const {
  return information_case() == kFilter;
}
inline bool TransformInfo::has_filter() const {
  return _internal_has_filter();
}
inline void TransformInfo::set_has_filter() {
  _impl_._oneof_case_[0] = kFilter;
}
inline void TransformInfo::clear_filter() {
  if (_internal_has_filter()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.information_.filter_;
    }
    clear_has_information();
  }
}
inline ::PicachvMessages::FilterInformation* TransformInfo::release_filter() {
  // @@protoc_insertion_point(field_release:PicachvMessages.TransformInfo.filter)
  if (_internal_has_filter()) {
    clear_has_information();
    ::PicachvMessages::FilterInformation* temp = _impl_.information_.filter_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.information_.filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PicachvMessages::FilterInformation& TransformInfo::_internal_filter() const {
  return _internal_has_filter()
      ? *_impl_.information_.filter_
      : reinterpret_cast< ::PicachvMessages::FilterInformation&>(::PicachvMessages::_FilterInformation_default_instance_);
}
inline const ::PicachvMessages::FilterInformation& TransformInfo::filter() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.TransformInfo.filter)
  return _internal_filter();
}
inline ::PicachvMessages::FilterInformation* TransformInfo::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PicachvMessages.TransformInfo.filter)
  if (_internal_has_filter()) {
    clear_has_information();
    ::PicachvMessages::FilterInformation* temp = _impl_.information_.filter_;
    _impl_.information_.filter_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformInfo::unsafe_arena_set_allocated_filter(::PicachvMessages::FilterInformation* filter) {
  clear_information();
  if (filter) {
    set_has_filter();
    _impl_.information_.filter_ = filter;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PicachvMessages.TransformInfo.filter)
}
inline ::PicachvMessages::FilterInformation* TransformInfo::_internal_mutable_filter() {
  if (!_internal_has_filter()) {
    clear_information();
    set_has_filter();
    _impl_.information_.filter_ = CreateMaybeMessage< ::PicachvMessages::FilterInformation >(GetArenaForAllocation());
  }
  return _impl_.information_.filter_;
}
inline ::PicachvMessages::FilterInformation* TransformInfo::mutable_filter() {
  ::PicachvMessages::FilterInformation* _msg = _internal_mutable_filter();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.TransformInfo.filter)
  return _msg;
}

// .PicachvMessages.JoinInformation join = 2;
inline bool TransformInfo::_internal_has_join() const {
  return information_case() == kJoin;
}
inline bool TransformInfo::has_join() const {
  return _internal_has_join();
}
inline void TransformInfo::set_has_join() {
  _impl_._oneof_case_[0] = kJoin;
}
inline void TransformInfo::clear_join() {
  if (_internal_has_join()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.information_.join_;
    }
    clear_has_information();
  }
}
inline ::PicachvMessages::JoinInformation* TransformInfo::release_join() {
  // @@protoc_insertion_point(field_release:PicachvMessages.TransformInfo.join)
  if (_internal_has_join()) {
    clear_has_information();
    ::PicachvMessages::JoinInformation* temp = _impl_.information_.join_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.information_.join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PicachvMessages::JoinInformation& TransformInfo::_internal_join() const {
  return _internal_has_join()
      ? *_impl_.information_.join_
      : reinterpret_cast< ::PicachvMessages::JoinInformation&>(::PicachvMessages::_JoinInformation_default_instance_);
}
inline const ::PicachvMessages::JoinInformation& TransformInfo::join() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.TransformInfo.join)
  return _internal_join();
}
inline ::PicachvMessages::JoinInformation* TransformInfo::unsafe_arena_release_join() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PicachvMessages.TransformInfo.join)
  if (_internal_has_join()) {
    clear_has_information();
    ::PicachvMessages::JoinInformation* temp = _impl_.information_.join_;
    _impl_.information_.join_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformInfo::unsafe_arena_set_allocated_join(::PicachvMessages::JoinInformation* join) {
  clear_information();
  if (join) {
    set_has_join();
    _impl_.information_.join_ = join;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PicachvMessages.TransformInfo.join)
}
inline ::PicachvMessages::JoinInformation* TransformInfo::_internal_mutable_join() {
  if (!_internal_has_join()) {
    clear_information();
    set_has_join();
    _impl_.information_.join_ = CreateMaybeMessage< ::PicachvMessages::JoinInformation >(GetArenaForAllocation());
  }
  return _impl_.information_.join_;
}
inline ::PicachvMessages::JoinInformation* TransformInfo::mutable_join() {
  ::PicachvMessages::JoinInformation* _msg = _internal_mutable_join();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.TransformInfo.join)
  return _msg;
}

// .PicachvMessages.GroupByInformation group_by = 3;
inline bool TransformInfo::_internal_has_group_by() const {
  return information_case() == kGroupBy;
}
inline bool TransformInfo::has_group_by() const {
  return _internal_has_group_by();
}
inline void TransformInfo::set_has_group_by() {
  _impl_._oneof_case_[0] = kGroupBy;
}
inline void TransformInfo::clear_group_by() {
  if (_internal_has_group_by()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.information_.group_by_;
    }
    clear_has_information();
  }
}
inline ::PicachvMessages::GroupByInformation* TransformInfo::release_group_by() {
  // @@protoc_insertion_point(field_release:PicachvMessages.TransformInfo.group_by)
  if (_internal_has_group_by()) {
    clear_has_information();
    ::PicachvMessages::GroupByInformation* temp = _impl_.information_.group_by_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.information_.group_by_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PicachvMessages::GroupByInformation& TransformInfo::_internal_group_by() const {
  return _internal_has_group_by()
      ? *_impl_.information_.group_by_
      : reinterpret_cast< ::PicachvMessages::GroupByInformation&>(::PicachvMessages::_GroupByInformation_default_instance_);
}
inline const ::PicachvMessages::GroupByInformation& TransformInfo::group_by() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.TransformInfo.group_by)
  return _internal_group_by();
}
inline ::PicachvMessages::GroupByInformation* TransformInfo::unsafe_arena_release_group_by() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PicachvMessages.TransformInfo.group_by)
  if (_internal_has_group_by()) {
    clear_has_information();
    ::PicachvMessages::GroupByInformation* temp = _impl_.information_.group_by_;
    _impl_.information_.group_by_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformInfo::unsafe_arena_set_allocated_group_by(::PicachvMessages::GroupByInformation* group_by) {
  clear_information();
  if (group_by) {
    set_has_group_by();
    _impl_.information_.group_by_ = group_by;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PicachvMessages.TransformInfo.group_by)
}
inline ::PicachvMessages::GroupByInformation* TransformInfo::_internal_mutable_group_by() {
  if (!_internal_has_group_by()) {
    clear_information();
    set_has_group_by();
    _impl_.information_.group_by_ = CreateMaybeMessage< ::PicachvMessages::GroupByInformation >(GetArenaForAllocation());
  }
  return _impl_.information_.group_by_;
}
inline ::PicachvMessages::GroupByInformation* TransformInfo::mutable_group_by() {
  ::PicachvMessages::GroupByInformation* _msg = _internal_mutable_group_by();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.TransformInfo.group_by)
  return _msg;
}

// .PicachvMessages.ReorderInformation reorder = 4;
inline bool TransformInfo::_internal_has_reorder() const {
  return information_case() == kReorder;
}
inline bool TransformInfo::has_reorder() const {
  return _internal_has_reorder();
}
inline void TransformInfo::set_has_reorder() {
  _impl_._oneof_case_[0] = kReorder;
}
inline void TransformInfo::clear_reorder() {
  if (_internal_has_reorder()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.information_.reorder_;
    }
    clear_has_information();
  }
}
inline ::PicachvMessages::ReorderInformation* TransformInfo::release_reorder() {
  // @@protoc_insertion_point(field_release:PicachvMessages.TransformInfo.reorder)
  if (_internal_has_reorder()) {
    clear_has_information();
    ::PicachvMessages::ReorderInformation* temp = _impl_.information_.reorder_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.information_.reorder_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PicachvMessages::ReorderInformation& TransformInfo::_internal_reorder() const {
  return _internal_has_reorder()
      ? *_impl_.information_.reorder_
      : reinterpret_cast< ::PicachvMessages::ReorderInformation&>(::PicachvMessages::_ReorderInformation_default_instance_);
}
inline const ::PicachvMessages::ReorderInformation& TransformInfo::reorder() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.TransformInfo.reorder)
  return _internal_reorder();
}
inline ::PicachvMessages::ReorderInformation* TransformInfo::unsafe_arena_release_reorder() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PicachvMessages.TransformInfo.reorder)
  if (_internal_has_reorder()) {
    clear_has_information();
    ::PicachvMessages::ReorderInformation* temp = _impl_.information_.reorder_;
    _impl_.information_.reorder_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformInfo::unsafe_arena_set_allocated_reorder(::PicachvMessages::ReorderInformation* reorder) {
  clear_information();
  if (reorder) {
    set_has_reorder();
    _impl_.information_.reorder_ = reorder;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PicachvMessages.TransformInfo.reorder)
}
inline ::PicachvMessages::ReorderInformation* TransformInfo::_internal_mutable_reorder() {
  if (!_internal_has_reorder()) {
    clear_information();
    set_has_reorder();
    _impl_.information_.reorder_ = CreateMaybeMessage< ::PicachvMessages::ReorderInformation >(GetArenaForAllocation());
  }
  return _impl_.information_.reorder_;
}
inline ::PicachvMessages::ReorderInformation* TransformInfo::mutable_reorder() {
  ::PicachvMessages::ReorderInformation* _msg = _internal_mutable_reorder();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.TransformInfo.reorder)
  return _msg;
}

// .PicachvMessages.UnionInformation union = 5;
inline bool TransformInfo::_internal_has_union_() const {
  return information_case() == kUnion;
}
inline bool TransformInfo::has_union_() const {
  return _internal_has_union_();
}
inline void TransformInfo::set_has_union_() {
  _impl_._oneof_case_[0] = kUnion;
}
inline void TransformInfo::clear_union_() {
  if (_internal_has_union_()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.information_.union__;
    }
    clear_has_information();
  }
}
inline ::PicachvMessages::UnionInformation* TransformInfo::release_union_() {
  // @@protoc_insertion_point(field_release:PicachvMessages.TransformInfo.union)
  if (_internal_has_union_()) {
    clear_has_information();
    ::PicachvMessages::UnionInformation* temp = _impl_.information_.union__;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    _impl_.information_.union__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::PicachvMessages::UnionInformation& TransformInfo::_internal_union_() const {
  return _internal_has_union_()
      ? *_impl_.information_.union__
      : reinterpret_cast< ::PicachvMessages::UnionInformation&>(::PicachvMessages::_UnionInformation_default_instance_);
}
inline const ::PicachvMessages::UnionInformation& TransformInfo::union_() const {
  // @@protoc_insertion_point(field_get:PicachvMessages.TransformInfo.union)
  return _internal_union_();
}
inline ::PicachvMessages::UnionInformation* TransformInfo::unsafe_arena_release_union_() {
  // @@protoc_insertion_point(field_unsafe_arena_release:PicachvMessages.TransformInfo.union)
  if (_internal_has_union_()) {
    clear_has_information();
    ::PicachvMessages::UnionInformation* temp = _impl_.information_.union__;
    _impl_.information_.union__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void TransformInfo::unsafe_arena_set_allocated_union_(::PicachvMessages::UnionInformation* union_) {
  clear_information();
  if (union_) {
    set_has_union_();
    _impl_.information_.union__ = union_;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:PicachvMessages.TransformInfo.union)
}
inline ::PicachvMessages::UnionInformation* TransformInfo::_internal_mutable_union_() {
  if (!_internal_has_union_()) {
    clear_information();
    set_has_union_();
    _impl_.information_.union__ = CreateMaybeMessage< ::PicachvMessages::UnionInformation >(GetArenaForAllocation());
  }
  return _impl_.information_.union__;
}
inline ::PicachvMessages::UnionInformation* TransformInfo::mutable_union_() {
  ::PicachvMessages::UnionInformation* _msg = _internal_mutable_union_();
  // @@protoc_insertion_point(field_mutable:PicachvMessages.TransformInfo.union)
  return _msg;
}

inline bool TransformInfo::has_information() const {
  return information_case() != INFORMATION_NOT_SET;
}
inline void TransformInfo::clear_has_information() {
  _impl_._oneof_case_[0] = INFORMATION_NOT_SET;
}
inline TransformInfo::InformationCase TransformInfo::information_case() const {
  return TransformInfo::InformationCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace PicachvMessages

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transform_2eproto
